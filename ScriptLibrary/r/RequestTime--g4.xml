<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="ScriptLibrary">
  <record id="name=&quot;RequestTime&quot;" recordid="RequestTime">
    <name type="string">RequestTime</name>
    <script type="string">var SYSFUNCS=system.functions;

////////////////////////////////////////////////////////////////
//// Calculate Global lead time and request delivery date///////
////////////////////////////////////////////////////////////////

function getTaskDependency(taskid, tasks, container, deep)
{
	var len=tasks.length();
	var max=0;
	
	for(var i=0; i&lt;len; i++){
		if(taskid==tasks[i].taskId){
			var tt=timestr2num(getMyPlannedLeadTime(tasks[i], "planned"));
			var deps=tasks[i].dependentIds;			
			if(deps!=null){
				var len1=0;
				len1=deps.length()
				if(len1&gt;0){
					for(var j=0; j&lt;len1; j++){
						var depid = deps[j];
						var startphase=tasks[i].openInPhase;												
						var temp=0;
						temp=getTaskDependency(deps[j], tasks, container, deep+1);						
						if(max&lt;temp){
							var oldmax=max;
							max=temp;
						}
					}				
					max=max+tt; 
				}else{
					max=tt;
				}	
			}else{
				max=tt; 
			}			
		}
	}
	container.push(max);
	return max;
}


function getLeadTime(fileId, fileName)
{
	var plan=new SCFile("changePlan", SCFILE_READONLY);
	var sql="fileId= \""+fileId+"\" and fileName=\""+fileName+"\"";	
	var max=0;
	var sum=0;
	
	if ( plan.doSelect( sql ) === RC_SUCCESS ){
		var len=plan.tasks.length();	
		for(var i=0; i&lt;len; i++){
			var t=plan.tasks[i];
			var deep=0;
			var container=[]
			getTaskDependency(t.taskId, plan.tasks, container, deep);	
			var tlen = container.length;
			sum=sum+timestr2num(getMyPlannedLeadTime(t, "planned"));
			if(max&lt;container[tlen-1]){
				max=container[tlen-1];
			}
		}	
	}
	return {"max":max, "sum":sum};
}

function getMyGlobalLeadTime(record)
{
	var fileId=record.id;
	var fileName=SYSFUNCS.filename(record);
	var ret=getLeadTime(fileId, fileName);	
	
	if(ret.max !== 0 &amp;&amp; ret.sum !== 0){

		if(record.global_lead_time == null|| SYSFUNCS.val(record.global_lead_time,3) === SYSFUNCS.val("00:00:00",3)){
			record.global_lead_time=SYSFUNCS.val(num2timestr(ret.max),3);
		}
	
		record.global_lead_time_max=SYSFUNCS.val(num2timestr(ret.sum),3)
		record.global_lead_time_min=SYSFUNCS.val(num2timestr(ret.max),3)
	}
	return;
}

function getMyDeliveryDate(record)
{
	var num1=0;
	if(record.submit_date === null || record.submit_date === ""){
		num1=timestr2num(SYSFUNCS.str(SYSFUNCS.tod()));
	}else{
		num1=timestr2num(record.submit_date);
	}
	var num2=timestr2num(record.global_lead_time);
	record.delivery_date=SYSFUNCS.val(num2timestr(num1 + num2),3);
}

function calculateDeliveryDate(record)
{
	var fileId=record.number;
	var fileName="request";
	var ret=getLeadTime(fileId, fileName);
	record.global_lead_time=SYSFUNCS.val(num2timestr(ret.max),3);
	
	var num1=timestr2num(record.submit_date);
	num1=num1 + ret.max;
	record.delivery_date=SYSFUNCS.val(num2timestr(num1),3);
	
	return;
}



////////////////////////////////////////////////////////////////
///////// Caculate Plan Start date and Plan end date ///////////
////////////////////////////////////////////////////////////////

function calculatePlanStartAndPlanEnd(myEnd, taskid, tasks, container, invoker)
{
	var me=getMe(taskid, tasks);
	var myLead = getMyPlannedLeadTime(me, invoker);
	var myDesc = me.taskDescription;
	var myStart= getMyStart(myEnd, myLead);	
	operateStartAndEnd(myDesc, taskid, myStart, myEnd, myLead, container);
	var myDepIDs=getMyDepends(taskid, tasks);
	if(myDepIDs==null){
		return;
	}else{
		var len=myDepIDs.length();
		for(var i=0; i&lt;len; i++){
			calculatePlanStartAndPlanEnd(myStart, myDepIDs[i], tasks, container, invoker);
		}
	}
}

function getMe(taskid, tasks)
{
	var len=tasks.length();
	for(var i=0; i&lt;len; i++){
		var t=tasks[i];
		if(taskid === t.taskId){
			return t;
		}
	}
}

function getMyStart(end, lead)
{
	return timestr2num(end)-timestr2num(lead);
}

function getMyDepends(taskid, tasks)
{
	var len=tasks.length();
	for(var i=0; i&lt;len; i++){
		var t=tasks[i];
		if(taskid === t.taskId){
			return t.dependentIds;
		}
	}
}

function getModelVendorLeadTime(partno, vendor)
{
	var modelvendor=new SCFile("modelvendor", SCFILE_READONLY);
	var sql="part.no=\""+partno+"\" and vendor=\""+vendor+"\"";

	if(modelvendor.doSelect(sql)=== RC_SUCCESS){
		var ret= SYSFUNCS.str(modelvendor.delivery_lead_time);
		
		if(ret!=null &amp;&amp; ret!=""){
		
			if(ret.substring(0,1)=="-"){
				return(ret.substring(1));
			}else{
				return ret;
			}
		}
	}
	return "00:00:00";
}

function queryTaskPlanLeadTimeFromChangePlan(task)
{
	var tfs = task.taskFieldsSetting;

	if(tfs == null){
		return "00:00:00";
	}
	var len=tfs.length();
	if(len &gt; 0){
		var ret1=null;
		var ret2=null;
		
		var planleadtime="";
		var partno="";
		var vendor=""	
			
		for(var i=0; i&lt;len; i++){
			var t=tfs[i];
			if(t.fieldName=="planned.lead.time"){
				planleadtime = t.fieldValue;
			}	
			if(t.fieldName=="part.no"){
				partno = t.fieldValue;
			}
			if(t.fieldName=="vendor"){
				vendor = t.fieldValue;
			}			
		}
		
		if(planleadtime.length&gt;0){
			return planleadtime;
		}else if(partno.length&gt;0 &amp;&amp; vendor.length&gt;0){
			return getModelVendorLeadTime(partno, vendor);
		}else{
			return "00:00:00";
		}
		
	}else{
		return "00:00:00"; 
	}
}

function getMyPlannedLeadTime(task, invoker)
{
	if(invoker=="planned"){
		return queryTaskPlanLeadTimeFromChangePlan(task);
	}else if(invoker=="contractual"){
		var taskfile=new SCFile("requestTask", SCFILE_READONLY);
		var sql="number=\""+task.taskNumber+"\"";
		if ( taskfile.doSelect( sql ) === RC_SUCCESS ){
			if(taskfile.actual_lead_time == null || taskfile.actual_lead_time== ""){
				return taskfile.actual_lead_time;
			}else{
				return queryTaskPlanLeadTimeFromChangePlan(task);
			}
		}else{
			return queryTaskPlanLeadTimeFromChangePlan(task);
		}	
	}else{
		return "00:00:00";
	}
}

function operateStartAndEnd(taskdesc, taskid, myStart, myEnd, myLead, c)
{
	c.push({"taskdesc": taskdesc, "taskid": taskid, "myStart": myStart, "myEnd": myEnd, "myLead":myLead});
	return;
}

function rootNodeFunction(tasks, invoker, parentDeliveryDateStr)
{
	var noOneDependsOnMe=getNoOneDependsOnMe( tasks )
	var len=noOneDependsOnMe.length;
	var allend=parentDeliveryDateStr;
	var container=[];
	for(var i=0; i&lt;len; i++){
		var temp=noOneDependsOnMe[i];
		calculatePlanStartAndPlanEnd(allend, temp, tasks, container, invoker);
	}
	return container;
}

function getNoOneDependsOnMe( tasks )
{
	var ret=new Array();
	var len=tasks.length();	
	for(var i=0; i&lt;len; i++){
		var myId=tasks[i].taskId;
		var temp=false;	
		for(var j=0; j&lt;len; j++){
			var t=tasks[j];
			var deps=t.dependentIds;
						
			if(checkDeps(myId, deps)){
				temp=true;
				break;
			}
		}
		if(!temp){
			ret.push(myId);
		}		
	}
	return ret;
}

function checkDeps(taskid, deps)
{
	if(deps==null){
		return false;
	}
	if(deps.length()&gt;0){
		var lenDep=deps.length();				
		for(var m=0; m&lt;lenDep; m++)	{
			if(taskid===deps[m]){
				return true;
			}
		}
	}
	return false;
}

function timestr2num( timestr )
{
	var tempTime=SYSFUNCS.val(timestr, 3);
	var ret=SYSFUNCS.val(tempTime, 1);
	return ret;
}

function num2timestr( num )
{
	var tempTime=SYSFUNCS.val(num, 3);	
	ret = SYSFUNCS.str(tempTime);
	return ret;
}

function getMin(c)
{
	var len=c.length;
	var order=[];
	for(var i=len; i&gt;=0; i--){
		order.push(i);
	}
	for(var i=0; i&lt;len; i++){
		for(var j=0; j&lt;len; j++){
			if(c[i]&lt;c[j]){
				var t=c[i];
				c[i]=c[j];
				c[j]=t;
			}	
		}
	}	
	return c[0];
}

function getStartDate(fileId, fileName, whichtaskid, invoker, parentDeliveryDateStr)
{
	var sql="fileId=\""+fileId+"\" and fileName=\""+fileName+"\""
	var r=new SCFile("changePlan", SCFILE_READONLY);
	var all_start_end=[];
	
	if(r.doSelect(sql)===RC_SUCCESS){
		all_start_end=rootNodeFunction(r.tasks, invoker, parentDeliveryDateStr);			
	}
	var l=all_start_end.length;
	var t=[];
	var t_all=[];
	
	var myEnd="";
	
	if(l&gt;0){
		for(var i=0; i&lt;l; i++){
			t_all.push(all_start_end[i].myStart);
			
			if(whichtaskid == all_start_end[i].taskid){
				t.push(all_start_end[i].myStart);
			}
		}
		
		var myEnd="";
		var min_all=getMin(t_all);
		var min=getMin(t);
		
		for(var i=0; i&lt;l; i++){
			if(min == all_start_end[i].myStart &amp;&amp; all_start_end[i].taskid==whichtaskid ){
				myEnd = all_start_end[i].myEnd;
			}
		}	
		

		return ({"selfstart":num2timestr(min),"selfend":num2timestr(myEnd),"totalstart":num2timestr(min_all)});
	}
	return ({"selfstart":"00:00:00","selfend":"00:00:00","totalstart":"00:00:00"});
}

function getTaskByTaskNumber(tasknum, fileid, filename)
{
	var changeplan=new SCFile("changePlan", SCFILE_READONLY);
	var sql="fileId=\""+fileid+"\" and fileName=\""+filename+"\"";
	
	if(changeplan.doSelect(sql)=== RC_SUCCESS){
		var tasks = changeplan.tasks;
		
		if(tasks!=null){
			var len=tasks.length();
			for(var i=0; i&lt;len; i++){
				if(tasks[i].taskNumber == tasknum){
					return tasks[i];
				}
			}
		}
	}
	return null;
}

function getParentRequestDeliveryDate(parentNumber)
{
	var req= new SCFile("request", SCFILE_READONLY);
	var sql="number=\""+parentNumber+"\"";
	
	if(req.doSelect(sql)===RC_SUCCESS){
		return req.delivery_date;
	}else{
		return SYSFUNCS.str(SYSFUNCS.tod())
	}
}
function getMyStartDate(taskrecord, invoker)
{
	var fileId = taskrecord.parentTicket;
	var fileName = "request"; 
	var taskNumber = taskrecord.number;
	var task=getTaskByTaskNumber(taskNumber, fileId, fileName);

	if(task!=null){
		var taskId=task.taskId;
		var parentDeliveryDateStr=getParentRequestDeliveryDate(fileId);
		var t = getStartDate(fileId, fileName, taskId, invoker, parentDeliveryDateStr);
	
		taskrecord.planned_start=SYSFUNCS.val(t.selfstart, 3);
		taskrecord.planned_end=SYSFUNCS.val(t.selfend, 3);
		
		//planned.lead.time change data type to datetime (before is character)
		//OLD CODE:taskrecord.planned_lead_time=getMyPlannedLeadTime(task,"planned");
		taskrecord.planned_lead_time=SYSFUNCS.val(getMyPlannedLeadTime(task,"planned"), 3);
		
		if(taskrecord.actual_lead_time!==null &amp;&amp; taskrecord.actual_lead_time!==""){
			var num1=timestr2num(t.selfend);
			
			//actual.lead.time change data type to datetime(before is character)
			//OLD CODE:var num2=timestr2num(taskrecord.actual_lead_time);		
			var num2=timestr2num(SYSFUNCS.str(taskrecord.actual_lead_time));		
			taskrecord.planned_start=SYSFUNCS.val(num2timestr(num1-num2),3);
		}
	}
	
}

////////////////////////////////////////////////////////
////////////////////////////////////////////////////////


function getMyRequestedDate(record)
{
	if(record.svcCartId!==null &amp;&amp; record.svcCartId!=="")
	{
		var fCartItem=new SCFile("svcCartItem", SCFILE_READONLY);
		var sql="cartId=\"" + record.svcCartId + "\" and bundle=true";
		var duration=0;
		var duty = "24x7";
		var timezone = "US/Mountain";
		var submitDate = SYSFUNCS.tod();
		if(fCartItem.doSelect(sql)===RC_SUCCESS){
 			duration = fCartItem.duration;
			duty= fCartItem.schedule; 
			if(fCartItem.requested_for_type=="department"){
				timezone= lib.tzFunctions.getTZforContact(fCartItem.requested_by)	
			}else{
				timezone= lib.tzFunctions.getTZforContact(fCartItem.requested_for)	
 			}
		}else{
			sql="cartId=\"" + record.svcCartId + "\"";
			if(fCartItem.doSelect(sql)===RC_SUCCESS){
 				duration = fCartItem.duration;
				duty= fCartItem.schedule;
				if(fCartItem.requested_for_type=="department"){
					timezone= lib.tzFunctions.getTZforContact(fCartItem.requested_by)	
				}else{
					timezone= lib.tzFunctions.getTZforContact(fCartItem.requested_for)	
 				}
			}
		} 
		
		if(duration==0 || duration==null){
			return;
		}
		
 		if(record.submit_date === null || record.submit_date === ""){
 			submitDate = SYSFUNCS.tod();
		}else{
 			submitDate =record.submit_date
		}  		 
		record.requested_date = getAdjustedDate("",submitDate,duration,duty,timezone);
 		return;
	}
}


function getAdjustedDate(holiday,startDate,interval,duty,timezone){
 

	var argNames = new SCDatum();
	var argVals = new SCDatum();
	var argTypes = new SCDatum();
	var results = new SCDatum();          
          
    argNames.setType(8); 
	argVals.setType(8);      
	argTypes.setType(8);
	results.setType(8); 
          
    argNames.push("query");     
	argNames.push("times,1"); 
	argNames.push("times,2"); 
	argNames.push("prompt");  
	argNames.push("name");
	argNames.push("times,3");     
			
	 
	argVals.push(holiday);	 	
	argVals.push(startDate)          
    argVals.push(interval);            
	argVals.push(duty);
	argVals.push(timezone);
		 
	argTypes.push(2); 
	argTypes.push(3);
	argTypes.push(3);
	argTypes.push(2);
    argTypes.push(2);
    argTypes.push(3);
         	
    results.push("times,3");

	var radResults = system.library.RAD.run( "calendar.calc.date", argNames, argVals, argTypes, results );
	return radResults.results[0]; 

}
</script>
    <package type="string">RequestManagement</package>
    <sysmodtime type="dateTime">07/16/17 17:01:43</sysmodtime>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodcount type="decimal">0</sysmodcount>
    <prgnsystem NullValue="1" type="boolean"/>
    <sysrestricted NullValue="1" type="boolean"/>
  </record>
</recordset>
