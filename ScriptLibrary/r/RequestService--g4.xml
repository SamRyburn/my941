<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="ScriptLibrary">
  <record id="name=&quot;RequestService&quot;" recordid="RequestService">
    <name type="string">RequestService</name>
    <script type="string">
/**
 * @fileOverview  Proivde the functionality of Request Object
 * @author Mi Quan
 * @date Dec. 2013
 */


var Util = system.library.RequestUtil;
var TPUTILITY=lib.TaskPlannerUtilities;
var FILENAME=system.functions.filename;

/**
 * @public
 * @description  Get value list and status list for allowed status of each phase.
 * @param {String} WorkflowState - Workflow Phase
 * 
 */
function setStatusList(WorkflowState)
{
	 
    var allowStatus=lib.security.getRights("Request", "allowedStatus");
	 
	if (WorkflowState == "Logging" || WorkflowState == "Authorization")
	
		vars.$Request_statusValueList = ["Open"];
		
	else if (WorkflowState == "Fulfillment")
		
		vars.$Request_statusValueList = ["In Progress" , "Pending Customer" , "Suspended"   ];
		
	else if (WorkflowState == "Review")	
		
		vars.$Request_statusValueList = [ "Fulfilled" ];
		
	else if (WorkflowState == "Closure")	
		
		vars.$Request_statusValueList = [ "Closed"];
			else if (WorkflowState == "Order")	
		
		vars.$Request_statusValueList = [ "Ordering"];
		
  	vars.$Request_statusValueList =Util.intersect(vars.$Request_statusValueList, allowStatus);
  	 
  	 
  	vars.$Request_StatusDisplayList= Util.getDisplayList("request",vars.$Request_statusValueList);
  	 
  }

  
 
 

/**
 * @public
 * @description  Unsuspend the request from status 'Suspended' to orignal status. Called in the schedule
 * @param {String} id - Request Id
 * @param {String} oldstatus - Request orignal status 
 */


 function unsuspendRequest(id, oldstatus){
	
	var req= new SCFile("request");
	var query="number=\""+id +"\" and status=\"Suspended\"";
	var rc = req.doSelect(query);
	if ( rc == RC_SUCCESS )	{
	    var oldreq=new SCFile("request");
	    system.functions.copycurrent(oldreq,req);
		req.status=oldstatus;
		req.doUpdate();
		 
		var activity=new SCFile("activityRequest");
		activity.datestamp=new Date();
		activity.type=system.functions.scmsg( 21, "request");
		activity.operator="Background";
		activity.description[0]=system.functions.scmsg( 22, "request");
		activity.number=id;
		activity.doInsert();
		
		
		//send notification
		
		var rteReturnValue = new SCDatum();
  		var rteNames = new SCDatum();
  		var rteVals = new SCDatum();
	  	rteNames.setType(8); //type array
	    rteNames.push("file");      //Current File - INTO.FILE
	    rteNames.push("second.file"); //Saved File - INTO.FILE.SAVE
	    rteNames.push("name");      //Notification Name - INTO.NAME
	    rteVals.setType(8);
	    rteVals.push(req); // Request Record
	    rteVals.push(oldreq);// Saved Request Record
	    rteVals.push("rm.notification.unsuspend");	//RuleSet Name
	    system.functions.rtecall("callrad",rteReturnValue,"Ruleset.run",rteNames,rteVals,false); //false to run in the same thread, true to run in new one.  
  	
	}
}

/**
 * @public
 * @description  If a request has open tasks (not planned, closed or cancelled).
 * @param {String} reqId - Request Id
 * @returns {bollean} true or false 
 */

function hasOpenTasks(reqId){

	var reqTasks = new SCFile("requestTask" , SCFILE_READONLY);
	var query="parent.request=\""+reqId +"\" and status~=\"Planned\""+" and open=true";
	var nCount = reqTasks.doCount(query);
	if (nCount &gt; 0)	{
 		return true;
 	}else {
	return false;
	} 
	 
}


/**
 * @public
 * @description  Is all Request tasks finished (closed or cancelled).
 * @param {String} reqId - Request Id
 * @returns {bollean} true or false 
 */

function isAllRequestTaskFinished(reqId){

	var reqTasks = new SCFile("requestTask" , SCFILE_READONLY);
	var query="parent.request=\""+reqId +"\" and open=true";
	var nCount = reqTasks.doCount(query);
	if (nCount &gt; 0)	{
 		return false;
 	}else {
	return true;
	} 
	 
}

/**
 * @public
 * @description replace model change plan which generated by common taskplanner with source request ticket change plan .
 * @param record {SCFile}  - current record context variable
 * @param sourceNumber {string}  - copy source request number
 * @returns {void}  
 */
function cleanUpModelPlanAndReplaceTicketPlan(record, sourceNumber)
{
	var sql="fileId=\"" + record.number + "\" and fileName=\""+FILENAME(record)+"\"";
	
	var f1=new SCFile("changePlan");
	if ( f1.doSelect( sql ) === RC_SUCCESS ){
		f1.doDelete();
	}
	
	var f3=new SCFile("ticketContextConfig");
	if ( f3.doSelect( sql ) === RC_SUCCESS ){
		do{
			f3.doDelete();
		}while(f3.getNext() === RC_SUCCESS)
	}
	
	var cp=new SCFile("changePlan");
	var sql1="fileId=\"" + sourceNumber + "\" and fileName=\""+FILENAME(record)+"\"";
	if ( cp.doSelect( sql1 ) === RC_SUCCESS ){
		cp.fileId=record.number;
		var tasks=cp.tasks;
		var len=tasks.length();
		for(var i=0; i&lt;len; i++){
			var temp = tasks[i];
			temp.taskNumber="";
			temp.taskStatus="";
		}	
		cp.doSave();
	}
	
	var tcc=new SCFile("ticketContextConfig");
	var sql2="fileId=\"" + sourceNumber + "\" and fileName=\""+FILENAME(record)+"\"";
	if ( tcc.doSelect( sql2 ) === RC_SUCCESS ){
		do{
			tcc.fileId=record.number;
			//tcc.value="";
			tcc.doSave();			
		}while(tcc.getNext()=== RC_SUCCESS )
	}	
	
	return;	
}

//QCCR1E108503 If user has not Update right for Request, user should also not able to edit task planner
/**
 * @public
 * @description get the flag of the request .
 * @param record {SCFile}  - current record context variable
 * @param area {string}  - secrity area
 * @param item {string}  - secrity item
 * @returns {String:"true","false"}  
 */
function getTaskPlannerFlag(record,area,item)
{
    var taskplannerflag = "false";
    var hasEditTaskPlanRight = lib.security.getRights(area,item)==="true"? true : false;
	taskplannerflag=hasEditTaskPlanRight &amp;&amp; vars.$L_tableAccess_update ;
	if (taskplannerflag)
	{
	   if (record.open==false)
	   {
		  taskplannerflag="false";
	   }
	   else taskplannerflag = "true";
	}
	return taskplannerflag;
}

/** 
 * @public 
 * @description get the first task of the request . 
 * @param reqId {String}  - request id 
 * @returns reqTask {requesTask}  
 */ 
function getFirstRequestTask(reqId) { 
        var reqTask = new SCFile("requestTask"); 
        var query="parent.request=\""+reqId +"\""; 
        var rc = reqTask.doSelect(query) ; 
        if  (rc == RC_SUCCESS){ 
                return reqTask; 
        }else { 
                return null; 
        } 
        
}

/* 
 * Introduction: count how many linked interaction tickets are still open
* Author:Ricky Huang 
 * @param rid: current request ticket number 
 * @param dependfname: the linked file name 
 * @return count: record amount
*/
function countOpenDependRecord(rid, dependfname) 
{
	var  sc = new SCFile("screlation");
    var sql = "source=\"" + rid + "\" and depend.filename=\"" + dependfname + "\" and depend.active=true "
    var count = sc.doCount(sql);
   
    return count;    
}


/** 
 * @public 
 * @description get the information from joinsvcCartItemUserOption . 
 * @param requestId {String}  - request id
 * @param svcCartId {String}  - svcCart id
 
 */ 
function  getSvcCartUserOptionInfo(requestId, svcCartId){

	var cartItemId = new Array();
	var description = new Array();
	var requestedfor = new Array();
	var quantity = new Array();
	var status = new Array();
	var optionlabel = new Array();
	var optionvalue = new Array();
		
	
	var itemOption = new SCFile("joinsvcCartItemUserOption");
 	var Sql = "action.id=\""+ requestId+"\" and  cartId=\""+ svcCartId+"\"";//"Option.Name&lt;&gt;\"item options\"";  //file.userOption,Ticket.ID=\"RM10001\" and 
	var rc = itemOption.doSelect(Sql);

	if ( rc == RC_SUCCESS )	{
		
		do
		{
					  
			if (itemOption.Option_Name!= null &amp;&amp; itemOption.Option_Name=="item options"){
				rc = itemOption.getNext(); 
				continue;
			}
							
			cartItemId.push(system.functions.nullsub(itemOption.cartItemId,""));
			description.push(system.functions.nullsub(itemOption.item_description,""));
			requestedfor.push(system.functions.nullsub(itemOption.requested_for,""));
			quantity.push(system.functions.nullsub(itemOption.quantity,""));
			status.push(system.functions.nullsub(itemOption.status,""));
			optionlabel.push(system.functions.nullsub(itemOption.Option_Label,""));
			optionvalue.push(system.functions.nullsub(itemOption.Option_Value.toArray().toString(),"")); 
 			rc = itemOption.getNext(); 
 			
		}while (rc == RC_SUCCESS);			   
  	
	} 
	

	vars.$L_cartItemId = cartItemId;
	vars.$L_description = description;
	vars.$L_requestedfor = requestedfor;
	vars.$L_quantity = quantity;
	vars.$L_status = status;
	vars.$L_optionlabel = optionlabel;
	vars.$L_optionvalue = optionvalue;

}

function getCurrencyFormContacts(newContactsName )
{
   var operator = new SCFile("operator");
   var query = "select op.display.currency.code from operator op inner join contacts cont on (op.name=cont.operator.id) where cont.contact.name=\""+ newContactsName +"\"";
   var ret = operator.doSelect(query);
   if (ret == RC_SUCCESS)
   {
     var newCurrency = operator["display.currency.code"];
     return newCurrency;
   }
   else return null;
}


</script>
    <package type="string">RequestManagement</package>
    <sysmodtime type="dateTime">07/16/17 17:01:43</sysmodtime>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodcount type="decimal">0</sysmodcount>
    <prgnsystem NullValue="1" type="boolean"/>
    <sysrestricted NullValue="1" type="boolean"/>
  </record>
</recordset>
