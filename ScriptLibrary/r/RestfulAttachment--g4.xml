<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="ScriptLibrary">
  <record id="name=&quot;RestfulAttachment&quot;" recordid="RestfulAttachment">
    <name type="string">RestfulAttachment</name>
    <script type="string">var restRC = lib.RestfulConstant.getReturnCode();

function processAttachment(options, uri, attachmentArray, config){
	try{
		var method = options.method;
		var resource = uri[0];
		if (config['rest.attachment.enabled'] != true){
			return lib.RestfulMain.makeErrorMsg(restRC['badval'], system.functions.scmsg('10', 'restful', [resource]));
		}

		var attachmentId = uri[config.rest_keys.length() + 2];
		
		var dbdict = lib.RestfulMain.getdbdict(config.name);
		
		var keyValues = uri.slice(1);
				
		var queryFields = lib.RestfulQuery.resolveQueryFields(null, keyValues, config, dbdict);
		if (queryFields[0].length &gt; 0){
			return lib.RestfulMain.makeErrorMsg(restRC['badval'], system.functions.scmsg('8', 'restful', [queryFields[0].toString()]));
		}
		
		
		var file = new SCFile(config['name'], SCFILE_READONLY);
		
		var query = queryFields[1];
			
		var count = file.doCount(query);
		if (count &gt; 1){
			return lib.RestfulMain.makeErrorMsg(restRC['badval'], system.functions.scmsg('26', 'scxmlapi'));
		} else if (count == 0){
			return lib.RestfulMain.makeErrorMsg(restRC['no.record'], system.functions.scmsg('330', 'scjsdesc'));
		}
		
		//file.setFields(config.rest_keys.toArray()); //for checking privilege, all fields should be selected out
		file.doSelect(query);
		
		var ret = attachmentEngine(file, attachmentId, attachmentArray, method, config);

		if (ret.returnCode == restRC['success']){
			if ((method == 'GET' || method == 'DELETE') &amp;&amp; attachmentId == null){
				var array = [];
				var attachments = ret.file;
				var count = 0;
				for (var i = 0; i &lt; attachments.length; i++){
					array.push(attachment2Object(attachments[i]));
					count++;
				}
				ret.count = count;
				if (count != 0){
					return lib.RestfulMain.toJson(array, ret, true, 'attachment', 1);
				} else {
					ret.returnCode = restRC['no.attachment'];
					return lib.RestfulMain.makeErrorMsg(ret.returnCode, ret.message, true)
				}
			} else {
				var obj = attachment2Object(ret.file);
				return lib.RestfulMain.toJson(obj, ret, false, 'attachment');
			}
		} else {
			return lib.RestfulMain.makeErrorMsg(ret.returnCode, ret.message);
		}
	}catch(ex){
		return lib.RestfulMain.makeErrorMsg(restRC['error'], ex);
	}
}

/**
* CRUD attachment for REST API
* @param {string} filename - table name
* @param {string} query - Query statement against the file.  If user retrieves value by query, pass it through. If by id, the query should be constructed before calling this function to avoid additional search against dbdict
* @param {array} ids - Unique of the table for better performance in select
* @param {string} attachmentId - define attachment id for a single attachment.
* @param {array} attachmentArray - attachment array of attachment objects.
* @param {string} action - Attachment action. only 'get', 'put'(update), 'post'(create) &amp; 'delete' are allowed.
* @param {SCFile} config - extaccess
* objectName - object name defined in extaccess
**/
function attachmentEngine(file, attachmentId, attachmentArray, action, config){
	var securityResult = checkAttachmentPrivilege(system.functions.filename(file), file, action, config);
	if (securityResult != null){
		return securityResult;
	}
	var attachmentObj = attachmentArray.shift();
	switch(action)
	{
		case "GET"://retrieve attachment
			if(attachmentId == null){
				var attachments = file.getAttachments();				
              	return {'returnCode':restRC['success'], 'file':attachments}
              } else {
              	var att = file.getAttachment(attachmentId);
              	if (att == null){
              		return {'returnCode':restRC['no.attachment'], 'message':system.functions.scmsg('14', 'restful')};
              	}
              	attachmentArray.push(att);
              	
              	return {'returnCode':restRC['success'], 'file':att}
              }
			break;
			
		case "PUT"://update an attachment
			if (attachmentId == null){
				return {'returnCode':restRC['badval'], 'message':system.functions.scmsg('11', 'restful')};
			}
			if (attachmentObj.type == null || attachmentObj.type == ''){
				return {'returnCode':restRC['badval'], 'message':system.functions.scmsg('12', 'restful')};
			}
			
			//check attachment exists or not
			var tmpAttachment = file.getAttachment(attachmentId)
			if (tmpAttachment == null){
				return {'returnCode':restRC['no.attachment'], 'message':system.functions.scmsg('14', 'restful')};
			}
			attachmentObj.href = attachmentId;
			if (attachmentObj.name == null || attachmentObj.name == '') {
				attachmentObj.name = tmpAttachment.name;
			}
			var uuid = file.updateAttachment(attachmentObj);
			var rc = getLastRC();
			if (uuid == null || rc != RC_SUCCESS) {
				return {'returnCode':restRC['badval'], 'message':system.functions.scmsg('14', 'restful')};
			}
			
			var att = file.getAttachment(uuid);
			
			return {'returnCode':restRC['success'], 'file':att}
			
			break;
			
		case "POST"://add an attachment
			if (attachmentObj.type == null || attachmentObj.type == ''){
				return {'returnCode':restRC['badval'], 'message':system.functions.scmsg('12', 'restful')};
			}
			if (attachmentObj.name == null || attachmentObj.name == ''){
				return {'returnCode':restRC['badval'], 'message':system.functions.scmsg('13', 'restful')};
			}
			
			var uuid = file.insertAttachment(attachmentObj);
			var rc = getLastRC();
			if(uuid != null &amp;&amp; rc == RC_SUCCESS){
				var att = file.getAttachment(uuid);
				
				return {'returnCode':restRC['success'], 'file':att}
			}
			
			return {'returnCode':restRC['badval']};
			break;
			
		case "DELETE"://delete an attachment
			if(attachmentId == null){  
				var attachments = file.getAttachments();
				var array1 = _attachmentArray(attachments);
				var deleteResult = file.deleteAttachments();
				if(deleteResult == RC_NO_MORE){
					return {'returnCode':restRC['no.attachment'], 'message':system.functions.scmsg('14', 'restful')};
				}
				var rc = getLastRC();
				if(rc != RC_SUCCESS){
					return {'returnCode':restRC['badval']};
				}
				
				return {'returnCode':restRC['success'], 'attachment':{}, 'file':array1};
			} else {
				var att = file.getAttachment(attachmentId);
				var attObj = null;
				if(null!=att) {
				    var attObj = _attachment(att);
				}
				var deleteResult = file.deleteAttachment(attachmentId);
				if(deleteResult == RC_NO_MORE){
					return {'returnCode':restRC['no.attachment'], 'message':system.functions.scmsg('14', 'restful')};
				}
				var rc = getLastRC();
				if(rc != RC_SUCCESS){
					return {'returnCode':restRC['badval']};
				}
				return {'returnCode':restRC['success'], file:attObj};
			}
			
		default:
			return {'returnCode':restRC['invalid.action'], 'attachment':{}};
	}	
	
}


/**
* Check if it is an attachment rest and get attachment id from uri.
* @param {array} uri - uri input by user. [filename, id1 ...]
* @param {string} method - method of rest api (post/put/delete/get)
*
* @return {array} - [code, attachmentId]
**/
function getAttachmentIdInURI(uri, method, config){
	var keyLength = config.rest_keys.length();

	if (uri[keyLength + 1] != "attachments"){
		return [1,'invalid attachments uri'];
	}

	var attachmentId = uri[keyLength + 2];
	
	if (attachmentId == null &amp;&amp; method == "PUT"){
		return [2,'no attachmentId'];
	}
	
	return [0,attachmentId];
}

/**
* Convert attachment to object in json format
* @param {attachment} attachment - attachment object need to be converted
*
* @return {object} - converted object
**/
function attachment2Object(attachment){
	var fieldList = ['len','href','name','type','type'];
	var captionList = ['len','href','name','type','xmime:contentType'];
	var resourceName = 'attachment';
	var soatypeList = [,,,,];
	return lib.RestfulMain.file2Object(attachment, fieldList, captionList, soatypeList, resourceName);
}


function _attachment(attachment){
	return {'len':attachment['len'],'href':attachment['href'],'name':attachment['name'],'type':attachment['type']};
}

function _attachmentArray(array){
	var ret = [];
	
	for (var i=0;i&lt;array.length;i++){
		ret.push(_attachment(array[i]));
	}
	return ret;
}

/**
*	Check the privilege to CRUD attachment
*	@param {string} fileName - table name of the resource
*	@param {SCFile} file - scfile of a record in table
*	@param {string} method - get/put/post/delete
*	@param {SCFile} config - extaccess
*
*	@return {object} - no auth, {null} - has auth
**/
function checkAttachmentPrivilege(fileName, file, method, config){
	var objectType = null;
	if(system.functions.index(fileName, vars['$G.joinfiles'])&gt;0 &amp;&amp; filename != null) {
		objectType="device";
	}
	
	//get.object
	var tempResults = lib.RestfulQuery.getObject(fileName, objectType);
	var object = tempResults.object;
	var env = tempResults.env;
	var authorized = tempResults.authorized;
	
	if (object != null){
		//if the user has no privilege to access this table, return no auth code
		if(!system.functions.parse_evaluate(object['engine.access']+"", 4)){
			returnMsg = system.functions.scmsg(177, "object", [config['rest.list.name']]);
			returnCode = restRC['no auth'];
			return {'returnCode':returnCode, 'message':returnMsg}
		}
		if(!authorized){
			//need to change
			returnMsg = system.functions.scmsg(185, "object", [config['rest.list.name']]);
			returCode = restRC['no auth'];
			return {'returnCode':returnCode, 'message':returnMsg}
		}
		
		if (env != null) {
			vars.$L_tableAccess_view = true;
			vars.$L_tableAccess_update = true;
			lib.RestfulQuery.modifyTableAccess(fileName, env);
			setupTableAccess(env, fileName, file, object);
			
			if (method == "GET" &amp;&amp; !system.functions.parse_evaluate(vars.$L_tableAccess_view+"",4)){
				return {'returnCode':restRC['no auth'], 'message':system.functions.scmsg(17, "restful", [config['rest.list.name']])}
			} else if (!system.functions.parse_evaluate(vars.$L_tableAccess_update+"",4)){
				return {'returnCode':restRC['no auth'], 'message':system.functions.scmsg(21, "restful", [config['rest.list.name']])}
			}
		}
	}
}


/**
*	Rewrite the function in RAD se.search.engine Panel setup.tableAccess to js
*	@param {SCFile} env - profile
*	@param {string} fileName - table name of the resource
*	@param {SCFile} file - scfile of a record in table
*	@param {SCFile} object - Object record of the file
*
*	@return - N/A
**/
function setupTableAccess(env, fileName, file, object){
	var tableAccess = null;
	var folderExists = system.functions.exists("folder", file) ? true : false;
	if (env['tableAccess'] != null &amp;&amp; fileName != "rootcause" &amp;&amp; fileName != "rootcausetask" &amp;&amp; fileName != "knownerror" &amp;&amp; fileName != "knownerrortask"){
		tableAccess = system.functions.val(env['tableAccess'], 6);
	} else if (env['tableAccessProb'] != null &amp;&amp; fileName == "rootcause"){
		tableAccess = system.functions.val(env['tableAccessProb'], 6);
	} else if (env['tableAccessTask'] != null &amp;&amp; fileName == "rootcausetask"){
		tableAccess = system.functions.val(env['tableAccessTask'], 6);
	} else if (env['tableAccessKE'] != null &amp;&amp; fileName == "knownerror"){
		tableAccess = system.functions.val(env['tableAccessKE'], 6);
	} else if (env['tableAccessKETask'] != null &amp;&amp; fileName == "knownerrortask"){
		tableAccess = system.functions.val(env['tableAccessKETask'], 6);
	} else if (system.functions.filename(env) == "tableAccess"){
		tableAccess = env;
	}
	if (tableAccess != null){
		lib.tableAccess.setAccessVars(file, tableAccess, object, folderExists);
	}
}
	
var log=getLog('rest.attachment');


</script>
    <package type="string">Integration</package>
    <sysmodtime type="dateTime">07/16/17 17:01:43</sysmodtime>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodcount type="decimal">0</sysmodcount>
    <prgnsystem NullValue="1" type="boolean"/>
    <sysrestricted NullValue="1" type="boolean"/>
  </record>
</recordset>
