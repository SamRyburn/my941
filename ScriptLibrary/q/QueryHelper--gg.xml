<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="ScriptLibrary">
  <record id="name=&quot;QueryHelper&quot;" recordid="QueryHelper">
    <name type="string">QueryHelper</name>
    <script type="string">
_str      = system.functions.str;
_denull   = system.functions.denull;
_nullsub   = system.functions.nullsub;
_operator = system.functions.operator;

this.logger = new lib.log4js.Log(lib.log4js.Log.INFO, "BaseUtilities.QueryHelper");

/*
 * Map the environment variable to file name;
 * When doing query on certain file, it need it's profile to provide "append query" information.
 *
 * The profiles are stored in different database tables, they may contain different table schema,
 * so provide the field name in this record. (Currently all the field name are the same)
 */
this.profiles = {
    /* Change Management Profiles        (file=cm3profile) */
    "cm3r"           : { "variable.name" : "$G.cm3r.environment", "field.name" : "append.query" },
    "cm3t"           : { "variable.name" : "$G.cm3t.environment", "field.name" : "append.query" },
    
    /* Configuration Management Profiles (file=icmenv) */
    "device"         : { "variable.name" : "$G.am.environment",   "field.name" : "append.query" },
    
    /* Contract Management Profiles      (file=ctenv) */
    "contract"       : { "variable.name" : "$G.ct.environment",   "field.name" : "append.query" },
    
    /* Incident Management Profiles      (file=pmenv) */
    "probsummary"    : { "variable.name" : "$G.pm.environment",   "field.name" : "append.query" },
    
    /* Knowledge Management Profiles     (file=kmprofile) */
    
    /* Problem Management Profiles       (file=rcenv) */
    "rootcause"      : { "variable.name" : "$G.rc.environment",   "field.name" : "append.query" },
    "rootcausetask"  : { "variable.name" : "$G.rc.environment",   "field.name" : "append.query" },
    "knownerror"     : { "variable.name" : "$G.rc.environment",   "field.name" : "append.query" },
    "knownerrortask" : { "variable.name" : "$G.rc.environment",   "field.name" : "append.query" },
    
    /* Request Management Profiles       (file=ocmprofile) */
    "ocmq"           : { "variable.name" : "$G.ocmq.environment", "field.name" : "append.query" },
    "ocmo"           : { "variable.name" : "$G.ocmo.environment", "field.name" : "append.query" },
    "ocml"           : { "variable.name" : "$G.ocml.environment", "field.name" : "append.query" },
    
    /* Service Desk Profiles             (file=smenv) */
    "incidents"      : { "variable.name" : "$G.sm.environment",   "field.name" : "append.query" },
};

var isEmpty = function(query) {
    if (query == null || query == undefined || query.match(/^\s*$/)) return true;
    if (query.match(/^\s*true\s*$/i)) return true;
    return false;
};

/*
 * Append Query only appears at the end of query string, so the "and" clause is mandatory.
 */
var formatAppendQuery=function(query) {
    // empty
    if (isEmpty(query)) return ""
    if (query.match(/^\s*and\s+true\s*$/i)) return "";
    // append query doesn't start with "and", then add one
    if (!query.match(/^\s*and\s+/i)) return " and (" + query + ")";
    // append query doesn't start with space, then add one
    if (!query.match(/^\s+/)) return " " + query;
    return query;
};

/*
 * Read append query from environment variables.
 */
function buildAppendQuery(filename,isexternalSearch) {

   /*
  	* QCCR1E90473 KM doc's URL is out of security control
  	* added by Zhang, Zhen-Qing
  	*/
    var aquery = "";	
	if(filename=="secArea" &amp;&amp; vars['$G.disabled.area']!=null)
	{
	  	return formatAppendQuery("not (name isin $G.disabled.area)");
	}
    // end QCCR1E90473

    if (filename=="inbox")
    {
      if (vars['$is.report']!=null &amp;&amp; vars['$is.report']==true)
      {
        aquery = buildReportQuery();
      } else {
        aquery = buildInboxQuery();
      }
      return formatAppendQuery(aquery);
    }
    
    /**
    *  QCRQ1E99642[SLM] As an agreement operator, I can associate others with agreement
    */
    if (filename == "sla"){

      if (vars["$targetType"]==="ola") aquery=" and category=\"ola\"";
      if (vars["$targetType"]==="uc") aquery=" and category=\"uc\"";
      return formatAppendQuery(appendQuery) + aquery;
	  
    }

    var profile = profiles[filename];
    if (profile == null) {
        logger.debug("The file \"" + filename + "\" doesn't have any associated profile record.");
        return aquery;//"";
    }
    
    var varname = profile["variable.name"];
    var env = system.vars[varname];
    if (env == null) {
        logger.warn("Environment variable \"" + varname + "\" hasn't been initialized yet.");
        return aquery;//"";
    }

    var fieldname = profile["field.name"];
    var appendQuery = (env[fieldname] == null ? "" : env[fieldname]);
    
    /*
     * Here is something wired, the "append.query" in "Profile" should be a text string.
     * But the data type of attribute "append.query" in $G.ocmq.environment is a [C++ datum], 
     * it need to convert to javascript string (getText()), otherwise type mismatch error will occur 
     * (only string can do regex match);
     */
    if (appendQuery["getText"] != undefined)
        appendQuery = appendQuery.getText();
        
    /*
     * QCRQ1E97643 [PbM] Separate Known Error from Problem, restrict search query.
     */
    if (filename == "rootcause" &amp;&amp; vars.$G_pd_pm_enabled == true){

      var isKnownError = system.functions.nullsub(vars.$isKnownError,false);
      if (isKnownError == true) aquery=" and isKnownError=true";
      if (isKnownError != true) aquery=" and category~#\"known error\"";
	  if (vars.$relateAction &amp;&amp; vars.$targetType=="ke") aquery=" and isKnownError=true";
	  if (vars.$relateAction &amp;&amp; (vars.$targetType=="pbm" || vars.$targetType=="rootcause")) aquery=" and category~#\"known error\"";
	  
    }
    
    
    
    return formatAppendQuery(appendQuery) + aquery;
}

 /*
  * QCCR1E90473 KM doc's URL is out of security control
  * build kmdocument external search permission query
  * added by Zhang, Zhen-Qing
  */
function buildExtKMDSearchPermissionSubQuery() {

	var _index = system.functions.index;
	var subQuery = "";	
	if (_index("SysAdmin", vars.$lo_ucapex) &gt; 0 ||
		_index("KMAdmin", vars.$lo_ucapex) &gt; 0 || 
		_index("SysAdmin", vars.$lo_operator["cap.exec"]) &gt;0 || 
		_index("KMAdmin", vars.$lo_operator["cap.exec"])&gt; 0) {
		if (vars.$G_ess)
			subQuery += " and status isin {\"external\", \"internal\"}";
		else
		    subQuery += " and status isin {\"external\", \"internal\", \"retired\"}";

	} else {
		subQuery += " and (( status=\"external\" ";
		subQuery += lib.KMSecurity.getCatsQueryForDocument(vars.$G_viewext);
		subQuery += ") or (status=\"internal\"";
		subQuery += lib.KMSecurity.getCatsQueryForDocument(vars.$G_viewintext);
		subQuery += ") ";
		if (vars.$G_km_environment.retire &amp;&amp; !vars.$G_ess) {
			subQuery += " or (" + vars.$G_retiredquery + ")";
		}
		subQuery += ") ";
	}
	return subQuery;
}


/*
 * Append "append query" to certain sql query string.
 */
function buildFullQuery(query, filename) {
    return concatQuery(query, buildAppendQuery(filename))
}

/*
 * Concatenate two query string into one with "and" keywords.
 */
function concatQuery(query1, query2) {
    query1 = isEmpty(query1) ? "true" : query1;
    
    if (query1 == "true" &amp;&amp; !isEmpty(query2) &amp;&amp; query2.toUpperCase().indexOf("SELECT") == 0)
    {
        return query2;
    }
    
    query2 = formatAppendQuery(query2);
    return query1 + query2;
}

function buildInboxQuery() {
  var aquery = "";
  if (system.functions.index("SysAdmin", vars['$lo.ucapex'])&lt;=0)
  {
    aquery = " " + 
             " (inbox.manager=operator() or operator.name=operator() or audience.type=\"everyone\" or " + 
             " (audience.type=\"assignmentgroups\" and assignment.groups isin " + _str(_denull(vars['$lo.pm.assignments'])) + ") or " +
             " (audience.type=\"groups\" and groups isin " + _str(_denull(vars['$lo.groups'])) + ") or " +
             " (audience.type=\"role\" and role=\""+_nullsub(vars['$G.user.role'], "NONE")+"\"))";
  }

  return aquery;
}

function buildReportQuery() {
  var aquery = "inbox.class isin {\"classList\",\"chart\",\"pivot\"}";

  if (vars['$is.dashboard']!=null &amp;&amp; vars['$is.dashboard']==true)
  {
    aquery = "inbox.class=\"dashboard\" ";
  }

  if (vars['$is.report.search']!=null &amp;&amp; vars['$is.report.search']==true)
  {
    aquery = "inbox.class isin {\"classList\",\"chart\",\"pivot\",\"dashboard\"}";
  }

  if (system.functions.index("SysAdmin", vars['$lo.ucapex'])&lt;=0)
  {
    aquery += " and " + 
                 " (inbox.manager=operator() or operator.name=operator() or audience.type=\"everyone\" or " + 
                 " (audience.type=\"assignmentgroups\" and assignment.groups isin " + _str(_denull(vars['$lo.pm.assignments'])) + ") or " +
                 " (audience.type=\"groups\" and groups isin " + _str(_denull(vars['$lo.groups'])) + ") or " +
                 " (audience.type=\"role\" and role=\""+_nullsub(vars['$G.user.role'], "NONE")+"\"))";
  }

  return aquery;
}


/**
 * Whether it is a safe query
 */
function isSafe(query) {
	if (query == null) {
		return true;
	}

	// these methods are not security safe using in query
	var unsafes = 
	[
		"parse",
		"evaluate",
		"jscall",
		"js"
	];
	
	var i;
	for (i = 0; i &lt; unsafes.length; i++) {
		if (query.indexOf(unsafes[i] + "(") &gt;= 0) {
			return false;
		}
	}
	
	return true;
}


</script>
    <package type="string">BaseUtilities</package>
    <sysmodtime type="dateTime">07/16/17 17:01:42</sysmodtime>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodcount type="decimal">0</sysmodcount>
    <prgnsystem NullValue="1" type="boolean"/>
    <sysrestricted NullValue="1" type="boolean"/>
  </record>
</recordset>
