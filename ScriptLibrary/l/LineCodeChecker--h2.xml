<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="ScriptLibrary">
  <record id="name=&quot;LineCodeChecker&quot;" recordid="LineCodeChecker">
    <name type="string">LineCodeChecker</name>
    <script type="string">/*
 * This file does simple checker for one line Javascript code.
 *
 *
 * You can add your check function in this file, by following the rule below:
 *
 * function name: startwith "check"
 * function parameter: String for one line code
 * return: String which contains the error/warning message, return empty string if no error found.
 *
 * e.g.
 * 	function checkMyRule(codeline) {
 * 		if (!match) {
 *			return "My warning message.";
 *		} else {
 *			return "";
 *		}
 */

var root = this;
var _checkers = null;
var _ = lib.Underscore.require();

// need fix suggestion
var needSuggestion = true;


/**
 * Check code, this is the main method
 *
 * @return 
 * It returns a structure with this form:
 *
 *     errors: [ 
 *		   {
 *             line: NUMBER,
 *             reason: STRING,
 *         }
 *     ]
 */
function check(script) {
	var errors = [];
	var lines = _.lines(script);
	
	var warning, i;
	for (i = 0; i &lt; lines.length; i++) {
		if (lines[i]) {
			warning = checkLine(lines[i]);
			if (warning) {
				warning = {
          			line: i+1,
          			reason: warning
		        };
		        errors.push(warning);
			}
		}
	}
	
	return errors;
}


/**
 * Check one line code
 *
 * @return warning/error message, empty string if no error found
 */
function checkLine(codeline) {
	codeline = _.trim(codeline);
	
	// ignore comments
	if ( codeline.length == 0 || _.startsWith(codeline, "//") || 
		 _.startsWith(codeline, "/*") || _.endsWith(codeline, "*/") ) {
		return "";
	}
	
	// get all check functions
	var checkers = getAllCheckFunctions();

	var output = [], i;
	for (i = 0; i &lt; checkers.length; i++) {
		var warning = root[checkers[i]](codeline);
		if (warning) {
			if (output.length &gt; 0) {
				output.push('\n');
			}
			output.push(warning);
		}
	}
	
	return output.join('');
}


/**
 * Get all functions which start with 'check'
 */
function getAllCheckFunctions() {
	if (_checkers) {
		return _checkers;
	}

	_checkers = [];
	
	// get all functions
	var list = [], f;
	for (f in root) { 
    	if (typeof(root[f])=='function') { 
    		if (lib.ArrayUtil.contains(list, f)) {
    			break;
    		}
    		list.push(f);

			// filter functions which start with 'check'
			if (_.startsWith(f, "check") &amp;&amp; f != "check" &amp;&amp; f != "checkLine") {
				_checkers.push(f);
			}
	    } 
	}
	
	return _checkers;
}
 

/**
 * Check 'for' statement
 */
function checkStatementFor(codeline) {
	var msg = "";
	var ForPattern = /^[{|\s]*for\s*\(.*$/;
	var ForInPattern = /\s*\S*in\S*\s*/;

    if (ForPattern.test(codeline)) {
        var enClosedPos = findEnclosed(codeline);
        var conditionState = codeline.substr(enClosedPos.start, enClosedPos.end - enClosedPos.start + 1);
        var condition = conditionState.split(';');
        
        if (condition.length != 3) {
            if (ForInPattern.test(conditionState)) {
                msg = "Please avoid (for...in) statement without filtering unwanted properties from the prototype in the body.";
            }
        } else {
			if (_.endsWith(condition[1], "length()")) {
	            msg = "The length function call happens in each loop, which leads to low performance.";

    	        if (needSuggestion) {
        	        var newConditon = fixConditionFor(condition);
            	    msg += "\nPlease try:\n" + newConditon;
            	}
            }
        }
    }

	if (msg.length &gt; 0) {
		msg = warn(msg);
	}
	
    return msg;
}

function findEnclosed(codeline) {
    var enclosePos = {
        start: -1,
        end: -1
    };

    var level = 0;
	var total = codeline.length;
	var k;
    for (k = 0; k &lt; total; ++k) {
        if (codeline[k] == '(') {
            level++;
            if (enclosePos.start == -1) {
            	enclosePos.start = k;
            }
        }
        if (codeline[k] == ')') {
            level--;
            if (enclosePos.start != -1 &amp;&amp; level == 0) {
                enclosePos.end = k;
                break;
            }
        }
    }
    return enclosePos;
}

function fixConditionFor(condition) {
	var LenghPattern = /[^&amp;\|]*\.length[^&amp;\|]*/g;
	var LenStatePattern = /[^&lt;|&gt;|=]*\.length[^&lt;|&gt;|=]*/;

    var matchs = condition[1].match(LenghPattern);
    if (matchs) {
		var j;
        for (j = 0; matchs != null &amp;&amp; j &lt; matchs.length; ++j) {
            var lengState = matchs[j].match(LenStatePattern);

            if (lengState) {
                var loopVariable = condition[0].match(/[^=]*/);
                if (!loopVariable) {
                }
                loopVariable = loopVariable.toString().replace(/^\s*\(/, "").replace(/var\s*/, "").replace(/\s*/g, "");
				condition[0] = "var length = " + lengState + ";\nfor" + condition[0];
                condition[1] = condition[1].replace(lengState.toString(), " length");
            } else {
            }
        }
        condition = condition.join(";");
        condition = condition.replace(/\s*([&gt;&lt;=]+)\s*/g, " $1 ");

        return condition;
    }
}


/**
 * Check by simple regular expression.
 */
function checkByRegularExpression(codeline) {
	var exps = [
		{
			// print
			pattern: /^[{|\s]*print\s*\(.*$/,
			reason: info("Please avoid using print directly.")
		},
		{
			// eval
			pattern: /^[{|\s]*eval\s*\(.*$/,
			reason: warn("Please avoid using eval.")
		},
		{
			// SCFile()
			pattern: /(\$|SCFile)\s*\(\s*\"?[a-zA-Z|\.|\$|_]+\"?\s*\)/,
			reason: info("Please make sure the SCFile object is for write, otherwise set 'SCFILE_READONLY' and setFields()")
		}
	];

	var i;
	for (i = 0; i &lt; exps.length; i++) {
		if (exps[i].pattern.test(codeline)) {
			return exps[i].reason;
		}
	}

    return "";	
}


/**
 * Check RTE functions those may have performance concern.
 */
function checkRteFunction(codeline) {
	var functions = [
		"insert",
		"fduplicate"
	];
	
	var i;
	for (i = 0; i &lt; functions.length; i++) {
		if (codeline.indexOf("functions." + functions[i] + "(") != -1) {
			return info("Please avoid using RTE " + functions[i] + " function for performance concern.");
		}
	}
	
	return "";
}


function info(message) {
	return "INFO - " + message;
}

function warn(message) {
	return "WARN - " + message;
}</script>
    <package type="string">BaseUtilities</package>
    <sysmodtime type="dateTime">07/16/17 17:01:42</sysmodtime>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodcount type="decimal">0</sysmodcount>
    <prgnsystem NullValue="1" type="boolean"/>
    <sysrestricted NullValue="1" type="boolean"/>
  </record>
</recordset>
