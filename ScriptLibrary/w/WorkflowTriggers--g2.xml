<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="ScriptLibrary">
  <record id="name=&quot;WorkflowTriggers&quot;" recordid="WorkflowTriggers">
    <name type="string">WorkflowTriggers</name>
    <script type="string">function localizeTransitions( record, oldRecord )
{	
    var i=0; 
    var j=0; 
    var undefined="undefined";
    
	if (  oldrecord.manualTransition != record.manualTransition )
	{
		var msgclass = "wfT";
		var actionType = "addonly";
		var ids = new Array();
		var labels = new Array();

		for ( i = 0, iLoopTimes = record.manualTransition.length();i &lt; iLoopTimes;i++ )
		{
			if (record.manualTransition[i].mtId != null &amp;&amp; record.manualTransition[i].mtId != undefined &amp;&amp; record.manualTransition[i].mtId!="")
			{
				ids.push( record.phaseName+"_"+record.workflowName+"_"+record.tableName+":"+record.manualTransition[i].mtId );
				labels.push( record.manualTransition[i].mtOptionName );
			}	
		}
		
		var language;
		language = "en";
		if ( vars.$G_my_language != null )
		{
			language = vars.$G_my_language;
		}
		
		lib.localizeTable.localizeList( ids, labels, language, msgclass, actionType )
		
		var deleteFields = new Array();
		var updateFields = new Array();
		var updateLabels = new Array();
		
		for ( j = 0, jLoopTimes = oldrecord.manualTransition.length();j &lt; jLoopTimes;j++ )
		{
			var match = false;
			for ( i = 0, iLoopTimes = record.manualTransition.length(); i &lt; iLoopTimes;i++ )
			{
			  if(record.manualTransition[i].mtId!=null &amp;&amp; record.manualTransition[i].mtId!=undefined &amp;&amp; record.manualTransition[i].mtId!="")
			  {
			    if(oldrecord.manualTransition[j].mtId!=null &amp;&amp; oldrecord.manualTransition[j].mtId!=undefined &amp;&amp; oldrecord.manualTransition[j].mtId!="")
			    {
				  if (record.manualTransition[i].mtId == oldrecord.manualTransition[j].mtId )
				  {
					match = true;
					if ( record.manualTransition[i].mtOptionName != oldrecord.manualTransition[j].mtOptionName )
					{
						updateFields.push( record.phaseName+"_"+record.workflowName+"_"+record.tableName+":"+record.manualTransition[i].mtId );
						updateLabels.push( record.manualTransition[i].mtOptionName );
					}
				  }
				}  
			  }	
			}
			
			if ( match == false )
			{
				deleteFields.push( oldrecord.phaseName+"_"+oldrecord.workflowName+"_"+oldrecord.tableName+":"+oldrecord.manualTransition[j].mtId  );
			}
		}

		if ( updateFields.length != 0  )
		{
			var updateAction = "add";
			lib.localizeTable.localizeList( updateFields, updateLabels, language, msgclass, updateAction );		
		}
			
		if ( deleteFields != null )
		{
			var deleteAction = "delete";
			lib.localizeTable.localizeList( deleteFields, null, language, msgclass, deleteAction )
		}
	}
}

function localizeWorkflowActions( record, oldRecord )
{ 
      var i=0;
      var j=0; 
      var undefined="undefined";
      
      if (  oldrecord.action != record.action )
      {
            var msgclass = "wfA";
            var actionType = "addonly";
            var ids = new Array();
            var labels = new Array();
            for ( i = 0, iLoopTimes = record.action.length();i &lt; iLoopTimes;i++ )
            {
                  if(record.action[i].actionMsgId!=null &amp;&amp; record.action[i].actionMsgId !=undefined &amp;&amp; record.action[i].actionMsgId!="")
                  {
                   ids.push( "workflow:"+record.name+"_"+record.tableName+":"+record.action[i].actionMsgId );
                   labels.push( record.action[i].actionName );
                  } 
            }
            
            var language;
            language = "en";
            if ( vars.$G_my_language != null )
            {
                  language = vars.$G_my_language;
            }
            
            lib.localizeTable.localizeList( ids, labels, language, msgclass, actionType )
            
            var deleteFields = new Array();
            var addFields = new Array();
            var addLabels = new Array();
                        
            for (j = 0, jLoopTimes = oldrecord.action.length();j &lt; jLoopTimes;j++)
            {
                  var match = false;
                  for (i = 0, iLoopTimes = record.action.length();i &lt; iLoopTimes;i++ )
                  {
                    if(record.action[i].actionMsgId != null &amp;&amp; record.action[i].actionMsgId!=undefined &amp;&amp; record.action[i].actionMsgId!="")
                    {
                      if(oldrecord.action[j].actionMsgId!=null &amp;&amp; oldrecord.action[j].actionMsgId!=undefined &amp;&amp; oldrecord.action[j].actionMsgId!="")
                      {
                        if ( record.action[i].actionMsgId == oldrecord.action[j].actionMsgId )
                        {
                              match = true;
                              break;
                        }
                      }
                    }    
                  }
                  
                  if ( match == false )
                  {
                        deleteFields.push( "workflow:"+oldrecord.name+"_"+oldrecord.tableName+":"+oldrecord.action[j].actionMsgId );
                  }
            }
            
                  
            if ( deleteFields.length != 0 )
            {
                  var deleteAction = "delete";
                  lib.localizeTable.localizeList( deleteFields, null, language, msgclass, deleteAction )
            }
      }
}


function localizeActions( record, oldRecord )
{ 
      var i=0;
      var j=0; 
      var undefined="undefined";
      
      if (  oldrecord.action != record.action )
      {
            var msgclass = "wfA";
            var actionType = "addonly";
            var ids = new Array();
            var labels = new Array();
            for ( i = 0, iLoopTimes = record.action.length();i &lt; iLoopTimes;i++ )
            {
                  if(record.action[i].actionMsgId!=null &amp;&amp; record.action[i].actionMsgId !=undefined &amp;&amp; record.action[i].actionMsgId!="")
                  {
                   ids.push( record.phaseName+"_"+record.workflowName+"_"+record.tableName+":"+record.action[i].actionMsgId );
                   labels.push( record.action[i].actionName );
                  } 
            }
            
            var language;
            language = "en";
            if ( vars.$G_my_language != null )
            {
                  language = vars.$G_my_language;
            }
            
            lib.localizeTable.localizeList( ids, labels, language, msgclass, actionType )
            
            var deleteFields = new Array();
            var addFields = new Array();
            var addLabels = new Array();
                        
            for (j = 0, jLoopTimes = oldrecord.action.length();j &lt; jLoopTimes;j++)
            {
                  var match = false;
                  for (i = 0, iLoopTimes = record.action.length();i &lt; iLoopTimes;i++ )
                  {
                    if(record.action[i].actionMsgId != null &amp;&amp; record.action[i].actionMsgId!=undefined &amp;&amp; record.action[i].actionMsgId!="")
                    {
                      if(oldrecord.action[j].actionMsgId!=null &amp;&amp; oldrecord.action[j].actionMsgId!=undefined &amp;&amp; oldrecord.action[j].actionMsgId!="")
                      {
                        if ( record.action[i].actionMsgId == oldrecord.action[j].actionMsgId )
                        {
                              match = true;
                              break;
                        }
                      }
                    }    
                  }
                  
                  if ( match == false )
                  {
                        deleteFields.push( oldrecord.phaseName+"_"+oldrecord.workflowName+"_"+oldrecord.tableName+":"+oldrecord.action[j].actionMsgId );
                  }
            }
            
            
                  
            if ( deleteFields.length != 0 )
            {
                  var deleteAction = "delete";
                  lib.localizeTable.localizeList( deleteFields, null, language, msgclass, deleteAction )
            }
      }
}


function localizeForms( record, oldRecord )
{
	var i=0;
	var j=0;
	var undefined="undefined";
	
	if (  oldrecord.altForm != record.altForm )
	{
		var msgclass = "wfF";
		var actionType = "addonly";
		var ids = new Array();
		var labels = new Array();
		for (i = 0, iLoopTimes = record.altForm.length();i &lt; iLoopTimes;i++)
		{
		   if(record.altForm[i].altFormId!=null &amp;&amp; record.altForm[i].altFormId!=undefined &amp;&amp; record.altForm[i].altFormId!="")
		   {		   
			ids.push( record.phaseName+"_"+record.workflowName+"_"+record.tableName+":"+record.altForm[i].altFormId );
			labels.push( record.altForm[i].altFormDesc );
		   }	
		}
		
		var language;
		language = "en";
		if ( vars.$G_my_language != null )
		{
			language = vars.$G_my_language;
		}
		
		lib.localizeTable.localizeList( ids, labels, language, msgclass, actionType )
		
		var deleteFields = new Array();
		
		for (j = 0, jLoopTimes = oldrecord.altForm.length();j &lt; jLoopTimes;j++)
		{
			var match = false;
			for (i = 0, iLoopTimes = record.altForm.length();i &lt; iLoopTimes;i++)
			{
			  if(record.altForm[i].altFormId!=null &amp;&amp; record.altForm[i].altFormId!=undefined &amp;&amp; record.altForm[i].altFormId!="")
			  {
			   if(oldrecord.altForm[j].altFormId!=null &amp;&amp; oldrecord.altForm[j].altFormId!=undefined &amp;&amp; oldrecord.altForm[j].altFormId!="")
			   {   
				if ( record.altForm[i].altFormId == oldrecord.altForm[j].altFormId )
				{
					match = true;
				}
			   }
			  }   	
			}
			
			if ( match == false )
			{
				deleteFields.push( oldrecord.altForm[j].altFormId );
			}
		}
	
		if ( deleteFields != null )
		{
			var deleteAction = "delete";
			lib.localizeTable.localizeList( deleteFields, null, language, msgclass, deleteAction )
		}
                                          	
                                          //check which message needs to be updated
		var updateIds = new Array();
		var updateLabels = new Array();
		
		for (j = 0, jLoopTimes = oldrecord.altForm.length();j &lt; jLoopTimes;j++)
		{
			for (i = 0, iLoopTimes = record.altForm.length();i &lt; iLoopTimes;i++)
			{
			
			  if(record.altForm[i].altFormId!=null &amp;&amp; record.altForm[i].altFormId!=undefined &amp;&amp; record.altForm[i].altFormId!="")
			  {
			   if(oldrecord.altForm[j].altFormId!=null &amp;&amp; oldrecord.altForm[j].altFormId!=undefined &amp;&amp; oldrecord.altForm[j].altFormId!="")
			   { 
				if ( record.altForm[i].altFormId == oldrecord.altForm[j].altFormId )
				{
					if (record.altForm[i].altFormDesc != oldrecord.altForm[j].altFormDesc)
					{
						updateIds.push(record.phaseName+"_"+record.workflowName+"_"+record.tableName+":"+record.altForm[i].altFormId);
						updateLabels.push(record.altForm[i].altFormDesc)
					}	
				}
			   }
		      }  		
			}
						
		}
	
		if ( updateIds != null )
		{
			var updateAction = "update";
			lib.localizeTable.localizeList( updateIds, updateLabels, language, msgclass, updateAction )
		}
	}
}

function setLocalTransitionMsg( msgclass, id, message )
{
	var language = "en";
	if ( vars.$G_my_language != null )
	{
		language = vars.$G_my_language;
	}
	
	if ( message != null &amp;&amp; msgclass != null )
	{
		var msg = new SCFile( "scmessage" );
		var sql = "syslanguage=\""+language+"\" and class=\""+ msgclass +"\" and message.id=\""+ id +"\"";
		if ( msg.doSelect(sql) == RC_SUCCESS )
		{
			msg.message = message;
			msg.doUpdate();
			return true;
		}	
	}
	return false;
}

function getEngTransitionMsg( msgclass, id )
{
	var message;
	var msg = new SCFile( "scmessage" );
		var sql = "syslanguage=\"en\" and class=\""+ msgclass +"\" and message.id=\""+ id +"\"";
		if ( msg.doSelect(sql) == RC_SUCCESS )
		{
			message = msg.message ;
		}
	return message;
	
}

function setMessageIds( phase )
{  
	var mtArray = new Array();
	var i=0;
	for ( i = 0, iLoopTimes = phase.manualTransition.length();i &lt; iLoopTimes;i++)
	{
		if ( phase.manualTransition[i].mtId != null )
		{
			mtArray = system.functions.insert( mtArray, 0, 1, phase.manualTransition[i].mtId );
		}
	}
	
	for ( i = 0, iLoopTimes = phase.manualTransition.length();i &lt; iLoopTimes;i++ )
	{
		if ( (phase.manualTransition[i].mtId == -999 || phase.manualTransition[i].mtId == null) &amp;&amp; phase.manualTransition[i].mtOptionName != null )
		{   		
			phase.manualTransition[i].mtId = getNextOpenId( mtArray );
			mtArray = system.functions.insert( mtArray, 0, 1, phase.manualTransition[i].mtId );
		}
	}
	
	var actionArray = new Array();
	for (i = 0, iLoopTimes = phase.action.length();i &lt; iLoopTimes;i++)
	{
		if ( phase.action[i].actionMsgId != null  )
		{
			actionArray = system.functions.insert( actionArray, 0, 1, phase.action[i].actionMsgId );
		}
	}
	for (i = 0, iLoopTimes = phase.action.length();i &lt; iLoopTimes;i++)
	{
		if ( (phase.action[i].actionMsgId == -999 || phase.action[i].actionMsgId == null) &amp;&amp; phase.action[i].actionId != null)
		{
			phase.action[i].actionMsgId = getNextOpenId( actionArray );
			actionArray = system.functions.insert( actionArray, 0, 1, phase.action[i].actionMsgId );
		}
	}
	
	var formArray = new Array();
	for ( i = 0, iLoopTimes = phase.altForm.length();i &lt; iLoopTimes;i++ )
	{
		if ( phase.altForm[i].altFormId != null )
		{
			formArray = system.functions.insert( formArray, 0, 1, phase.altForm[i].altFormId );
		}
	}
	for ( i = 0, iLoopTimes = phase.altForm.length();i &lt; iLoopTimes;i++ )
	{
		if ( (phase.altForm[i].altFormId == -999 || phase.altForm[i].altFormId == null ) &amp;&amp; phase.altForm[i].altFormName != null )
		{
			phase.altForm[i].altFormId = getNextOpenId( formArray );
			formArray = system.functions.insert( formArray, 0, 1, phase.altForm[i].altFormId );
		}
	}
	
}

function getNextOpenId( array )
{
	for ( var i = 1; i &lt; 30; i ++ )
	{	
		if ( system.functions.index( i, array ) == 0 )
		{
			return i;
		}
	}
}


/**
* translate xml strings to SM conditions
*/
function populateWorkflowConditions(record, oldRecord)
{
	
	//convert condition for action
	var action = record.action;
	if (action != null)
	{
		for (var i = 0, iLoopTimes = record.action.length();i &lt; iLoopTimes;++i)
		{
		    record.action[i].actionCondition = null;
			if (record.action[i].actionCondXML != null)
			{
				var result = lib.conditionXmlParser.getRadQueryFromCondtionXml(record.action[i].actionCondXML);																							 
				record.action[i].actionCondition = convertResult(result[0]);
			}	
			//populate option number
			if ( record.action[i].actionOption == -999 &amp;&amp; record.action[i].actionLoc != null)
			{
				record.action[i].actionOption = lib.Workflow.getOptionNumber( record, record.manualTransition[i].mtOptionLoc );	
			}
		}
	}
	
	//convert condition for backend transition
	var bt = record.backendTransition;
	if (bt != null)
	{
		for (var i = 0, iLoopTimes = record.backendTransition.length();i &lt; iLoopTimes;++i)
		{
			record.backendTransition[i].btCondition = null;
			if (record.backendTransition[i].btCondXML != null) 
			{
				var result = lib.conditionXmlParser.getRadQueryFromCondtionXml(record.backendTransition[i].btCondXML);
				record.backendTransition[i].btCondition = convertResult(result[0]);			
			}	
		}
	}	
   
}

/**
* translate xml strings to SM conditions
*/
function populateWorkflowPhaseConditions(record, oldRecord)
{
	//convert condition for manual transition
	var mt = record.manualTransition;
	if (mt != null)
	{
		for (var i = 0, iLoopTimes = record.manualTransition.length();i &lt; iLoopTimes;++i)
		{   
			record.manualTransition[i].mtCondition = null;
			if (record.manualTransition[i].mtCondXML !=  null)	
			{		
				var result =  lib.conditionXmlParser.getRadQueryFromCondtionXml(record.manualTransition[i].mtCondXML);
				record.manualTransition[i].mtCondition = convertResult(result[0]);				
			}
			//populate option number
			if ( record.manualTransition[i].mtOption == -999 &amp;&amp; record.manualTransition[i].mtOptionLoc != null)
			{
				record.manualTransition[i].mtOption = lib.Workflow.getOptionNumber( record, record.manualTransition[i].mtOptionLoc );	
			}
		}	
	}
	
	//convert condition for default transition
	var at = record.autoTransition;
	if (at != null)
	{
		for (var i = 0, iLoopTimes = record.autoTransition.length();i &lt; iLoopTimes;++i)
		{
		    record.autoTransition[i].atCondition  = null;
			if (record.autoTransition[i].atCondXML != null) 
			{
				var result = lib.conditionXmlParser.getRadQueryFromCondtionXml(record.autoTransition[i].atCondXML);
				record.autoTransition[i].atCondition = convertResult(result[0]);			
			}	
		}
	}	
	
	//convert condition for action
	var action = record.action;
	if (action != null)
	{
		for (var i = 0, iLoopTimes = record.action.length();i &lt; iLoopTimes;++i)
		{   
			record.action[i].actionCondition = null;
			if (record.action[i].actionCondXML != null)
			{
				var result = lib.conditionXmlParser.getRadQueryFromCondtionXml(record.action[i].actionCondXML);																							 
				record.action[i].actionCondition = convertResult(result[0]);
			}	
			//populate option number
			if ( record.action[i].actionOption == -999 &amp;&amp; record.action[i].actionLoc != null)
			{
				record.action[i].actionOption = lib.Workflow.getOptionNumber( record, record.manualTransition[i].mtOptionLoc );	
			}
		}
	}
	
	//convert approval recal and reset condition	
	record.approvalsRecalc =null;
	if ( record.approvalsRecalcXML != null)
	{
		var result = lib.conditionXmlParser.getRadQueryFromCondtionXml(record.approvalsRecalcXML);
		record.approvalsRecalc = convertResult(result[0]);	
			
	}	
	record.approvalsReset =null;	
	if ( record.approvalsResetXML != null)
	{
		var result = lib.conditionXmlParser.getRadQueryFromCondtionXml(record.approvalsResetXML);	
		record.approvalsReset = convertResult(result[0]);		
	}	
		
	//convert alert recal and reset condition	
	record.alertsRecalc =null;	
	if ( record.alertsRecalcXML != null)
	{
		var result = lib.conditionXmlParser.getRadQueryFromCondtionXml(record.alertsRecalcXML);
		record.alertsRecalc = convertResult(result[0]);	
	}	
	record.alertsReset =null;	
	if ( record.alertsResetXML != null)
	{
		var result = lib.conditionXmlParser.getRadQueryFromCondtionXml(record.alertsResetXML);	
		record.alertsReset = convertResult(result[0]);		
	}	
		
	//convert the edit condition
	record.updateCond =null;	
	if ( record.updateCondXML != null)
	{
		var result = lib.conditionXmlParser.getRadQueryFromCondtionXml(record.updateCondXML);	
		record.updateCond = convertResult(result[0]);	
		
	}
                 
    //convert the additional forms condition
    var af = record.altForm;
	if (af != null)
	{
		for (var i = 0, iLoopTimes = record.altForm.length();i &lt; iLoopTimes;++i)
		{	
			record.altForm[i].altFormCondition=null;
			if (record.altForm[i].altFormCondXML != null) 
			{
				var result = lib.conditionXmlParser.getRadQueryFromCondtionXml(record.altForm[i].altFormCondXML);
				record.altForm[i].altFormCondition = convertResult(result[0]);			
			}	
		}
	}	                  
  
   
}

/**
* This function is called to convert the result type to operator. Exceptions are true and false values
*/



function convertResult(res)
{

 vars.$x = system.functions.rtecall("log",vars.$y,res);


  if(system.functions.str(res).split(' ').join('') == "(true)")
    return system.functions.val("true",4);

  if(system.functions.str(res).split(' ').join('') == "(false)")
    return system.functions.val("false",4);

  return system.functions.val(res,10);  

}




/**
* This function syncs up workflow phase with phase record defined in Object record
*/
function syncPhase(record, oldrecord,action)
{
	//see if there is any phase record defined on object record
	var obj = new SCFile("Object");
	var sql= "file.name=\""+record.tableName+"\"";
	if ( obj.doSelect(sql) == RC_SUCCESS )
	{

		if (obj.phase_file_name == null || system.functions._null(obj.phase_file_name))
			return;
		if (action == "add")
		{
			processAddPhase(record,obj.phase_file_name);
		}
		else if (action == "update")
		{
			processAddPhase(record,obj.phase_file_name);
		}
		else if (action == "delete")
		{
			processDeletePhase(record,obj.phase_file_name);
		}	
	}
}

function processAddPhase(record, phaseFileName)
{
	//first, see if the phase exist	
	var phase = new SCFile(phaseFileName);
	var sql= "name=\""+record.phaseName+"\"";
	if ( phase.doSelect(sql) == RC_SUCCESS )
	{
		return; //if already exist, do nothing
	}	
	else
	{
		phase.name = record.phaseName;
		var rc = phase.doInsert();
	}		
}

function processDeletePhase(record, phaseFileName)
{
	//see if any other workflow phase record with this phase name exist
	var wfPhase = new SCFile("WorkflowPhase");
	var sql= "phaseName=\""+record.phaseName+"\"";
	if ( wfPhase.doSelect(sql) == RC_SUCCESS )
	{
		return; //if other wfphase exists, do nothing
	}	
	else
	{
		var phase =  new SCFile(phaseFileName);
		var sql= "name=\""+record.phaseName+"\"";
		if ( phase.doSelect(sql) == RC_SUCCESS )
		{
			phase.doDelete();
		}	
	}		
}
/**
*  strip invalid tag to avoid xss attack for description 
*/
function workflowDescriptionHandling(record){

	//strip invalid tag to avoid xss attack
	if(record["description"]!=null &amp;&amp; record["description"]!="" ){
	
		record["description"]=lib.XSSUtil.strip_tags(record["description"]);
	
	}


}
/**
*  strip invalid tag to avoid xss attack for description , manual transition and auto transition
*/
function workflowPhaseDescriptionHandling(record){

	if(record["detailedDescription"]!=null &amp;&amp; record["detailedDescription"]!="" ){
	
		record["detailedDescription"]=lib.XSSUtil.strip_tags(record["detailedDescription"]);
	
	}
	
	if(record['manualTransition'] !=null &amp;&amp; system.functions.lng(record['manualTransition'])&gt;0){
	
		for(var i=0 ;i&lt; system.functions.lng(record['manualTransition']); i++){
		   if(record['manualTransition'][i]['mtDescription']!=null &amp;&amp; record['manualTransition'][i]['mtDescription']!="" ){
		
		  	 record['manualTransition'][i]['mtDescription']=lib.XSSUtil.strip_tags(record['manualTransition'][i]['mtDescription']);
		   
		   }
		
		}
	
	}
	
	if(record['autoTransition'] !=null &amp;&amp; system.functions.lng(record['autoTransition'])&gt;0){
	
		for(var i=0 ;i&lt; system.functions.lng(record['autoTransition']) ; i++){
		   if(record['autoTransition'][i]['atDescription']!=null &amp;&amp; record['autoTransition'][i]['atDescription']!="" ){
		
		  	  record['autoTransition'][i]['atDescription']=lib.XSSUtil.strip_tags(record['autoTransition'][i]['atDescription']);
		   
		   }
		
	     }

      }


}
</script>
    <package type="string">BaseUtilities</package>
    <sysmodtime type="dateTime">07/16/17 17:01:45</sysmodtime>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodcount type="decimal">0</sysmodcount>
    <prgnsystem NullValue="1" type="boolean"/>
    <sysrestricted type="boolean">true</sysrestricted>
  </record>
</recordset>
