<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="ScriptLibrary">
  <record id="name=&quot;IDOLQueryBuilder&quot;" recordid="IDOLQueryBuilder">
    <name type="string">IDOLQueryBuilder</name>
    <script type="string">var _ = lib.Underscore.require(),
    IDOLConfigure = lib.IDOLConfigure.require(),
    IDOLQueryEvaluator = lib.IDOLQueryEvaluator.require(),
    IDOLMandant = lib.IDOLMandant.require(),
    IDOLSecurity = lib.IDOLSecurity.require();

var logger = getLog('IDOLQueryBuilder');

var IDOLQueryBuilder = (function() {
  function formatIDOLDate(value) {
    if (!value) { return ''; }
    var date = funcs.val(value, 3);
    return date ? [funcs.day(date), funcs.month(date), funcs.year(date)].join('/') : '';
  }

  function buildFieldTextQuery(record, customQuery, fallback) {
    // convert sm query into idol query
    var criteria = IDOLSecurity.buildSQLQuery(record),
        sql = _.compact([criteria, customQuery]).join(' and '),
        ast = parseQuery(sql);

    var query = IDOLQueryEvaluator.convertToIDOLQuery(ast, fallback);

    logger.debug('convert sql "' + sql + '" to "' + query + '"');
    return { 'fieldtext' : query };
  }

  function buildCompanyNames(database, company) {
    var companies = IDOLMandant.buildCompanyNames();
    if (_.isEmpty(companies)) {
      // scmsg: Cannot get any valid company("company" should be configured in scmandant). abort ...
      throw new Error(funcs.scmsg(1000, 'idol'));
    }
    
    var names = _.pluck(companies, 'name');
    if (company) {
      // check valid company
      if (_.indexOf(names, company) === -1) {
        throw new Error(funcs.scmsg(1001, 'idol', [company]));
      }
      return IDOLMandant.buildDatabaseName(database, company);      
    }
    return _.map(names, function(company) {
      return IDOLMandant.buildDatabaseName(database, company);
    }).join(',');
  }

  function buildDatabaseMatchQuery(record) {
    var filename = funcs.filename(record),
        config = IDOLConfigure.getTopicmapConfig(filename),
        name = IDOLMandant.getMandantField(filename);

    var database = config.database;
    if (IDOLConfigure.isMultiCompany(filename)) {
      database = buildCompanyNames(database, record[name]);
    }
    return { 'databasematch' : database };
  }

  function buildTimeRangeQuery(from, to) {
    var min = formatIDOLDate(from),
        max = formatIDOLDate(to);
    return { 'mindate' : min, 'maxdate' : max };
  }

  function buildIDOLQueryCriteria(keyword, record, range, customQuery, fallback) {
    var filename = funcs.filename(record),
        fieldtext = buildFieldTextQuery(record, customQuery, fallback),
        databasematch = buildDatabaseMatchQuery(record),
        timerange = buildTimeRangeQuery.apply(null, (range || []));
    var conditions = _.extend({ text : keyword }, databasematch, fieldtext, timerange);
    var criteria = {};
    _.each(conditions, function(value, key) {
      if (value || _.isBoolean(value)) {
        criteria[key] = value;
      }
    });
    return criteria;
  }

  function buildIDOLQueryCriteriaWithSQL(filename, sql, keyword) {
    var config = IDOLConfigure.getTopicmapConfig(filename),
        database = config.database;
    if (IDOLConfigure.isMultiCompany(filename)) {
      database = buildCompanyNames(database); // choose all accessible company
    }

    var ast = parseQuery(sql);
    var query = IDOLQueryEvaluator.convertToIDOLQuery(ast);
    return _.extend({ text: keyword }, { fieldtext: query }, { databasematch: database});
  }

  function createFallbackHandler() {
    var counter = 0, errors = [];

    function fallbackHandler(ast, error) {
      counter++;
      errors.push(error);
      return "";
    }

    return {
      handler : fallbackHandler,
      hasError : function() { return errors.length &gt; 0; },
      getErrors : function() { return errors; }
    };
  }

  return {
    buildCriteria : buildIDOLQueryCriteria,
    buildCriteriaViaSQL : buildIDOLQueryCriteriaWithSQL,
    createFallbackHandler : createFallbackHandler
  };
})();

function require() {
  return IDOLQueryBuilder;
}</script>
    <package type="string">IDOL</package>
    <sysmodtime type="dateTime">07/16/17 17:01:40</sysmodtime>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodcount type="decimal">0</sysmodcount>
    <prgnsystem NullValue="1" type="boolean"/>
    <sysrestricted NullValue="1" type="boolean"/>
  </record>
</recordset>
