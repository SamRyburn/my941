<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="ScriptLibrary">
  <record id="name=&quot;IDOL_SMIS&quot;" recordid="IDOL_SMIS">
    <name type="string">IDOL_SMIS</name>
    <script type="string">function getSMISTemplateName(type) {
	if (type === 'OCR') {
		return 'SMIDOLOCR';
	} else if (type === 'IDOL') {
		return 'SMIDOL';
	} else if (type === 'AutoFill') {
		return 'SMIDOLAutoFill';
	}
}


/**
*	Create an SMIS Instance if SMIS Instance doesn't exist
*
*	Returun - SMIS Instance id
*	Type - number
**/
function createSMISInstance(from, type) {
	var smis = getSMISInstance(type);
	var intIds = [];
	var enable;
	if (from === 'UI') {
		enable = true;
	}

	if (!enable &amp;&amp; (!smis || smis.status === lib.smis_Constants.INSTANCE_STATUS_DISABLE())) {
		idolserverinfo = lib.IDOL_Utilities.getIDOLServerConfig();
		if (type === 'OCR' &amp;&amp; idolserverinfo['image.enable']) {
			enable = true;
		} else if (type === 'IDOL' &amp;&amp; idolserverinfo['enable']) {
			enable = true;
		} else if (type === 'AutoFill' &amp;&amp; idolserverinfo['enable']) {
			enable = true;
		}
	}

	if (!smis) {
		if (enable) {
			var instanceCount = 1;
			var intId = [];
			var smisTemplateName = getSMISTemplateName(type);
			if (type === 'OCR') {
				try {
					instanceCount = lib.IDOL_Utilities.getOCRThreadNumber(from);
				} catch (ex) {
					funcs.msg(funcs.scmsg('72','idol'),3);
					instanceCount = 1;
				}
			} else if (type === 'AutoFill') {
				//start up SMIDOLAutoFill template
				try {
					instanceCount = lib.IDOL_Utilities.getIDOLThreadNumber(from, 'IDOL');
				} catch (ex) {
					funcs.msg(funcs.scmsg('72','idol'),3);
					instanceCount = 1;
				}
			}
			for (var i = 0; i &lt; instanceCount; i++) {
				var builder = new (lib.smis_InstanceBuilder.getClass())();
				var smisInfo = {runOnStartup: true, intervalTime: 30};
				smisInfo.name = smisTemplateName + i
    			var smisIntId = builder.buildFromTemplate(smisTemplateName, true).buildGeneralInfo(smisInfo).add();
    			lib.smis_ConfigurationManager.enableInstance(smisIntId);
    			intIds.push(smisIntId);
			}
			return intIds;
    	}
	} else if(smis.status === lib.smis_Constants.INSTANCE_STATUS_DISABLE()) {
		if (enable) {
			do {
				var smisIntId = smis.intId;
				lib.smis_ConfigurationManager.enableInstance(smisIntId);
				rc = smis.getNext();
				intIds.push(smisIntId);
				
				//enable SMIS instance for autofill
				var instanceCount = 1;
				
			} while (rc === RC_SUCCESS);
			return intIds;
		}
	}
	
	if (smis) {
		do {
			var smisIntId = smis.intId;
			rc = smis.getNext();
			intIds.push(smisIntId);
		} while (rc === RC_SUCCESS);
		return intIds;
	}
	return null;
}


/**
*	Delete the SMIS Instance
*
**/
function removeSMISInstance(type) {
	var smis = getSMISInstance(type);
	if (smis) {
		do {
			var smisIntId = smis.intId;
			lib.smis_ConfigurationManager.disableInstance(smisIntId, true);
			lib.smis_ConfigurationManager.deleteInstanceConfig(smisIntId, true);
			var rc = smis.getNext();
		} while (rc === RC_SUCCESS);
	}
}


/**
*	Retrieve the SMIS Instance id of IDOL
*
*	Returun - SMIS Instance id
*	Type - number
**/
function getSMISInstance(type){
	if (!type) type = 'IDOL';
	var smisInstance = new SCFile('SMISConfiguration', SCFILE_READONLY);
	smisInstance.setFields(['intId', 'status']);

	var result = smisInstance.doSelect('template = "' + getSMISTemplateName(type) + '"');
	if (result === RC_SUCCESS) {
		return smisInstance;
	}
	
	return null;
}

/**
*	Add an ocr task to SMIS
*
*	@param {interaction} - scfile of interaction
**/
function addOCRTask(interaction, ocrType, company, targetField, targetFileKeyField) {
	var smisIntId = createSMISInstance('BG', ocrType);
	if (smisIntId) {
		var strIntId = '{';
		for (var i = 0; i &lt; smisIntId.length; i++) {
			strIntId += smisIntId[i];
			if (i &lt; smisIntId.length - 1) {
				strIntId += ',';
			}
		}
		strIntId += '}';

		var smisTask = new SCFile('SMISTaskQueue');
		var rc = smisTask.doSelect('select intId, count(id) from SMISTaskQueue where intId isin ' + strIntId + ' group by intId');
		var minCount = 0;
		var minIntId;
		var taskIntIds = [];
		var index = 0;
		while (rc === RC_SUCCESS) {
			var intId = smisTask[0];
			var count = smisTask[1];
			taskIntIds.push(intId);
			if (index === 0) {
				minCount = count;
				minIntId = intId;
			} else {
				if (minCount &gt; count) {
					minCount = count;
					minIntId = intId;
				}
			}
			rc = smisTask.getNext();
			index ++;
		}

		var strTaskIntIds = taskIntIds.toString();
		if (index &lt; smisIntId.length) {
			for (var i = 0; i &lt; smisIntId.length; i++) {
				if (strTaskIntIds.indexOf(smisIntId[i]) &lt; 0){
					minIntId = smisIntId[i];
					break;
				}
			}
		}

	  	if (targetFileKeyField!=null &amp;&amp; targetFileKeyField!="" &amp;&amp; targetFileKeyField != undefined) {
	  	} else {
			targetFileKeyField = "incident.id";
		}

		var task = new (lib.smis_Task.getClass())(minIntId);
		var configItem = lib.smis_ConfigurationManager.getInstanceConfig(minIntId);
		task.integrationName = configItem.name;
	  	task.intId = minIntId;
	  	var language = lib.IDOL_Utilities.detectLanguage(interaction);
	  	task.inRecord = [{value: interaction[targetFileKeyField], type: 'String'}, {value: language, type: 'Array'}];

	  	if (company!=null &amp;&amp; company!="" &amp;&amp; company != undefined) {
			task.inRecord.push({value: company, type: 'String'});
	  	} else {
			task.inRecord.push({value: "", type: 'String'});
	  	}
	  	if (targetField!=null &amp;&amp; targetField!="" &amp;&amp; targetField != undefined) {
			task.inRecord.push({value: targetField, type: 'String'});
	  	} else {
			task.inRecord.push({value: "", type: 'String'});
		}
		task.inRecord.push({value: targetFileKeyField, type: 'String'});
		task.inRecord.push({value: system.functions.filename(interaction), type: 'String'});

	  	task.direction = lib.smis_Constants.MAPPING_DIRECTION_LEFTRIGHT();
	  	task.object = system.functions.filename(interaction);
	  	task.internalId = interaction[targetFileKeyField];

	  	if (ocrType === 'OCR') {
	  		task.action = 'ocr';
	  	} else if (ocrType === 'AutoFill') {
	  		task.action = 'autofill';
	  	}
	  	return lib.smis_TaskManager.pushTask(task);
	}
  	return null;
}

/**
*	Add an idol task to SMIS
*
*	@param {action} - action of the task
*	@param {id} - internalId of the task
*	@param {filename} - object of the task
*	@param {parameters} - inrecord of the task. The inrecord is parameter of the corresponding js function.
**/
function addIDOLTask(action, id, filename, parameters) {
	var smisIntId = createSMISInstance('BG', 'IDOL')[0];
	if (smisIntId) {
		var task = new (lib.smis_Task.getClass())(smisIntId);
		var configItem = lib.smis_ConfigurationManager.getInstanceConfig(smisIntId);
		task.integrationName = configItem.name;
	  	task.intId = smisIntId;
	  	task.inRecord = parameters
	  	task.direction = lib.smis_Constants.MAPPING_DIRECTION_LEFTRIGHT();
	  	task.object = filename;
	  	task.internalId = id + '';
	  	task.action = action;
	  	return lib.smis_TaskManager.pushTask(task);
  	}
  	return null;
}

/**
*	Wrapper to call idol training method
*
*	@param {adapterId} - adapter id
*	@param {company} - string of company list "company1,company2,..."
**/
function doTraining(adapterId, company){
	var msg = lib.acicategory.createAndTrainingOneCategoryGroup(adapterId, company);
	var exception = lib.IDOLCategoryException.getLastTrainingException();
	if (exception) {
		throw exception;
	}
	return msg;
}


/**
*	Wrapper to call idol testing method
*
*	@param {adapterId} - adapter id
*	@param {company} - string of company list "company1,company2,..."
**/
function doTesting(adapterId, company){
	var msg = lib.acicategory.testOneCategoryGroup(adapterId, company);
	var exception = lib.IDOLCategoryException.getLastTestException();
	if (exception) {
		throw exception;
	}
	return msg;
}


/**
*	Wrapper to call idol tuning method
*
*	@param {adapterId} - adapter id
**/
function doTuning(adapterId){
	var msg = lib.IDOLCategoryTuning.tuningCategory(adapterId);
	var exception = lib.IDOLCategoryException.getLastTuningException();
	if (exception) {
		throw exception;
	}
	return msg;
}


/**
*	Wrapper to call idol rule base method
*
*	@param {adapterId} - adapter id
*	@param {company} - string of company list "company1,company2,..."
**/
function doRuleBase(id,oldrulses){
	var msg = lib.IDOLCategoryRuleBase.addRuleBase(id,oldrulses);
	var exception = lib.IDOLCategoryException.getLastRuleBaseException();
	if (exception) {
		throw exception;
	}
	return msg;
}


/**
*	Wrapper to call idol auto fill method
*
**/
function doAutoFill(interactionId, language, company){
	var interaction = new SCFile('incidents');
	interaction.doSelect('incident.id = "' + interactionId + '"');
	lib.IDOL_Utilities.fillIncidentsByIdol(interaction, 3, company, true);
	var ex = lib.IDOLCategoryException.getLastSuggestException();
	if (ex) {
		throw ex;
	}
	
	var ess = vars['$G.ess'];
	vars['$G.ess'] = true;
	
	//for steamlined interaction which needs auto-trigger.
	vars['$post.open.fulfillment.record'] = true;
	
	var bypassValidation = vars['$bypass.failed.validation'];
	vars['$bypass.failed.validation'] = true;
	
	var bypassAuthcheck = vars['$bypass.bg.authcheck'];
	vars['$bypass.bg.authcheck'] = true;
	
	var rc = interaction.doAction("save");
	
	vars['$bypass.failed.validation'] = bypassValidation;
	vars['$bypass.bg.authcheck'] = bypassAuthcheck;
	vars['$G.ess'] = ess;
	
	if(rc != RC_SUCCESS) throw rc;

	return null;
}


/**
*	Retrieve task id list by smis intId, task internaId and actions
*
*	@param {smisIntId} - smis intId
*	@param {internalId} - task internalId
*	@param {actions} - task action array
*	Returun - SMIS task id list
*	Type - Array
**/
function getTaskIds(smisIntId, internalId, actions){
	var taskIds = [];
	var smisTasks = new SCFile('SMISTaskQueue', SCFILE_READONLY);
	smisTasks.setFields(['id']);
	var actionStr = '';
	for (var i = 0; i &lt; actions.length; i++) {
		actionStr += '"' + actions[i] + '"';
		if (i &lt; actions.length - 1) {
			actionStr += ',';
		}
	}
	var query = 'intId="' + smisIntId + '" and internalId="' + internalId + '" and action isin {' + actionStr + '}';
	var rc = smisTasks.doSelect(query);
	while (rc === RC_SUCCESS) {
		taskIds.push(smisTasks.id);
		rc = smisTasks.getNext();
	}
	return taskIds;
}


/**
*	Retrieve task log id list by smis intId, task internaId and actions
*
*	@param {smisIntId} - smis intId
*	@param {internalId} - task internalId
*	@param {actions} - task action array
*	Returun - SMIS task id list
*	Type - Array
**/
function getTaskLogId(type, internalId, actions, status){
	var taskLogIds = [];
	
	var smis = getSMISInstance(type);
	if (!smis) return taskLogIds;
	var smisIntId = smis.intId;

	var smisTaskLog = new SCFile('SMISTaskLog', SCFILE_READONLY);
	smisTaskLog.setFields(['id']);
	var actionStr = '';
	var actionStr = '';
	for (var i = 0; i &lt; actions.length; i++) {
		actionStr += '"' + actions[i] + '"';
		if (i &lt; actions.length - 1) {
			actionStr += ',';
		}
	}
	
	var query = 'intId="' + smisIntId + '" and internal.id="' + internalId + '" and action isin {' + actionStr + '} and status="' + status + '"';
	
	var rc = smisTaskLog.doSelect(query);
	while (rc === RC_SUCCESS) {
		taskLogIds.push(smisTaskLog.id);
		rc = smisTaskLog.getNext();
	}
	return taskLogIds;
}

/**
*	Cancel/stop smis tasks
*	If the tasks are not running, remove it from queue.
*	If the task is running, call add function to stop it and remove it.
*
*	@param {internalId} - task internalId
*	@param {actions} - task action array
**/
function cancelSMISTask(internalId, actions){
	var smis = getSMISInstance();
	if (!smis) return;
	var smisIntId = smis.intId;
	var taskIds = getTaskIds(smisIntId, internalId, actions);

	lib.smis_ConfigurationManager.getInstanceConfig(smisIntId);
	for (var i = 0; i &lt; taskIds.length; i++) {
		var taskObj = lib.smis_TaskManager.readTask(smisIntId, taskIds[i]);
		// if this task is not running, remove the task directly
		if (taskObj.status !== lib.smis_Constants.TASK_STATUS_RUNNING() &amp;&amp; !taskObj.expired){
			lib.smis_TaskManager.removeTask(taskObj);
		} 
		// if the task is running, stop the training, testing, index process and then remove the task
		else if (taskObj.status === lib.smis_Constants.TASK_STATUS_RUNNING()){
			if (taskObj.action === 'training' || taskObj.action === 'tuning') {
				lib.acicategory.stopTrainingTask();
				// clean all trained data if stop training task
				if (taskObj.action === 'training') {
					var adapterId = taskObj.inRecord[0].value;
					var idoladapter = new SCFile('idoladapter');
					var rc = idoladapter.doSelect('adapter.id="' + adapterId + '"');
					if (rc === RC_SUCCESS) {
						var companies = '';
						if (taskObj.inRecord[1]) {
							companies = taskObj.inRecord[1].value.split(',');
							for (var i = 0; i &lt; companies.length; i++) {
								lib.acicategory.removeTrainingData(idoladapter, companies[i]);
							}
						}else {
							lib.acicategory.removeTrainingData(idoladapter);
						}
					}
				}
			} else if (taskObj.action === 'testing') {
				lib.acicategory.stopTestTask();
			}
			lib.smis_TaskManager.removeTask(taskObj);
		}
	}
}


/**
*	This function is to check if the same idol action has already in the smis task queue
*
*	@param {internalId} - task internalId
*	@param {action} - task action
*	Returun - The same task with same internalid is already in the smis task or not
*	Type - boolean
**/
function hasAvailableTask(internalId, action){
	var smis = getSMISInstance();
	if (!smis) return false;
	
	var smisIntId = smis.intId;
	var smisTask = new SCFile('SMISTaskQueue', SCFILE_READONLY);
	var query = 'intId="' + smisIntId + '" and internalId="' + internalId + '" and action="' + action + '" and expired=false';

	var count = smisTask.doCount(query);
	return count &gt; 0;
}</script>
    <package type="string">IDOL</package>
    <sysmodtime type="dateTime">07/16/17 17:01:39</sysmodtime>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodcount type="decimal">0</sysmodcount>
    <prgnsystem NullValue="1" type="boolean"/>
    <sysrestricted type="boolean">true</sysrestricted>
  </record>
</recordset>
