<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="ScriptLibrary">
  <record id="name=&quot;IDOLKMIndexService&quot;" recordid="IDOLKMIndexService">
    <name type="string">IDOLKMIndexService</name>
    <script type="string">/**
 *	IDOL Index Utilities for KM
 *
 *	Author Yang,Chun-Fu
 *
 */

var _ = lib.Underscore.require(),
    IDOLHTTPChannel = lib.IDOLHTTPChannel.require(),
    IDOLDistributeManagement = lib.IDOLDistributeManagement.require(),
    IDOLServiceQuery = lib.IDOLKMSearchService.require(),
    IDOLURLParser = lib.IDOLURLParser.require(),
    XQuery = lib.XQuery.require();
    logger = getLog('IDOLKMIndexService');

var IDOLKMIndex = function(){

    function createIndexDB( indexDbName )
    {
        var glsIndexUrl = lib.IDOLConfigure.require().getGSIndexUrl();
        var glsURL = glsIndexUrl+"DRECREATEDBASE?DREDbName="+indexDbName+"&amp;Internal=false&amp;ReadOnly=false",
            result = lib.jsaci.sendRequestToIDOL(glsURL, "");
        if(result == null) {
            logger.error("get result timeout for createIndexDb");
            return -1;
        }
        return RC_SUCCESS;

    }

    function mappingVDB(indexDbName){
        var vdbAction = IDOLDistributeManagement.VDBAdd();

        if ( IDOLDistributeManagement.isVDBExist( indexDbName )){
            vdbAction = IDOLDistributeManagement.VDBUpdate();
        }

        var result = IDOLDistributeManagement.manageVDB( vdbAction,indexDbName, IDOLDistributeManagement.GLSEngine());

        if( result == -1) {
            logger.error("Failed to add VDB");
            return -1;
        }

        result = IDOLDistributeManagement.setDBPrivilege( indexDbName );

        return result;
    }

    function deleteIndexDB(indexDbName){
        var glsIndexUrl = lib.IDOLConfigure.require().getGSIndexUrl();
        var idolUrl = glsIndexUrl+'DREDELDBASE';
        var result =  IDOLHTTPChannel.doGet(idolUrl,{
            DREDbName:indexDbName
        });

        return  _.trim(result.split('=')[1]) &gt;0 ? 0 : -1;
    }

    function addDocument(indexDBName, strdata) {
        var glsIndexUrl = lib.IDOLConfigure.require().getGSIndexUrl();
        var strurl =glsIndexUrl+"DREADDDATA?DREDBNAME="+indexDBName+"&amp;CreateDatabase=TRUE";

        var result =  lib.jsaci.sendRequestToIDOL(strurl,strdata);
        if(result == null) {
            logger.error("get result timeout for index data");
            return -1;
        }
        return 0;
    }

    function flushIndexData() {
        var glsIndexUrl = lib.IDOLConfigure.require().getGSIndexUrl();
        var strurl = glsIndexUrl+"DRESYNC";

        var result =  lib.jsaci.sendRequestToIDOL(strurl,"");
        if(result == null) {
            logger.error("get result timeout for flushIndexData");
        }

        return result;
    }

    function deleteDocument(indexDBName, sedocid) {
        var result = 0;
        var Refs = IDOLServiceQuery.getDocRefByDocID(indexDBName, sedocid);
        if (Refs &amp;&amp; Refs.length) {
            var glsIndexUrl = lib.IDOLConfigure.require().getGSIndexUrl();
            var contenturl = glsIndexUrl + 'DREDELETEREF?';
            //Specify the IDs of one or more documents.
            //To specify multiple document IDs, separate them with plus symbols (there must be no space before or after a plus symbol).
            contenturl += 'Docs=' + Refs.join('+')+'&amp;DREDbName='+indexDBName;

            try{
                rerult = lib.jsaci.runIDOLAction(contenturl, false);
                print(result);
            }
            catch(e) {
                print(e.message);
                logger.error(e.stack);
                return -1;
            }
        }

        return 0;
    }

    function deleteAttachment(params){
        var glsIndexUrl = lib.IDOLConfigure.require().getGSIndexUrl();
        var contenturl = glsIndexUrl + 'DREDELETEREF?';

        var idx = 0
        for (var obj in params) {
            if(idx == 0){
                contenturl += obj + '=' + params[obj];
            }else{
                contenturl += '&amp;' + obj + '=' + params[obj];
            }
            idx++;
        }

        try {
            lib.jsaci.runIDOLAction(contenturl, false);
            return 0;
        } catch (e) {
            print(e.message);
            logger.error(e.stack);
            return -1;
        }
    }

    function removeIndexDB(dbname){
        var glsIndexUrl = lib.IDOLConfigure.require().getGSIndexUrl();
        var strURL = glsIndexUrl+"DREREMOVEDBASE?DREDbName="+dbname;
        lib.jsaci.sendRequestToIDOL(strURL, "");
    }


    function renameIndexDB(dbname, newDBName){
        var glsIndexUrl = lib.IDOLConfigure.require().getGSIndexUrl();
        var strurl = glsIndexUrl+"DRERENAMEDBASE?DREDbName="+dbname+"&amp;NewName="+newDBName;
        lib.jsaci.sendRequestToIDOL(strurl, "");
    }

    function isDBExists(dbName){
        var idolUrl = lib.IDOLConfigure.require().getConfig()['server.url'];
        var idoltree = lib.IDOL_Tools_Tree.getIDOLTree(idolUrl);
        var gsProxyurl= idoltree.gsProxyUrl;
        gsProxyurl += "action=GetStatus";
        var result = lib.jsaci.sendRequestToIDOL(gsProxyurl, "");
        var xml = new XML();
        xml.setContent(result);
        var dbs = XQuery.query('responsedata/databases/database',xml);
        for(var i =0; i &lt; dbs.length;i++){
            var name = XQuery.queryText('name',dbs[i]);
            if(dbName == name){return true;}
        }
        return false;
    }

    function tempDBPostFix(){
        return '_KM_INTERNAL_TEMP';
    }

    function getDatabases(idolURL){
        var result = lib.jsaci.sendRequestToIDOL(idolURL, "");
        var xml_doc =  new XML();
        xml_doc.setContent(result);
        var dbs = XQuery.query('responsedata/databases/database', xml_doc);
        return dbs;
    }

    function getContentURLs()
    {
        var contentURLs =[];
        var idol_url = lib.IDOLConfigure.require().getConfig()['server.url'];
        var idolServerEP = IDOLURLParser.parse(idol_url);
        var idol_tree = lib.IDOL_Tools_Tree.getIDOLTree(idol_url);
        var gsContents = idol_tree.gsContent;

        if(gsContents &amp;&amp; gsContents.length&gt;0){
            for( var i=0; i &lt; gsContents.length; i++){
                var content_url = idolServerEP.protocol+'://'+gsContents[i].host+':'+gsContents[i].port+'/action=getstatus';
                contentURLs.push(content_url);
            }
        }
        return contentURLs;
    }

    function isDBReadOnly(dbs,dbName)
    {
        if(dbs &amp;&amp; dbs.length){
            for(var j = 0; j &lt; dbs.length; j++){
                var name = XQuery.queryText('name',dbs[j]);
                if(name === dbName){
                    var read_only = XQuery.queryText('readonly',dbs[j]);
                    if(read_only ==='true'){return true;}
                }
            }
        }
        return false;
    }

    function isDBReadOnlyOnAnyContent(dbName)
    {
        var content_urls = getContentURLs();
        if( content_urls &amp;&amp; content_urls.length ){
            for( var i = 0; i&lt;content_urls.length;i++){
                var dbs = getDatabases(content_urls[i]);
                if(isDBReadOnly(dbs, dbName)){
                    return true;
                }
            }
        }

        return false;
    }

    return {
        createIndexDB  : createIndexDB,
        mappingVDB     : mappingVDB,
        deleteIndexDB  : deleteIndexDB,
        addDocument    : addDocument,
        deleteDocument : deleteDocument,
        flushIndexData : flushIndexData,
        renameIndexDB  : renameIndexDB,
        removeIndexDB  : removeIndexDB,
        isDBExists     : isDBExists,
        tempDBPostFix  : tempDBPostFix,
        deleteAttachment : deleteAttachment,
        isDBReadOnlyOnAnyContent :  isDBReadOnlyOnAnyContent
    }
}();

function require() {
    return IDOLKMIndex;
}</script>
    <package type="string">IDOL</package>
    <sysmodtime type="dateTime">07/16/17 17:01:40</sysmodtime>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodcount type="decimal">0</sysmodcount>
    <prgnsystem NullValue="1" type="boolean"/>
    <sysrestricted type="boolean">false</sysrestricted>
  </record>
</recordset>
