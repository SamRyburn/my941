<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="ScriptLibrary">
  <record id="name=&quot;IDOLCommon&quot;" recordid="IDOLCommon">
    <name type="string">IDOLCommon</name>
    <script type="string">var _ = lib.Underscore.require(),
  scmsg = funcs.scmsg;

var IDOLCommon = (function() {

  function dateformat(date) {
    var out = "";
    if (date) {
      out += date.getFullYear() + '/';
      if (date.getMonth() &lt; 9) {
        out += "0";
      }
      out += (date.getMonth() + 1) + '/';
      if (date.getDate() &lt; 10) {
        out += "0";
      }
      out += date.getDate();
    }
    return out;
  }

  function dateformatEpoc(date) {
    return Math.round( date.getTime()/1000 ) + 'e';
  }

  // XXX: These names should not globalize, because some feature depends on it as a query condition
  var FEATURES = {
    SC : 'Smart Tickets',
    HTA : 'Hot Topic Analyzer'
  };

  var FEATURES_DISPLAY = {
    SC  : scmsg(63, 'idol'),
    HTA : scmsg(60, 'idol')
  };

  function getReferenceFields(filename) {
    // find first unique key
    var dbdict = new SCFile("dbdict");
    var rc = dbdict.doSelect("name=\"" + filename + "\"");
    if (rc === RC_SUCCESS) {
      var keys = dbdict.key.toArray();
      for (var i = 0, length = keys.length; i &lt; length; i++) {
        var key = dbdict.key[i];
        // Unique Key, Primary Key
        if (key.flags === 12 || key.flags === 28) {
          return key.name.toArray();
        }
      }
    }
    return [];
  }

  function convertToIDOLFieldName(fieldname) {
    var name = fieldname || "";
    return name.replace(/\./g, "_")
      .replace(/,/g, ".")
      .toUpperCase();
  }

  function compositeCriteria(sqls, op) {
    if (_.isArray(sqls)) {
      if (sqls.length &gt; 1) {
        return _.chain(sqls)
          .compact()
          .map(function(sql) { return ' (' + sql + ') '; })
          .value()
          .join(op);
      } else {
        return sqls[0] || '';
      }
    }
    return sqls;
  }

  return {
    getReferenceFields : getReferenceFields,
    dateformat         : dateformat,
    dateformatEpoc     : dateformatEpoc,
    FEATURES           : FEATURES,
    FEATURES_DISPLAY   : FEATURES_DISPLAY,
    toIDOLFieldName    : convertToIDOLFieldName,
    compositeCriteria    : compositeCriteria
  };
})();


function require() {
  return IDOLCommon;
}</script>
    <package type="string">IDOL</package>
    <sysmodtime type="dateTime">07/16/17 17:01:40</sysmodtime>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodcount type="decimal">0</sysmodcount>
    <prgnsystem NullValue="1" type="boolean"/>
    <sysrestricted type="boolean">false</sysrestricted>
  </record>
</recordset>
