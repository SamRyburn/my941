<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="ScriptLibrary">
  <record id="name=&quot;IDOLGlobalSearchSharePointLinkBuilder&quot;" recordid="IDOLGlobalSearchSharePointLinkBuilder">
    <name type="string">IDOLGlobalSearchSharePointLinkBuilder</name>
    <script type="string">var _ = lib.Underscore.require(),
    XQuery = lib.XQuery.require(),
    IDOLClientFactory = lib.IDOLClientFactory.require();


var IDOLGlobalSearchSharePointLinkBuilder = (function() {
  var HTTP_URL_PATTERN = /^https?:\/\//;

  function buildRootParentSharePointLink(reference, database) {

    var client = IDOLClientFactory.create('GlobalSearch');

    var params = {
      action: 'GetContent',
      Reference: encodeURIComponent(reference),
      DatabaseMatch: database,
      PrintFields: 'LISTITEMURL'  
    };
    if(vars.$G_securityInfo) {
      params.SecurityInfo = vars.$G_securityInfo;
    }
    var doc = client.executeAction(params);
    return XQuery.queryText('autn:content/DOCUMENT/LISTITEMURL', doc);
  }

  function buildSharePointLink(reference, database) {
    if (HTTP_URL_PATTERN.test(reference)) {
      return reference;
    }
    
    var client = IDOLClientFactory.create('GlobalSearch');
    var params = {
      action: 'GetContent',
      Reference: encodeURIComponent(reference),
      DatabaseMatch: database,
      PrintFields: 'LISTITEMURL,FILEURL,DREROOTPARENTREFERENCE'  
    };
    if(vars.$G_securityInfo) {
      params.SecurityInfo = vars.$G_securityInfo;
    }
      
    var doc = client.executeAction(params);

    var hit = XQuery.queryOne('responsedata/autn:hit', doc);
    var data = XQuery.queryObject({
      url : 'autn:content/DOCUMENT/FILEURL|LISTITEMURL',
      parentRef : 'autn:content/DOCUMENT/DREROOTPARENTREFERENCE'
    }, hit);

    var url = data.url;

    if (HTTP_URL_PATTERN.test(url)) { return url; }

    return IDOLGlobalSearchSharePointLinkBuilder.buildLink(data.parentRef, database);
  }

  function isLinkValidate(reference) {
    return HTTP_URL_PATTERN.test(reference);
  }

  return {
    isLinkValidate : isLinkValidate,
    buildParentLink : buildRootParentSharePointLink,
    buildLink : buildSharePointLink
  };
}());


function require() {
  return IDOLGlobalSearchSharePointLinkBuilder;
}</script>
    <package type="string">IDOL</package>
    <sysmodtime type="dateTime">07/16/17 17:01:40</sysmodtime>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodcount type="decimal">0</sysmodcount>
    <prgnsystem NullValue="1" type="boolean"/>
    <sysrestricted NullValue="1" type="boolean"/>
  </record>
</recordset>
