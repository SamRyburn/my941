<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="ScriptLibrary">
  <record id="name=&quot;IDOLGlobalSearch&quot;" recordid="IDOLGlobalSearch">
    <name type="string">IDOLGlobalSearch</name>
    <script type="string">var _ = lib.Underscore.require(),
    IDOLAdvancedSettings = lib.IDOLAdvancedSettings.require(),
    IDOLKMQueryFactory = lib.IDOLKMQueryFactory.require(),
    IDOLPreference = lib.IDOLPreference.require(),
    IDOLErrorCode = lib.IDOLErrorCode.require(),
    XQuery = lib.XQuery.require();

var GlobalSearchSettings = IDOLAdvancedSettings.GlobalSearch;
var logger = getLog('IDOLGlobalSearch');

var IDOLGlobalSearch = (function() {

  var _last_selected_libraries;

  var CHARACTERS = {
    main : GlobalSearchSettings.MAIN_SEARCH_CHARACTERS,
    quick : GlobalSearchSettings.QUICK_SEARCH_CHARACTERS
  };

  function searchSelectedLibrary(qs, criteria) {
    var options = {};
    var start = parseInt(qs.start, 10) || 1,
        limit = parseInt(qs.limit, 10) || GlobalSearchSettings.PAGE_SIZE,
        characters = CHARACTERS[qs.from] || 200;

    var fKMQuery = new SCFile('kmquery');
    options = _.extend(options, {
      "Start": start,
      "MaxResults": start + limit - 1,
      "MaxPrintChars": GlobalSearchSettings.MAX_PRINT_CHARACTERS,
      "Characters" : characters
    });

    fKMQuery.query = qs.query || "";

    var IDOLKMQuery = IDOLKMQueryFactory.create('quicksearch', fKMQuery, criteria);
    try {
      // print hit list when running in main search mode
      IDOLKMQuery.from = qs.from;
      IDOLKMQuery.force = !!qs.force;
      // Search within results
      IDOLKMQuery.searchWithinResults = !!criteria['__history__'];

      var results = IDOLKMQuery.search(options);
      if (qs.from === 'main') { // only save selected status for main search page
        var libraries = criteria['__library__'] || [];
        var strnames = libraries.sort().join(',');

        // Database writing is a time consuming process
        // dirty check to increase performance.
        if (_last_selected_libraries !== strnames) {
          logger.debug('save selected library "' + strnames + '"');
          IDOLPreference.saveLibraries(libraries);
          _last_selected_libraries = strnames;
        }  
      }
      return results;
    } catch (e) {
      // ignore empty query, or 'all stop words' query
      // TODO: should return corresponding HTTP response code, like 404
      if (e.id === IDOLErrorCode.INVALID_QUERY_TEXT) {
        return { data : [], total : 0, messages : [e.message] };
      }
      throw e;
    }
  }

  return {
    search: searchSelectedLibrary
  };
}());

function require() {
  return IDOLGlobalSearch;
}</script>
    <package type="string">IDOL</package>
    <sysmodtime type="dateTime">07/16/17 17:01:40</sysmodtime>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodcount type="decimal">0</sysmodcount>
    <prgnsystem NullValue="1" type="boolean"/>
    <sysrestricted NullValue="1" type="boolean"/>
  </record>
</recordset>
