<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="ScriptLibrary">
  <record id="name=&quot;IDOLKMQueryParameter&quot;" recordid="IDOLKMQueryParameter">
    <name type="string">IDOLKMQueryParameter</name>
    <script type="string">var _ = lib.Underscore.require(),
    jsaci = lib.jsaci,
    IDOLGlobalSearchLibrary = lib.IDOLGlobalSearchLibrary.require(),
    IDOLGlobalSearchHighLight = lib.IDOLGlobalSearchHighLight.require(),
    IDOLGlobalSearchSandbox = lib.IDOLGlobalSearchSandbox.require(),
    IDOLAdvancedSettings = lib.IDOLAdvancedSettings.require(),
    IDOLKMFieldMapping = lib.IDOLKMFieldMapping.require(),
    IDOLQueryEvaluator = lib.IDOLQueryEvaluator.require(),
    IDOLKMNLProcessing = lib.IDOLKMNLProcessing.require(),
    IDOLKMSecurity = lib.IDOLKMSecurity.require(),
    IDOLKMSorting = lib.IDOLKMSorting.require(),
    IDOLSMProfile = lib.IDOLSMProfile.require(),
    IDOLCommon = lib.IDOLCommon.require(),
    DisplayName = lib.DisplayName;

var GlobalSearchSettings = IDOLAdvancedSettings.GlobalSearch;

var IDOLKMQueryParameter = (function() {

  var PARAMETRIC_SEARCH_PARAMS_KEY     = '__field__';
  var SEARCH_WITHIN_RESULT_PARAMS_KEY  = '__history__';
  var GLOBAL_CRITERIA_PARAMS_KEY       = '__global__';
  var PRECONDITION_CRITERIA_PARAMS_KEY = '__smart__';

  var SEARCH_ACTION_BASE = {
    "action"             : "Query",
    "Characters"         : 200,
    "TotalResults"       : true,
    "DetectLanguagetype" : true,
    "SpellCheck"         : true,
    "Synonym"            : true,
    "Predict"            : false,
    "Summary"            : "Context",
    "Highlight"          : "SummaryTerms",
    "StartTag"           : IDOLGlobalSearchHighLight.START_TAG,
    "EndTag"             : IDOLGlobalSearchHighLight.END_TAG,
    "Combine"            : "simple+drereference"
  };

  var PARAMETRIC_ACTION_BASE = {
    "action"        : "GetQueryTagValues",
    "Sort"          : "Alphabetical",
    "Start"         : 1,
    "MaxValues"     : 10,
    "DocumentCount" : true,
    "Combine"       : "simple+drereference"
  };

  var mappingIDOLField = IDOLKMFieldMapping.mappingIDOLField;

  function escapeIDOLFieldTextValue(value) {
    if (value === null || value === undefined) { value = ""; }
    // when value equal boolean 'false', should return a string "false"
    value = value.toString();
    return jsaci.encodeStringForFieldText(value);
  }


  function buildPrintFieldParams(kmquery, advCriteria) {
    var fields = [
      // for drilldown
      "ID", "DOCUMENTID", "SEFILENAME", "SEQUERY",
      // for sharepoint attachment
      "FILEURL", "LISTITEMURL", "DREROOTPARENTREFERENCE"
    ];

    var kmlibs = kmquery.getSelectedLibraries();
    // only main search page need to show hit list data;
    var printhitlist = (kmquery.from === 'main');
    _.each(kmlibs, function(kmlib) {
      if (IDOLGlobalSearchLibrary.isKMDocument(kmlib)) {
        var fieldname = mappingIDOLField("hotnews", kmlib.kbname);
        fields.push(fieldname);
      }
      if (printhitlist) {
        var hitlists = kmquery.getHitListMappings(kmlib);
        fields = fields.concat(_.values(hitlists));
      }
    });
    fields = _.uniq(fields);
    return { PrintFields : fields.join(',') };
  }

  function buildDatabaseMatchParams(kmquery, advCriteria) {
    var selectedLibs = kmquery.getSelectedLibraries();
    var names = _.pluck(selectedLibs, 'kbname');
    
    // XXX: For IDOL, if no databasematch parameter assigned, all database will be used
    if (names.length === 0) {
      return { DatabaseMatch : '_not_exists_database_name_' };
    }
    return { DatabaseMatch : names.join(',') };
  }

  function buildFieldTextParams(kmquery, advCriteria) {
    var filters = [];
    appendAttachmentFilters(kmquery, advCriteria, filters);
    appendFieldWildcardFilters(kmquery, advCriteria, filters);
    appendLibraryFilters(kmquery, advCriteria, filters);
    return { FieldText : IDOLCommon.compositeCriteria(filters, 'AND') };
  }

  function buildTimeRangeParams(kmquery, advCriteria) {
    var global = advCriteria[GLOBAL_CRITERIA_PARAMS_KEY];
    if (global) {
      var lastmodifytime = global['lastmodifytime'];
      if (lastmodifytime) {
        var min = lastmodifytime * 60 * 60 * 24;
        return { MinDate : min + 's' };
      }
    }
    return {};
  }

  function buildLanguageParams(kmquery, advCriteria) {
    var fKMQuery = kmquery.fKMQuery;
    var params = IDOLKMNLProcessing.buildNaturalLanguageParams(fKMQuery);

    var words = extractHistorySearchText(kmquery, advCriteria);
    words.push(params.Text);
    params.Text = IDOLCommon.compositeCriteria(words, 'AND');

    return params;
  }

  function extractHistorySearchText(kmquery, advCriteria) {
    var history = advCriteria[SEARCH_WITHIN_RESULT_PARAMS_KEY];
    if (history) {
      var words = [];
      _.each(history, function(advCriteria) {
        var keyword = advCriteria.__text__;
        if (keyword &amp;&amp; keyword !== '*') {
          words.push(keyword);
        }
      });
      return words;
    }
    return [];
  }

  function buildSharePointParams(kmquery, advCriteria) {
    if (kmquery.hasSharePoint()) {
      return IDOLKMSecurity.getSecurityInfo(funcs.operator());
    }
    return {};
  }

  function appendAttachmentFilters(kmquery, advCriteria, filters) {
    if (kmquery.hasAttachmentLibrary()) {
      filters.push('(NOT MATCH{joboptions}:IMPORTMAGICEXTENSION) OR EMPTY{}:IMPORTMAGICEXTENSION');
    }
  }

  function appendLibraryFilters(kmquery, advCriteria, filters) {
    var kmlibs = kmquery.getSelectedLibraries();

    var alllibfilters = _.map(kmlibs, function(kmlib) {
      var filters = [];
      appendPerLibraryFilter(kmquery, advCriteria, kmlib, filters);
      // for search in results, one criteria may add several times
      filters = _.uniq(filters);

      var dbfield = (kmlib.kbtype === 'sclib') ? 'KNOWLEDGEBASE_NAME_MATCH' : 'DREDBNAME';
      filters.push([ 'MATCH{' + kmlib.kbname + '}:' + dbfield ]);
      return IDOLCommon.compositeCriteria(filters, 'AND');
    });

    if (alllibfilters.length &gt; 0) {
      var filter = IDOLCommon.compositeCriteria(alllibfilters, 'OR');
      filters.push(filter);
    }
  }

  function buildPagingParams(kmquery, advCriteria) {
    var fKMQuery = kmquery.fKMQuery;
    return {
      "Start": fKMQuery.docstart || 1,
      "MaxResults": fKMQuery.maxdocs || 10
    };
  }

  function buildSortingParams(kmquery, advCriteria) {
    return IDOLKMSorting.getSortInfo(kmquery.sortinfo);
  }

  function appendPerLibraryFilter(kmquery, advCriteria, kmlib, filters) {
    appendPreConditions             (kmquery, advCriteria, kmlib, filters);
    appendAdhocCriteria             (kmquery, advCriteria, kmlib, filters);
    appendKMSecurityFilter          (kmquery, advCriteria, kmlib, filters);
    appendAdvancedCriteria          (kmquery, advCriteria, kmlib, filters);
    appendMandantenSecurityFilter   (kmquery, advCriteria, kmlib, filters);
    appendSearchWithinResultCriteria(kmquery, advCriteria, kmlib, filters);
    appendCatalogSearchCriteria     (kmquery, advCriteria, kmlib, filters);
    appendSharePointSearchCriteria  (kmquery, advCriteria, kmlib, filters);
    appendSelfExclusionCriteria     (kmquery, advCriteria, kmlib, filters);
  }

  function appendSelfExclusionCriteria(kmquery, advCriteria, kmlib, filters) {
    if (kmlib.kbtype === 'sclib' &amp;&amp; kmquery.from === 'quick') {
      var record = vars['$L.file'];
      if (record &amp;&amp; kmlib.sclibtablename === funcs.filename(record)) {
        var fieldname = kmlib.docid;
        var value = escapeIDOLFieldTextValue(record[fieldname]);
        // attachment only has 'DOCUMENTID'
        var filter = '(NOT MATCH{' + value + '}:DOCUMENTID AND NOT MATCH{' + value +'}:' + mappingIDOLField(fieldname, kmlib.kbname) + ')';
        filters.push(filter);
      }
    }
  }
  
  function appendSharePointSearchCriteria(kmquery, advCriteria, kmlib, filters){
    if(kmlib.kbtype ==='splib') {
      filters.push('EXISTS{}:FILEURL:LISTITEMURL:DREROOTPARENTREFERENCE OR WILD{http://*,https://*}:DREFERENCE');
    }
  }

  function appendCatalogSearchCriteria(kmquery, advCriteria, kmlib, filters) {
    if (IDOLGlobalSearchLibrary.isCatalog(kmlib)) {var lang = vars['$G.my.language'];
      if (lang) {
        var filter = 'MATCH{' + escapeIDOLFieldTextValue(lang) + '}:' + mappingIDOLField('syslanguage', kmlib.kbname);
        filters.push(filter);
      }
    }
  }

  function appendAdvancedCriteria(kmquery, advCriteria, kmlib, filters) {
    var kbname = kmlib.kbname;
    var criterion = advCriteria[kbname];
    if (criterion) {
      var advFilters = _.map(criterion, function(values, fieldname) {
        return 'MATCH{' + _.map(values, escapeIDOLFieldTextValue).join(',') + '}:' + mappingIDOLField(fieldname, kbname);
      });
      if (advFilters.length &gt; 0) {
        var filterquery = IDOLCommon.compositeCriteria(advFilters, 'AND');
        filters.push(filterquery);
      }
    }
  }

  function appendKMSecurityFilter(kmquery, advCriteria, kmlib, filters) {
    if (kmlib.kbtype === 'sclib') {
      var script = lib[kmlib.searchsecurityscript];
      if (script &amp;&amp; script.getSecurityInfo) {
        var filter = script.getSecurityInfo(funcs.operator(), kmlib);
        filters.push(filter);
      }
    }
  }

  function appendSQLSecurityFilter(kmlib, sql, filters) {
    var sctable = kmlib.sclibtablename;
    if (sql) {
      var ast = parseQuery(sql);
      // XXX: all security fields are mapped to 'MATCH' field
      var filter = IDOLQueryEvaluator.convertToIDOLQuery(ast, null, function(fieldname) {
        return mappingIDOLField(fieldname) + '_MATCH';
      });
      if (filter) {
        filters.push(filter); 
      }
    }
  }

  function appendMandantenSecurityFilter(kmquery, advCriteria, kmlib, filters) {
    if (kmlib.kbtype !== 'sclib') { return; }

    var sctable = kmlib.sclibtablename;
    if (!sctable) { return; }

    var sql = getMandantQuery(sctable), appendSQL;
    if (IDOLGlobalSearchLibrary.isPDKnownError(kmlib)) {
      appendSQL = IDOLGlobalSearchSandbox.evaluate({ 
        '$isKnownError' : true
      }, function() {
        return IDOLSMProfile.appendQuery('true', sctable);
      });
    } else {
      appendSQL = IDOLSMProfile.appendQuery('true', sctable);
    }

    appendSQLSecurityFilter(sctable, sql, filters);
    appendSQLSecurityFilter(sctable, appendSQL, filters);
  }

  function appendSearchWithinResultCriteria(kmquery, advCriteria, kmlib, filters) {
    var history = advCriteria[SEARCH_WITHIN_RESULT_PARAMS_KEY];
    if (history) {
      _.each(history, function(advCriteria) {
        appendAdvancedCriteria(kmquery, advCriteria, kmlib, filters);
      });
    }
  }

  function appendPreConditions(kmquery, advCriteria, kmlib, filters) {
    var smart = advCriteria[PRECONDITION_CRITERIA_PARAMS_KEY];
    if (smart &amp;&amp; smart['smartcriteria']) {
      var kbname = kmlib.kbname,
          preconditions = smart['smartcriteria'];

      var item = _.findWhere(preconditions, { library : kbname });
      if (item) {
        var ast = parseQuery(item.sql);
        var filter = IDOLQueryEvaluator.convertToIDOLQuery(ast, null, function (fieldname){ 
          return mappingIDOLField(fieldname, kbname);
        });
        filters.push(filter);
      }
    }
  }

  function appendAdhocCriteria(kmquery, advCriteria, kmlib, filters) {
    var func = kmquery.perLibAdHocCriteria;
    if (_.isFunction(func)) {
      var filter = func.call(kmquery, kmlib);
      filters.push(filter);
    }
  }

  function toParametricName(name) {
    name = mappingIDOLField(name);
    // only match field can be used as filter
    if (name.indexOf('_MATCH') === -1) {
      name += '_MATCH';
    }
    return name;
  }

  function buildParametricFieldName(kmquery, advCriteria) {
    var field = advCriteria[PARAMETRIC_SEARCH_PARAMS_KEY];
    if (field) {
      var fieldname = field.fieldname;
      return { FieldName: toParametricName(fieldname) };
    }
    return {};
  }

  function appendFieldWildcardFilters(kmquery, advCriteria, filters) {
    var field = advCriteria[PARAMETRIC_SEARCH_PARAMS_KEY];
    if (field) {
      var prefix = field.prefix,
          fieldname = field.fieldname,
          filename = field.filename,
          libname = field.libname;

      var matches = [];
      if (prefix) {
        var idolFieldName = mappingIDOLField(fieldname, libname);
        matches.push('WILD{' + escapeIDOLFieldTextValue(prefix) + '*}:' + idolFieldName);

        // need to search its display name when necessary
        var reftable = DisplayName.getFieldReferenceTable(filename, fieldname);
        if (reftable) {
          matches.push('WILD{' + escapeIDOLFieldTextValue(prefix) + '*}:_DN_' + idolFieldName);  
        }
      }

      var filter = IDOLCommon.compositeCriteria(matches, 'OR');
      if (filter) {
        filters.push(filter);  
      }
    }
  }

  function buildIDOLParametricSearchCommand(kmquery, advCriteria) {
    advCriteria = advCriteria || {};
    return _.extend({},
      PARAMETRIC_ACTION_BASE, 
      buildDatabaseMatchParams(kmquery, advCriteria), 
      buildFieldTextParams(kmquery, advCriteria),
      buildTimeRangeParams(kmquery, advCriteria),
      buildLanguageParams(kmquery, advCriteria),
      buildParametricFieldName(kmquery, advCriteria)
    );
  }

  function buildIDOLSearchCommand(kmquery, advCriteria) {
    advCriteria = advCriteria || {};
    var params = _.extend({},
      SEARCH_ACTION_BASE,
      buildDatabaseMatchParams(kmquery, advCriteria),
      buildTimeRangeParams(kmquery, advCriteria),
      buildFieldTextParams(kmquery, advCriteria),
      buildPrintFieldParams(kmquery, advCriteria),
      buildLanguageParams(kmquery, advCriteria),
      buildSortingParams(kmquery, advCriteria),
      buildPagingParams(kmquery, advCriteria),
      buildSharePointParams(kmquery, advCriteria)
    );

    if (params.Text.length &gt; GlobalSearchSettings.SUGGEST_ON_TEXT_THRESHOLD) {
      _.extend(params, { "action" : "SuggestOnText" });
    }

    return params;
  }

  /*
   * @deprecated
   */
  function getSecurityFilter() {
    throw new Error('IDOLKMQueryParameter.getSecurityFilter method is obsoleted');
  }

  return {
    buildSearchCommand : buildIDOLSearchCommand,
    buildParametricSearchCommand : buildIDOLParametricSearchCommand,
    getSecurityFilter : getSecurityFilter
  };
}());

function require() {
  return IDOLKMQueryParameter;
}</script>
    <package type="string">IDOL</package>
    <sysmodtime type="dateTime">07/16/17 17:01:40</sysmodtime>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodcount type="decimal">0</sysmodcount>
    <prgnsystem NullValue="1" type="boolean"/>
    <sysrestricted NullValue="1" type="boolean"/>
  </record>
</recordset>
