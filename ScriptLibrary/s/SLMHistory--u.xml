<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="ScriptLibrary">
  <record id="name=&quot;SLMHistory&quot;" recordid="SLMHistory">
    <name type="string">SLMHistory</name>
    <script type="string">var $ = lib.c.$;
var _evaluate = lib.SysUtil._evaluate;
var _parse    = lib.SysUtil._parse;
var _ = lib.Underscore.require();
var nullsub = system.functions.nullsub;




function scheduleTotalTimeCaculation(name, sloResponse, slaActive, expiration, type){
      
      var schedule = new SCFile("schedule");
      schedule["name"] = name
      schedule["javascript"] = "lib.SLMHistory.callTotalTimeCaculation()";
      schedule["strings"][0] = sloResponse.getXML().toXMLString();
      schedule["strings"][1] = slaActive.getXML().toXMLString();

      schedule["class"] = type || "report"
      schedule["expiration"] = expiration;
      schedule.doInsert();
}

function callTotalTimeCaculation() {

      var sloResponse = new SCFile("sloresponse");
      var slaActive = new SCFile("slaactive");
      sloResponse.setRecord(vars.$L_schedule["strings"][0]);
      slaActive.setRecord(vars.$L_schedule["strings"][1]);
      calculateHistory(sloResponse, slaActive);
}

function calculateHistory(sloResponse, slaActive) {
      
      var moduleControl = $("slacontrol").select('true').uniqueResult();
      if (!moduleControl) return null;
      if (!nullsub(moduleControl['log.response'], false)) return null;
      
      if(!sloResponse || !slaActive) return null;

      var TOD = system.functions.tod();
      var start = [];
      var end = [];
      var groups = [];
      var groupCalendars = [];
      var groupTimezones = [];
      var agreementCategory = sloResponse.agreement_category;
      var suspendedStart = [];
      var suspendedEnd = [];
      var statProgression = [];
      var sloInitIndex = 0;
      var sloFinIndex = 0;
      var sloSuspendStates = [];

      var sloValidStates = [];

      //get SLO record from slo response
      var sloQuery = 'slo.id=' + sloResponse["slo.id"];
      var slo = $("slo").select(sloQuery).uniqueResult();
      
      
      


      //get Module control
      var slmControl = $("slamodulecontrol").select('table.name="' + sloResponse.foreign_filename + '"').uniqueResult();
      if (!slmControl) return null;
      if (!slmControl['status.progression']) return null;
      
      // get expiration time
      var expirationTime=sloResponse["expiration.time"];
      
      // get reassign time
      var fileName = sloResponse["foreign.filename"];
      var recordId = sloResponse["foreign.key"];
     
      var latestReassignTime=lib.SLMCalculation.getLatestAssignTime(fileName,recordId);



      //get SLA
      var slaQuery = 'agreement.id="' + sloResponse.agreement_id + '"';
      var sla = $('sla').select(slaQuery).uniqueResult();

      //preapare the data for calculation
      statProgression = _.compact(slmControl['status.progression'].toArray()); //$L.stat.progression=denull(nullsub(status.progression in $L.control, {}))
      if (statProgression.length === 0) return null;

      sloSuspendStates = _.compact(slo.suspend_states.toArray());

      sloInitIndex = _.indexOf(statProgression, slo.initial_state); //$L.slo.init.index=index($L.slo.init.state, $L.stat.progression)
      sloFinIndex = _.indexOf(statProgression, slo.final_state); //$L.slo.final.index=index($L.slo.fin.state, $L.stat.progression)

      //get valid state progression of this slo from statProgression list
      sloValidStates = statProgression.slice(sloInitIndex, sloFinIndex + 1);


      //get the time arrays of: start and end, suspend start. suspend end.
      var lng = system.functions.lng(system.functions.denull(slaActive.state_change)) || 0;
      var preIsNotTakenAsCalState = false;
      var preIsFinalState = false;
      var preIsSuspendState =false;
      var preState;
      for (var i = 0; i &lt; lng; i++) {
      	var state = slaActive.state_change[i].state;
      	if (i &gt; 0) {
      		preState = slaActive.state_change[i - 1].state;
      	}
      	var curIndex = _.indexOf(statProgression, state);
      	var preIndex = _.indexOf(statProgression, preState);
      	if (sloInitIndex &gt; curIndex || curIndex &gt;= sloFinIndex || !_.contains(sloValidStates, state)) {
      		continue;
      	}
      	if (sloInitIndex &gt; preIndex || !_.contains(sloValidStates, preState)) {
      		preIsNotTakenAsCalState = true;
      	}
      	if (preIndex &gt;= sloFinIndex) {
      		preIsFinalState = true;
      	}
      	if (_.contains(sloValidStates, preState) &amp;&amp; _.contains(sloSuspendStates, preState)) {
      	    preIsSuspendState = true;
      	}
      	var startTime = slaActive.state_change[i].time;
      	var endTime = slaActive.state_change[i + 1].time;

      	// preIsNotTakenAsCalState that is previours state is not taken as calculation state
      	// preIsFinalState that is previours state is final state
      	// preIsSuspendState that is previours state is suspend state
      	if (expirationTime != null &amp;&amp; latestReassignTime != null) {
      		if ((preIsFinalState || preIsNotTakenAsCalState || preIsSuspendState ) &amp;&amp; endTime == null &amp;&amp; TOD.getTime() &lt; expirationTime.getTime() &amp;&amp; expirationTime.getTime() &gt; startTime.getTime() &amp;&amp; startTime.getTime() &gt; latestReassignTime.getTime()) break;
      		if (_.contains(sloValidStates, state) &amp;&amp; !_.contains(sloSuspendStates, state)) {
      			start.push(startTime);
      			var tmpEndTime;
      			if (TOD.getTime() &gt; expirationTime.getTime()) {
      				tmpEndTime = expirationTime;
      			} else {
      				tmpEndTime = latestReassignTime;
      			}
      			end.push(endTime ? endTime : tmpEndTime);
      		};
      	} else if (expirationTime == null &amp;&amp; latestReassignTime != null) 
      	{
      	    if ((preIsFinalState || preIsNotTakenAsCalState || preIsSuspendState ) &amp;&amp; endTime == null &amp;&amp; startTime.getTime() &gt; latestReassignTime.getTime()) break;

      		if (_.contains(sloValidStates, state) &amp;&amp; !_.contains(sloSuspendStates, state)) {
      			start.push(startTime);
      			var tmpEndTime;
      			if (TOD.getTime() &gt; latestReassignTime.getTime()) {
      				tmpEndTime = TOD;
      			} else {
      				tmpEndTime = latestReassignTime;
      			}
      			end.push(endTime ? endTime : tmpEndTime);
      		};
      	
      	}
      	else {
      		if ((preIsFinalState || preIsNotTakenAsCalState || preIsSuspendState ) &amp;&amp; endTime == null ) break;
      		if (_.contains(sloValidStates, state) &amp;&amp; !_.contains(sloSuspendStates, state)) {
      			start.push(startTime);
      			end.push(endTime ? endTime : TOD);
      		};
      	}
      	if (_.contains(sloValidStates, state) &amp;&amp; _.contains(sloSuspendStates, state)) {
      		suspendedStart.push(startTime);
      		suspendedEnd.push(endTime ? endTime : TOD);
      	};
      };
  

      

      //Calculate the elapsed time
      //fake record
      var record = {};
      record[nullsub(slmControl["group.field"], "assignment")] = sloResponse.group;

      //Calculate sla elapsed time
      if (agreementCategory === "sla") {
            //for sla we don`t log assignment group info to history, so set it to null;
            record[nullsub(slmControl["group.field"], "assignment")] = null;
            
            var totalInterval = calcInterval(
                  start, end,
                  null, null, null,
                  sloResponse,
                  null, null);
            //set sloresopnse start and end time and total
            sloResponse['start.time'] = start[0];
            sloResponse['end.time'] = end[end.length - 1];
            sloResponse['total.time'] = totalInterval;


            //purge and insert sloresopnse history record
            logSloResponseHist(sloResponse, record, slmControl, slo, null);

      } else if (agreementCategory === "ola" || agreementCategory === "uc") {
      //Calculate ola/uc elapsed time
            //intersection result
            var newStart = [];
            var newEnd = [];
            var groups = [];
            var groupCalendars = [];
            var groupTimezones = [];

            lib.SLMCalculation.intersectionWithAssignment(
                  record, slmControl, sla, slo, sloResponse,
                  start, end,
                  groups,
                  groupCalendars,
                  groupTimezones,
                  newStart,
                  newEnd,
                  TOD);

                             

            var totalInterval = calcInterval(
                  newStart, newEnd,
                  groups, groupCalendars, groupTimezones,
                  sloResponse,
                  slo['schedule.type'], slo['tz.type']);


            //total.time.group: do the intersection for current group
            //intersction result
            var currentGroup_newStart = [];
            var currentGroup_newEnd = [];
            var currentGroup_groups = [];
            var currentGroup_groupCalendars = [];
            var currentGroup_groupTimezones = [];

            var fake_slo = {
                  duration_method: "first"
            };

            lib.SLMCalculation.intersectionWithAssignment(
                  record, slmControl, sla, fake_slo, sloResponse,
                  start, end,
                  currentGroup_groups,
                  currentGroup_groupCalendars,
                  currentGroup_groupTimezones,
                  currentGroup_newStart,
                  currentGroup_newEnd,
                  TOD);


            var currentGroup_totalInterval = calcInterval(
                  currentGroup_newStart, currentGroup_newEnd,
                  currentGroup_groups, currentGroup_groupCalendars, currentGroup_groupTimezones,
                  sloResponse,
                  "group", "group"); //use group calendar and timezone here? 
            	


            //set sloresopnse start and end time and total
            sloResponse['start.time'] = newStart[0];
            sloResponse['end.time'] = newEnd[newEnd.length - 1];
            sloResponse['total.time'] = totalInterval;


            //purge and insert sloresopnse history record
            logSloResponseHist(sloResponse, record, slmControl, slo, currentGroup_totalInterval);
      }

}


function logSloResponseHist(sloResponse, record, slmControl, slo, duration) {
      //do the purge
      var durationMethod = slo.duration_method;
      var recordList = new SCFile("sloresponsehist");
      var category=sloResponse.agreement_category
      var query = "foreign.key=\"" + sloResponse.foreign_key + "\" and slo.id=\"" + sloResponse.slo_id + "\"";
      if (category==="ola" || category==="ola" ){
          query = query+" and assignment=\"" + sloResponse.group + "\""
      } 


      var deleteRC = recordList.doPurge(query);

      //do the logging

      var recordcopy = system.functions.recordcopy;

      var fieldsToCopy = ["active", "agreement.category", "agreement.id", "breached",
            "current.status", "end.time", "expiration.time", "final.state",
            "foreign.filename", "foreign.key", "initial.state", "running",
            "slo.id", "slo.name", "start.time", "suspended", "total.time"
      ];

      var currentGroup = record[nullsub(slmControl["group.field"], "assignment")];
      var sloresponsehist = new SCFile("sloresponsehist");
      var successflg = new SCDatum();
      var rteReturnValue = new SCDatum();
      var rteNumber = new SCDatum();
      try {
            successflg = system.functions.rtecall("getnumber", rteReturnValue, rteNumber, "sloresponsehist", null);
            successflg = recordcopy(sloResponse, fieldsToCopy, sloresponsehist, fieldsToCopy);
      } catch (e) {
            return -1;
      }

      sloresponsehist["id"] = rteNumber;
      sloresponsehist["assignment"] = currentGroup;
      sloresponsehist["total.time.group"] = duration;


      var rc = sloresponsehist.doInsert();
      return rc;

}

function calcInterval(starts, ends, groups, groupCalendars, groupTimezones, sloResponse, scheduleType, timezoneType) {

      var duration = newDuration();
      var calendar = system.functions.nullsub(sloResponse.calendar, "24/7");
      var holiday  = system.functions.nullsub(sloResponse.holiday,"");
      var timezone = system.functions.nullsub(sloResponse.timezone, vars.$lo_time_zone);
	  var length   = starts.length;
      for (var i = 0; i &lt; length; i++) {
            var t_calendar = calendar;
            var t_timezone = timezone;
            if(scheduleType === "group") t_calendar = groupCalendars[i];
            if(timezoneType === "group") t_timezone = groupTimezones[i];

            var interval = getInterval(starts[i], ends[i], t_calendar, t_timezone, holiday);
            duration.increment(interval);
      };

      return duration.value;

}

function  getInterval(sDT, eDT, workSch, tz, holiday) {  
      var  interval = new  SCDatum();  
      interval.setType(1);
      var  names  =   ["times,1", "times,2", "times,3", "prompt", "name", "query"];  
      var  values  =   [sDT, interval, eDT, workSch, tz,  holiday];  
      var  rc  =  callrad("calendar.calc.interval",  names,  values);  
      if  (rc  ==  RC_SUCCESS)  {             
            return  values[1];  
      }
}

function newDuration() {
      return {
            value: system.functions.val("00:00:00", 3),

            increment: function(dura) {
                  if (!dura) return this;
                  var newValue = this.addInterval(this.value, dura)
                  this.value = newValue;
                  return this;
            },

            addInterval: function(intv1, intv2) {
                  var strIntv = "'" + system.functions.val(intv1, 2) + "' + '" + system.functions.val(intv2, 2) + "'";
                  return system.functions.parse_evaluate(strIntv, 2);
            }
      }
}

</script>
    <package type="string">Activities</package>
    <sysmodtime type="dateTime">07/16/17 17:01:44</sysmodtime>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodcount type="decimal">0</sysmodcount>
    <prgnsystem NullValue="1" type="boolean"/>
    <sysrestricted NullValue="1" type="boolean"/>
  </record>
</recordset>
