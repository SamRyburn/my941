<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="ScriptLibrary">
  <record id="name=&quot;ScAPI_svcCatApprovals&quot;" recordid="ScAPI_svcCatApprovals">
    <name type="string">ScAPI_svcCatApprovals</name>
    <script type="string">/** @fileoverview svcCatApprovals - contains functions used by the Service Catalog module
*   @author Levin
*/
var select = lib.ScAPI_RAD._select;
var NO_RECORD_EXIT = lib.ScAPI_Constants.NO_RECORD_EXIT();
var NORMAL_EXIT = lib.ScAPI_Constants.NORMAL_EXIT();
var BAD_VALIDATION_EXIT = lib.ScAPI_Constants.BAD_VALIDATION_EXIT();
var CURRENTRECORD_NOT_UPDATE2DATE = lib.ScAPI_Constants.CURRENTRECORD_NOT_UPDATE2DATE();
var CURRENTRECORD_LOCKED = lib.ScAPI_Constants.CURRENTRECORD_LOCKED();
var getQuoteFileName = lib.ScAPI_Util.getQuoteFileName;
var getChangeGroups = lib.ScAPI_Util.getChangeGroups;
var getQuoteGroups = lib.ScAPI_Util.getQuoteGroups;
var setExitType = lib.ScAPI_Util.setExitType;
var setErrorMsg = lib.ScAPI_Util.setErrorMsg;
var us_convert_currency = lib.ScAPI_RAD.us_convert_currency;
var getDigitAfterDecimal = lib.ScAPI_Util.getDigitAfterDecimal;
var tod = lib.ScAPI_RAD._tod;
var _buildXmlFromFile = lib.ScAPI_WSInterface_Interaction_Inbox.buildXmlFromFile;
var queryBuilder = lib.ScAPI_RAD._queryBuilder;
var getCurrentOperator = lib.ScAPI_Util.getCurrentOperator;

var _createNode = lib.ScAPI_WSInterface_svcCatalogGather._createNode;

var scmsg = system.functions.scmsg;
var _getIfApprovalModLaterThanTime = lib.ScAPI_Util.getIfApprovalModLaterThanTime;
var INCIDENT_TABLE = "ti";
var CARTITEM_TABLE = "tc";
var log = lib.ScAPI_Logger.log("ScAPI_svcCatApprovals");

function getFilterCondtion(file,query) {
	var newquery = "";
	keyset = file['approvals'];
	var rowcount = keyset.length();
	for(var i = 0; i &lt; rowcount; i++){
		var oneapprove = "";
		var filename = keyset[i]['file.name'];
		var name1 = keyset[i]['name'];
		var uniquekey = keyset[i]['unique.key'];
		var component = keyset[i]['component'];
		if(filename !=null &amp;&amp; filename !=""){
			oneapprove = oneapprove + "(file.name=\""+filename +"\"";
		}        
		if(name1 !=null &amp;&amp; name1 !=""){
			if(oneapprove.length &gt; 0){
				oneapprove = oneapprove + " and name=\""+name1+"\""; 
			}
			else{
				oneapprove = oneapprove + "(name=\""+name1+"\""; 
			}
		}        
		if(uniquekey !=null &amp;&amp; uniquekey !=""){
			if(oneapprove.length &gt; 0){
				oneapprove = oneapprove + " and unique.key=\""+uniquekey+"\"";
			}
			else{
				oneapprove = oneapprove + "(unique.key=\""+uniquekey+"\"";
			}
		}
		if(component !=null &amp;&amp; component !=""){
			if(oneapprove.length &gt; 0){
				oneapprove = oneapprove + " and component=\""+component+"\"";
			}
			else{
				oneapprove = oneapprove + "(component=\""+component+"\"";
			}
		}
		if(oneapprove.length &gt; 0){
			oneapprove = oneapprove +") or ";
		}
		newquery = newquery + oneapprove;
	}
	if(newquery.length &gt; 0){
		newquery=newquery.substring(0,newquery.length - 3);
		query = "("+query+") and ("+ newquery +")";
	}
	if (file['in.id.string']) {
		query = '(' + query + ') and unique.key isin {' + file['in.id.string'] + '}';
	}
	return query;
}

function OperatorFullnameBroker () {
	this.cache = {};
}

OperatorFullnameBroker.prototype = {
	getFullnameByContactName: function (contactName) {
		if (!this.cache[contactName])
			if (!this.populateCache(contactName, 'contact.name'))
				return null;
		return this.cache[contactName];
	},
	
	populateCache: function (value, field) {
		var db = new SCFile('operator');
		if (RC_SUCCESS != db.doSelect(field + '="' + value + '"'))
			return false;
		this.cache[value] = db['full.name'];
		return true;
	}
}


function getApprovalInbox() {
    setExitType(NORMAL_EXIT);

    var File = lib.DBUtils.File;
    
	var currentOperator = vars['$lo.operator'];
	var defaultCurrency = currentOperator['display.currency.code'] || vars['$G.root.currency'];
	
	var digitAfterDecimal = getDigitAfterDecimal(defaultCurrency);
    
    var approvalModule = vars['$L.file']['approval.module'];
    
    var dateFrom = null;
    if (vars['$L.file']['date.from'] != null){
	    dateFrom = new XMLDate(vars['$L.file']['date.from']).getDatum().getText();
    }
    var dateTo = null;
    if (vars['$L.file']['date.to'] != null){
	    dateTo = new XMLDate(vars['$L.file']['date.to']).getDatum().getText();
    }
    
    try{
	    // Generate a query
    	var query = generateSRCApprovalInboxSql(approvalModule, dateFrom, dateTo);
    } catch (ex) {
    	setExitType(BAD_VALIDATION_EXIT);
    	setErrorMsg(ex);
    	return;
    }
    var company = currentOperator['company'];
    if (company == null) company = 'DEFAULT';
    
    // Prepare for delegated determination
    var ownSql = getApprovalInboxOwnSql();
    var delegateSql = lib.ApprovalDelegationGroups.getDelegationSql();
    var isDelegatedApproval = function(lApproval) // Return whether it is a delegated approval
    {
        if (delegateSql == '') return 'NO'; // If no delegattion definition, always return NO
        
        var delegated;
        if (system.functions.evaluate_query(ownSql, lApproval) == true) delegated = 'NO';
        else delegated = 'YES';
        
        return delegated;
    }

	//No need to return the custom fields
	
    var keyfields  = ['file.name','name','unique.key','component'];
    var fields  = ['file.name','name','unique.key','component','requested.by','sysmodtime'];
    var fieldsi = ['title', 'contact.name', 'category', 'cartId', 'svc.cost']; //incidents field
    var filedss = ['sdID','item.description','cost','requested.for','requested.for.fullname', 'recurring.cost', 'recurring.cost.interval']; //svcCartItem field
    var fieldsc = ['number', 'brief.description']; //cm3r field
    var fieldsq = ['number', 'brief.description', 'total.cost', 'requested.for']; //ocmq field
    var approvals = null;
    query = getFilterCondtion(vars['$L.file'],query);
	var sortableFields = {
		FileName: 'file.name',
		ApprovalType: 'name',
		UniqueKey: 'unique.key',
		Component: 'component',
		RequestedBy: 'requested.by',
		Date: 'sysmodtime',
	};
	var sortBy = sortableFields[vars['$L.file']['sortby']];

    var file = new File(
			'Approval', 
			fields, 
			sortBy, 
			vars['$L.file']['orderby']
		);
	
	if (!vars['$L.file']['in.id.string']) {
		var start = vars['$L.file']['start'], 
			pagesize = vars['$L.file']['pagesize'];
		if (!vars['$L.file']['start'])
			vars['$L.file']['start'] = 1;
		if (!vars['$L.file']['pagesize'])
			vars['$L.file']['pagesize'] = 10;
		file.setPaging(vars['$L.file']['start'], vars['$L.file']['pagesize']);
	}
	
	var totalCount = lib.ScAPI_RAD._count('Approval', query);
	vars['$L.file']._count = totalCount;
	
	approvals = file.getRecords(query);
	
    if(approvals == null) {
        vars['$L.file']['approvals'] = null;
		setExitType(NO_RECORD_EXIT);
		return;
    }
    var count = 0;
    var keyscount = 0;
    keyscount = vars['$L.file']['approvals'].length();
    
    
	var ofb = new OperatorFullnameBroker();
	
	var ocmqFileName = getQuoteFileName();

	approvals.each(function(approval) {			
		for(var i = 0; i &lt; fields.length; i++) {
			vars['$L.file']['approvals'][count][fields[i]] = approval[fields[i]];
		}
		
		// If it is a line item approval, set the parent ticket ID and item name(description).
		if(approval['file.name'] == 'svcCartItem') {
		
			var svcCartItemRecords = new File('svcCartItem', filedss).getRecords('cartItemId="' + approval['unique.key'] + '"');
			if(svcCartItemRecords != null) {
				var svcCartItemRecord = svcCartItemRecords.scFile;
				vars['$L.file']['approvals'][count]['price'] = svcCartItemRecord['cost'];
				vars['$L.file']['approvals'][count]['module'] = 'Service';
				vars['$L.file']['approvals'][count]['parent.ticket.id'] = svcCartItemRecord['sdID'];
				vars['$L.file']['approvals'][count]['item.name'] = svcCartItemRecord['item.description'];
				vars['$L.file']['approvals'][count]['requestedfor'] = svcCartItemRecord['requested.for'];
				vars['$L.file']['approvals'][count]['requested.for.fullname'] = svcCartItemRecord['requested.for.fullname'];
				if (svcCartItemRecord['recurring.cost']) {
					vars['$L.file']['approvals'][count]['recurring.costs.info'] = svcCartItemRecord['cartItemId']  + ":" + svcCartItemRecord['svcCatalogId'] + ":" + svcCartItemRecord['recurring.cost'] + ":" + svcCartItemRecord['recurring.cost.interval'];
				}
				
				// Give price and currency for line item and bundle.
				//remove currency conversion
				
				var requestRecords = new File('incidents', fieldsi).getRecords('incident.id="' + svcCartItemRecord['sdID'] + '"');
				if(requestRecords != null) {
					requestRecords.each(function(requestRecord) {
						vars['$L.file']['approvals'][count]['request.title'] = requestRecord['title'];
						
						//Below 4 line add by Fei, zhi-chao on 2010-08-27
					});
				}
			}

		}
		
		
		// If it is a interaction approval, set the interaction title and description.
		if(approval['file.name'] == 'incidents') {
			var requestRecords = _queryIncidents(approval['unique.key'], fieldsi, vars['$L.file']['include.recurring.cost']);
			if(requestRecords != null) {
				var svcCartItem_Recurring_Cost_Info = "";
				requestRecords.each(function(requestRecord) {
					vars['$L.file']['approvals'][count]['price'] = requestRecord['svc.cost'];
					vars['$L.file']['approvals'][count]['module'] = 'Service';
					vars['$L.file']['approvals'][count]['request.title'] = requestRecord['title'];
					
					vars['$L.file']['approvals'][count]['requestedfor'] = requestRecord['contact.name'];//add by Fei, Zhi-Chao on 2010-08-27
					vars['$L.file']['approvals'][count]['requested.for.fullname'] = ofb.getFullnameByContactName(requestRecord['contact.name']);
					if (requestRecord[CARTITEM_TABLE+'.recurring.cost']) {
						svcCartItem_Recurring_Cost_Info += requestRecord[CARTITEM_TABLE+'.cartItemId'] + ":" 
							+ requestRecord[CARTITEM_TABLE+'.svcCatalogId'] + ":" 
							+ requestRecord[CARTITEM_TABLE+'.recurring.cost'] + ":" 
							+ requestRecord[CARTITEM_TABLE+'.recurring.cost.interval'];
					}
					if (svcCartItem_Recurring_Cost_Info != "") {
						svcCartItem_Recurring_Cost_Info += ";";
					}
				});
				if (svcCartItem_Recurring_Cost_Info != "") {
					vars['$L.file']['approvals'][count]['recurring.costs.info'] = svcCartItem_Recurring_Cost_Info;
				}
			}
			
		}
		
	
		// If it is a change approval, retrieve change info
		if(approval['file.name'] == 'cm3r') {
			var changeRecords = new File('cm3r', fieldsc).getRecords('number="' + approval['unique.key'] + '"');
			if(changeRecords != null) {
				changeRecords.each(function(changeRecord) {
					vars['$L.file']['approvals'][count]['module'] = 'Change';
					vars['$L.file']['approvals'][count]['request.title'] = changeRecord['brief.description'];

				});
			}
		}
		
		
		// If it is a interaction approval, retrieve quote info.
		if(approval['file.name'] == ocmqFileName) {
		
			var quoteRecords = new File(ocmqFileName, fieldsq).getRecords('number="' + approval['unique.key'] + '"');
			if(quoteRecords != null) {
				quoteRecords.each(function(quoteRecord) {
					vars['$L.file']['approvals'][count]['price'] = quoteRecord['total.cost'];
					vars['$L.file']['approvals'][count]['module'] = 'Quote';
					vars['$L.file']['approvals'][count]['request.title'] = quoteRecord['brief.description'];
					
					vars['$L.file']['approvals'][count]['requestedfor'] = quoteRecord['requested.for'];
					vars['$L.file']['approvals'][count]['requested.for.fullname'] = ofb.getFullnameByContactName(quoteRecord['requested.for']);
					
				});
			}
			
		}
		
		
		// Is it a delegate approval
		var id = scmsg(approval['file.name'], 'tablename') + ' ' + approval['unique.key'];
		vars['$L.file']['approvals'][count]['record'] = id;
		vars['$L.file']['approvals'][count]['modtime'] = approval['sysmodtime'];
		vars['$L.file']['approvals'][count]['isDelegateApproval'] = isDelegatedApproval(approval);
		count++;
	});

	if(keyscount &gt; 0 &amp;&amp; keyscount &gt; count)
		for(var i = count; i &lt; keyscount; i++)
			vars['$L.file']['approvals'][i] = null;
	
}

function _queryIncidents(incidentId, incident_fields, is_include_recurring_cost) {
	var File = lib.DBUtils.File;
	if (is_include_recurring_cost) {
		return new File('incidents').getRecords(_getIncidentsWithCartItemSQL(incidentId, incident_fields));
	} else {
		return new File('incidents', incident_fields).getRecords('incident.id="' + incidentId + '"');
	}
}

function _getIncidentsWithCartItemSQL(incidentId, incident_fields) {
	var cartitem_fields = ['cartItemId', 'svcCatalogId', 'recurring.cost', 'recurring.cost.interval'];
 	var select_incident_phrase = "";
 	if (incident_fields) {
 		for (var i=0; i&lt;incident_fields.length;i++) {
	 		select_incident_phrase += INCIDENT_TABLE + "." + incident_fields[i] + ",";
	 	}
 	}
 	if (!select_incident_phrase) {
 		select_incident_phrase = INCIDENT_TABLE + ".*,";
 	}
 	var select_cartitem_phrase = "";
 	for (var i=0; i&lt;cartitem_fields.length; i++) {
 		select_cartitem_phrase += CARTITEM_TABLE + "." + cartitem_fields[i];
 		if (i&lt;cartitem_fields.length-1) {
 			select_cartitem_phrase += ",";
 		}
 	}
 	var sql = "SELECT " + select_incident_phrase + " "
 		+ select_cartitem_phrase
 		+" FROM incidents "+ INCIDENT_TABLE
 		+ " left outer join "
 		+ "svcCartItem " + CARTITEM_TABLE 
 		+ " on ( " + INCIDENT_TABLE + ".cartId = " + CARTITEM_TABLE + ".cartId ) WHERE " + INCIDENT_TABLE + ".incident.id=\"%s\""; 
 	sql = queryBuilder(sql, [incidentId]);
 	return sql;
}

function getServiceType(incidents){
	var serviceType = null;
	if (incidents['category'] == 'service catalog') {
	    serviceType = 'service catalog';
	} else { // if category in not "service catalog", determine its type need to know whether it related to one cart
	    if (incidents['source.service'] == 'support catalog') serviceType = 'support catalog';
	    else serviceType = 'self-service';
	}
	return serviceType;
}


function denyApproval() {
    setExitType(NORMAL_EXIT);
    var returnCode;
    var File = lib.DBUtils.File;
    var file = vars['$L.file'];
    var id = file['unique.key'];
    var fileName = file['file.name'];
    var approvalType = file['name'];
    
    var comments = file['comments'];
    var component = file['component'];
    if(component == null)
    	component = 'NULL';
    else
    	component = '"' + component + '"';
    var originalUpdateTime = file['sysmodtime']; 
	 //check if approvals are up2date or not, if not up2date, set Exit Type:INCIDENT_NOT_UPDATE2DATE with returnCode:999, then return;
    if (_getIfApprovalModLaterThanTime( id, fileName,approvalType,originalUpdateTime,component)){
       setExitType(CURRENTRECORD_NOT_UPDATE2DATE);
       return;
       }
	//Validate comments
    if(comments.length() == 1 &amp;&amp; comments[0] == null) {
    	setExitType(BAD_VALIDATION_EXIT);
    	var returnCode;
    	system.functions.rtecall('msg', returnCode, system.functions.scmsg(130, 'SvcCatAPI'));
    	return;
    }
    
    vars['$denyAllComment'] = comments;
    
   
    
    var query = 'unique.key="' + id + '" and file.name="' + fileName + '" and name="' + approvalType + '" and component=' + component;

    
    var approvals = new File('Approval').getRecords(query);

    if(approvals == null) {
		setExitType(NO_RECORD_EXIT);
		return;
    }
    
    if(new File('Approval').getRecords(generateApprovalInboxSql() + ' and ' + query) == null) {
    	setExitType(BAD_VALIDATION_EXIT);
    	return;
    }
    else {
    	vars['$svcCatalog.can.approve'] = true;
    	vars['$fg.approval'] = false;
    }
    
    approvals.each(function(approval) {
    	returnCode = approval.doAction('deny');
        if(returnCode == 3) {
	      setExitType(CURRENTRECORD_LOCKED);
	      return;
	    }
	    if(returnCode == 28) {
	        setExitType(BAD_VALIDATION_EXIT);
	        return;
	    }
	    
    });
}

function approveApproval() {
    setExitType(NORMAL_EXIT);
    var returnCode;
    var File = lib.DBUtils.File;
    var file = vars['$L.file'];
    var id = file['unique.key'];
    var fileName = file['file.name'];
    var approvalType = file['name'];
    var component = file['component'];
    if(component == null)
    	component = 'NULL';
    else
    	component = '"' + component + '"';
    
    var comments = file['comments'];
    var originalUpdateTime = file['sysmodtime']; 
     //check if approvals are up2date or not, if not up2date, set Exit Type:INCIDENT_NOT_UPDATE2DATE with returnCode:999, then return;
    if (_getIfApprovalModLaterThanTime( id, fileName,approvalType,originalUpdateTime,component)){
       setExitType(CURRENTRECORD_NOT_UPDATE2DATE);
       return;
       }
	//Validate comments
    if(comments.length() == 1 &amp;&amp; comments[0] == null) {
    	comments = [""];
    }
    vars['$denyAllComment'] = comments;
    
    var query = 'unique.key="' + id + '" and file.name="' + fileName + '" and name="' + approvalType + '" and component=' + component;
    
    var approvals = new File('Approval').getRecords(query);

    if(approvals == null) {
		setExitType(NO_RECORD_EXIT);
		return;
    }
    
    if(new File('Approval').getRecords(generateApprovalInboxSql() + ' and ' + query) == null) {
    	setExitType(BAD_VALIDATION_EXIT);
    	return;
    }
    else {
    	vars['$svcCatalog.can.approve'] = true;
    	vars['$fg.approval'] = false;
    }
    
    approvals.each(function(approval) {
    	  returnCode = approval.doAction('approve');
    	  if(returnCode == 3) {
	        setExitType(CURRENTRECORD_LOCKED);
	        return;
	    }
	     if(returnCode == 28) {
	        setExitType(BAD_VALIDATION_EXIT);
	        return;
	    }
    });
}

function getCurrentApprovals() {
    setExitType(NORMAL_EXIT);
    
    var File = lib.DBUtils.File;
    var id = vars['$L.file']['id'];
    
    var interactions = new File('incidents').getRecords('incident.id="' + id + '"');
    
    if(interactions == null) {
		setExitType(NO_RECORD_EXIT);
		return;
    }

    lib.ApprovalIntegration.buildApprovalInfoVar('incidents', id, 'SRC');
    
    var sourceArrayList = [vars.$L_aplItem_desc, vars.$L_aplItem_class, vars.$L_aplItem_approver, vars.$L_aplItem_level, vars.$L_aplItem_status, vars.$L_aplItem_date, vars.$L_aplItem_sysmodtime];
    var targetFieldList = ['desc', 'class', 'approver', 'level', 'status', 'dateStr','sysmodtime'];
    
   
	// Return the unique key list in response.
	var uniqueKeyList = ['file.name', 'unique.key', 'name', 'component'];
	for(var i = 0; i &lt; vars['$L.aplItem.tag'].length(); i++) {
		for(var j = 0; j &lt; uniqueKeyList.length; j++) {
		
			vars['$L.file']['ApprovalStatus'][i][uniqueKeyList[j]] = lib.Utilities.getKeyValueFromTag(vars['$L.aplItem.tag'][i], uniqueKeyList[j]);
		}
	}
	 //convert from string to date type
    for (var j = 0; j &lt; vars.$L_aplItem_date.length(); j ++) {
    	vars.$L_aplItem_date[j] = system.functions.val(vars.$L_aplItem_date[j],3);
    	vars.$L_aplItem_date[j] = new SCDatum(vars.$L_aplItem_date[j]);
    }
    for (var j = 0; j &lt; vars.$L_aplItem_sysmodtime.length(); j ++) {    	
    	vars.$L_aplItem_sysmodtime[j] = system.functions.val(vars.$L_aplItem_sysmodtime[j],3); 
    	vars.$L_aplItem_sysmodtime[j] = new SCDatum(vars.$L_aplItem_sysmodtime[j]);    	
    }	   
    
	
	for(var i = 0; i &lt; sourceArrayList.length; i++) {
		_arrayCopy(sourceArrayList[i], vars['$L.file']['ApprovalStatus'], targetFieldList[i]);	
		}
	
	for(var i = 0; i &lt; vars['$L.file']['ApprovalStatus'].length(); i++) {
		vars['$L.file']['ApprovalStatus'][i]['approver.fullname'] = _getFullnameByName(vars['$L.file']['ApprovalStatus'][i]['approver']);
	}
	
	//remove comments from the API getCurrentApproval
       
}


function getApprovalLogs() {
    setExitType(NORMAL_EXIT);
    
    var File = lib.DBUtils.File;
    var id = vars['$L.file']['id'];
    if (id == null) {
        setExitType(BAD_VALIDATION_EXIT);
        setErrorMsg(lib.ScAPI_Util.getMessage(138)); 
		return;
    }
    var filename = "";
    var copyFields = ['action','component','current.phase','date','file.name','group','name','operator.fullname','unique.key'];
    var cnt = 0;
    
    // Get directly logs
    var dirLogs = new File('ApprovalLog').getRecords('unique.key="' + id + '"');
    if (dirLogs != null) {
        dirLogs.each(function (dirLog) {
            for (var i = 0; i &lt; copyFields.length; i++) {
                vars['$L.file']['ApprovalLogs'][cnt][copyFields[i]] = dirLog[copyFields[i]];
                filename = dirLog['file.name'];
            }
            
            cnt++;
        });
    }
    
    // Get related logs
    if (filename == "incidents") {
        var cartItems = new File('svcCartItem').getRecords('sdID="' + id + '"');
        if (cartItems != null) {
            cartItems.each(function (cartItem) {
                var relLogs = new File('ApprovalLog').getRecords('file.name="svcCartItem" and unique.key="' + cartItem['cartItemId'] + '"');
                if (relLogs != null) {
                    relLogs.each(function (relLog) {
                        for (var i = 0; i &lt; copyFields.length; i++) {
                            vars['$L.file']['ApprovalLogs'][cnt][copyFields[i]] = relLog[copyFields[i]];
                        }
                        
                        vars['$L.file']['ApprovalLogs'][cnt]['item.name'] = cartItem['item.description'];
                        cnt++;
                    });
                }
            });
        }
    }
    
    if (cnt == 0) {
        setExitType(NO_RECORD_EXIT);
        setErrorMsg(lib.ScAPI_Util.getMessage(141, [system.functions.scmsg(filename, "tablename"),id])); 
		return;
    }
}

function _arrayCopy(sourceArray, targetArrayStructure, fieldName) {
	for(var i = 0; i &lt; sourceArray.length(); i++) {
		targetArrayStructure[i][fieldName] = sourceArray[i];
	}
}

function _getFullnameByName(approverName) {
	
	var operator = select('operator', 'name="' + approverName + '"', new Array('full.name'));
	
	if(operator == null)
		return approverName;
	
	return operator['full.name'];
}

function getApprovalInboxOwnSql()
{
    var lOperator = vars['$lo.operator']['name'];
    
    
    var cm3rGroups = getChangeGroups();
    var ocmqGroups = getQuoteGroups();
  
    var smGroups   = vars['$G.sm.environment']['approval.groups'].toArray();
    if (system.functions.index(lOperator, cm3rGroups) == 0) cm3rGroups.push(lOperator);
    if (system.functions.index(lOperator, ocmqGroups) == 0) ocmqGroups.push(lOperator);
    if (system.functions.index(lOperator, smGroups) == 0) smGroups.push(lOperator);
    
    var changeSql   = 'file.name="cm3r" and current.pending.groups isin ' + system.functions.str(cm3rGroups);
    var requestSql  = 'file.name="'+getQuoteFileName()+'" and current.pending.groups isin ' + system.functions.str(ocmqGroups);
    var sdSql       = 'file.name="incidents" and current.pending.groups isin ' + system.functions.str(smGroups);
    var cartItemSql = 'file.name="svcCartItem" and current.pending.groups isin ' + system.functions.str(smGroups);
    
    var customSql = lib.ApprovalCustomPlugin.appendCustomApprovalSql();
    var sql = '(' + changeSql + ') or (' + requestSql + ') or (' + sdSql + ') or (' + cartItemSql + ')';
    if (customSql) sql += customSql;
    return sql;
}

function generateApprovalInboxSql() {
    var sql = 'approval.status="pending" and (approvals.record=NULL or approvals.record=true)';
    var ownSql = getApprovalInboxOwnSql();
    var delegateSql = lib.ApprovalDelegationGroups.getDelegationSql();
    
    if (delegateSql) sql += ' and (' + ownSql + delegateSql + ')';
    else sql += ' and (' + ownSql + ')';
    
    return sql;
}

function generateSRCApprovalInboxSql(approvalModule, dateFrom, dateTo) {
	var sql;
	var dateClause = "";
	if (dateFrom != null){
		dateClause += " and sysmodtime &gt;= '" + dateFrom + "'";
	}
	if (dateTo != null){
		dateClause += " and sysmodtime &lt;= '" + dateTo + "'";
	}
	
	var quoteFileName = getQuoteFileName();
	
	if (approvalModule == null){
		sql = '(file.name isin {"svcCartItem","incidents","cm3r","'+quoteFileName+'"})';
	} else if (approvalModule == 'Change') {
		sql = 'file.name="cm3r"';
	} else if (approvalModule == 'Quote') {
		sql = 'file.name="' + quoteFileName + '"';
	} else if (approvalModule == 'Service'){
		sql = '(file.name isin {"svcCartItem","incidents"})';
	} else {
		throw lib.ScAPI_Util.getMessage(181)
	}
	
	sql += ' and (' + generateApprovalInboxSql() + ')';
	
	sql += dateClause;
	return sql;
}

function getAllSrcConfig(company) {
	var query = 'company="' + company + '"';
	var configs = select('svcSrcConfig', query);
	
	if (!configs) {
		query = "company=\"DEFAULT\"";
		configs = select('svcSrcConfig', query);
	}
	
	var arrConfig = new Array();
	if (configs != null) {
		do {
			var tempConfig = new srcConfig(configs);
			arrConfig[configs['screen.type']] = tempConfig;
			result = configs.getNext();
		} while (result == RC_SUCCESS);
	}
	
	return arrConfig;
}

function getAllAddtionalFields(arrConfig) {
	var fields = new Array();
	for (var obj in arrConfig){
		fields = unionArray(arrConfig[obj]['fields'], fields);
	}
	return fields;
}

function unionArray(arrayA, arrayB) {
    for (var i = 0; i &lt; arrayA.length; ++i) {
        var inArrID = false;
        for (var j = 0; j &lt; arrayB.length; ++j) {
            if (arrayB[j] == arrayA[i]) {
                inArrID = true;
                break;
            }
        }
        
        if (!inArrID) {
            arrayB.push(arrayA[i]);
        }
    }
    return arrayB;
}

function srcConfig(config){
	this.screenType = config['screen.type'];
	this.fields= config['fields'].toArray();
}

function getInteractionComments(){
    setExitType(NORMAL_EXIT);
    
    var File = lib.DBUtils.File;
    var id = vars['$L.file']['id'];
    if (id == null) {
        setExitType(BAD_VALIDATION_EXIT);
        setErrorMsg(lib.ScAPI_Util.getMessage(138)); 
		return;
    }
    
    var filename = "incidents"; vars['$L.file']['filename'] = filename; // Use incidents as default by now. vars['$L.file']['filename']
    var copyFields = ['action','component','current.phase','date','file.name','group','name','operator.fullname','unique.key'];
    var cnt = 0;
    
    // Get directly logs
    var dirLogs = new File('ApprovalLog').getRecords('file.name="' + filename + '" and unique.key="' + id + '"');
    if (dirLogs != null) {
        dirLogs.each(function (dirLog) {
            for (var i = 0; i &lt; copyFields.length; i++) {
                vars['$L.file']['ApprovalLogs'][cnt][copyFields[i]] = dirLog[copyFields[i]];
            }
            
            vars['$L.file']['ApprovalLogs'][cnt]['comments'] = lib.ScAPI_Util.covertArrayToStringInLine(dirLog['comments']);
            cnt++;
        });
    }
    
    // Get related logs
    if (filename == "incidents") {
        var cartItems = new File('svcCartItem').getRecords('sdID="' + id + '"');
        if (cartItems != null) {
            cartItems.each(function (cartItem) {
                var relLogs = new File('ApprovalLog').getRecords('file.name="svcCartItem" and unique.key="' + cartItem['cartItemId'] + '"');
                if (relLogs != null) {
                    relLogs.each(function (relLog) {
                        for (var i = 0; i &lt; copyFields.length; i++) {
                            vars['$L.file']['ApprovalLogs'][cnt][copyFields[i]] = relLog[copyFields[i]];
                        }
                        
                        vars['$L.file']['ApprovalLogs'][cnt]['item.name'] = cartItem['item.description'];
                        vars['$L.file']['ApprovalLogs'][cnt]['comments'] = lib.ScAPI_Util.covertArrayToStringInLine(relLog['comments']);
                        cnt++;
                    });
                }
            });
        }
    }
    
    
    var incidentRecords = new File("incidents", ['opened.by.uid', 'contact.name']).getRecords('incident.id=\"' + id + '\"');
    var requestor;
    var openedByUid;
    if (incidentRecords)
    {
    	requestor = incidentRecords.scFile['contact.name'];
    	openedByUid = incidentRecords.scFile['opened.by.uid'];
    }

    
    //get activities
    var xml = new XML();
    var idx=0;
    var cpFields = ['thenumber','number','type','datestamp','operator'];
    var acts = new File('activityservicemgt').getRecords('number="' + id + '" and cust.visible=true');
    
    var currentOperator = getCurrentOperator();
    
    
    if(acts!=null){
    	acts.each(function(act){
    		var operatorName = _getFullnameByName(act['operator']);
    		for(var i=0;i&lt;cpFields.length;i++){
    			vars['$L.file']['ActivityLogs'][idx][cpFields[i]]=act[cpFields[i]];

    			vars['$L.file']['ActivityLogs'][idx]['operatorfullname']=operatorName;
    		}
    		//TODO: compile desction into xml stream.
    		var descSize = system.functions.lng(act['description']);
    		xml.setContent("&lt;description/&gt;");
    		for(var i=0;i&lt;descSize;i++){
    			var nodeDesc = xml.createNode(1,"description");
    			if(act['description'][i] != null){
    				nodeDesc.setValue(act['description'][i]);
    			}else{
    				nodeDesc.setValue("");
    			}
    			xml.appendNode(nodeDesc);
    		}
    		vars['$L.file']['ActivityLogs'][idx]['descriptions'] = xml.toXMLString();

    		if (currentOperator['name'] == openedByUid) {
    			if (act['unread'] &amp;&amp; act['operator'] != currentOperator['name']) { 
    				vars['$L.file']['ActivityLogs'][idx]['unread'] = true;
	    			act['unread'] = false;
	    			act.doUpdate();
    			}
    		}
    		
       		idx++;
    	});
    
    }
    
    if (cnt == 0 &amp;&amp; idx == 0) {
        setExitType(NO_RECORD_EXIT);
        setErrorMsg(lib.ScAPI_Util.getMessage(141, [system.functions.scmsg(filename, "tablename"),id])); 
		return;
    }
    
    //get approval comments
    var fApproval = new SCFile("Approval");
    var lFilename = "incidents";
    var classTmp = "Request";
    var vComments = new Array();
    var fRlt1 = fApproval.doSelect("file.name=\"" + lFilename + "\" and unique.key=\"" + id + "\"");
    while (fRlt1 == RC_SUCCESS)
    {
        // integrate comments
        lib.ApprovalIntegration.buildNewComments(vComments, fApproval.comments, classTmp, 'SRC');
        
        fRlt1 = fApproval.getNext();
    }
    // get class Line Item and its components
    if (lFilename == "incidents") // only support table incidents
    {
        var fCartItem = new SCFile("svcCartItem");
        var fRlt2 = fCartItem.doSelect("sdID=\"" + id + "\"");
        while (fRlt2 == RC_SUCCESS)
        {
            var fApprovalItem = new SCFile("Approval");
            var fRlt3 = fApprovalItem.doSelect("file.name=\"" + system.functions.filename(fCartItem) + 
                         "\" and unique.key=\"" + fCartItem.cartItemId + "\"");
            while (fRlt3 == RC_SUCCESS)
            {
                var classTmp = fApprovalItem.component;
                if (classTmp == null) classTmp = fCartItem.item_description;
           
	            // integrate comments
                lib.ApprovalIntegration.buildNewComments(vComments, fApprovalItem.comments, classTmp, 'SRC');
	            
	            fRlt3 = fApprovalItem.getNext();
            }
            
            fRlt2 = fCartItem.getNext();
        }
    }
    
    vars['$L.file']['ApprovalComments'] = vComments;
    
}</script>
    <package type="string">ScAPI</package>
    <sysmodtime type="dateTime">07/16/17 17:01:43</sysmodtime>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodcount type="decimal">0</sysmodcount>
    <prgnsystem NullValue="1" type="boolean"/>
    <sysrestricted NullValue="1" type="boolean"/>
  </record>
</recordset>
