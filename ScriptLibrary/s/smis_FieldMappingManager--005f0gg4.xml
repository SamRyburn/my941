<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="ScriptLibrary">
  <record id="name=&quot;smis_FieldMappingManager&quot;" recordid="smis_FieldMappingManager">
    <name type="string">smis_FieldMappingManager</name>
    <script type="string">/******************************************************
* Module Name: SMIS Field mapping manager
* Function: validate mapping, including fields exist, mapping direction, value mapping, jscallback grammer
* Author: Dianel Woo
* Version: 1.00
* Creation Date: spr, 2009
*******************************************************/

function validateMapping(mapping,config) {

	if (mapping == null) throw "Mapping is not passed in.";
		
	if (config == null) throw "Integration instance is not passed in.";

	var msg = _validateFieldExists(mapping, config);
	if (msg != null) return msg;
	
	msg = _validateFieldMappingDirection(mapping);
	if (msg != null) return msg;	

	msg = _validateValueMappingExists(mapping);
	if (msg != null) return msg;	

	
	return null;
}

function _validateFieldExists(mapping, config) {
	//Field must exist, in instance configuration or (TODO: defined in adapter.getFields())
	for (var i in mapping.fieldMapping) {
		var row = parseInt(i)+1;
		
		var fieldMapping = mapping.fieldMapping[i];

		if (_checkAllFieldNull(fieldMapping)) continue;
		
		if (fieldMapping.SMField == null &amp;&amp; fieldMapping.EPField == null) {
			return lib.smis_CommonLib.msg("14",[row]);
		}
		
		
		var msg = null;
		msg = __checkField1InConfig(fieldMapping.SMField, config);		
		if (msg != null) return msg;		
		msg = __checkField2InConfig(fieldMapping.EPField, config);		
		if (msg != null) return msg;
		
	}
	return null;	
}



function _validateFieldMappingDirection(mapping) {
	//Empty target mapping eg, field2 is empty, direction is -&gt;
	for (var i in mapping.fieldMapping) {
		var fieldMapping = mapping.fieldMapping[i];
		var row = 1 + parseInt(i);
		if (fieldMapping.direction == lib.smis_Constants.MAPPING_DIRECTION_BOTH()) {
			if (fieldMapping.SMField == null) {
				return lib.smis_CommonLib.msg("15",[row]);
			}
			if (fieldMapping.EPField == null) {
				return lib.smis_CommonLib.msg("16",[row]);
			}			
		} else if (fieldMapping.direction == lib.smis_Constants.MAPPING_DIRECTION_LEFTRIGHT()) {
			if (fieldMapping.EPField == null) {
				return lib.smis_CommonLib.msg("16",[row]);;
			}		
		} else if (fieldMapping.direction == lib.smis_Constants.MAPPING_DIRECTION_RIGHTLEFT()) {
			if (fieldMapping.SMField == null) {
				return lib.smis_CommonLib.msg("15",[row]);
			}
		} else if (_checkAllFieldNull(fieldMapping)) {//skip empty lines
			continue;
		} else {
			return lib.smis_CommonLib.msg("17",[row]);
		}
	}
	return null;	
}

function _validateValueMappingExists(mapping) {
	//Value mapping group must exist
	for (var i in mapping.fieldMapping) {
		var fieldMapping = mapping.fieldMapping[i];
		if (fieldMapping.valueMappingGroup != null) {
			var msg = __checkValueMappingGroup(fieldMapping.valueMappingGroup, mapping.valueMapping, parseInt(i)+1);
			if (msg != null) return msg;
		}		
	}
	return null;	
}

function _checkAllFieldNull(fieldMapping) {
	for (var i in fieldMapping) {
		if (fieldMapping[i] != null) return false;
	}
	return true;
}

function __checkField1InConfig(field, config) {
	if (field != null) {	
		for (var i in config.SMFields) {		
			if (field == config.SMFields[i].SMFieldName || field == config.SMFields[i].SMAlias) {			
				return null;
			}	
		}
		
		return lib.smis_CommonLib.msg("18",[lib.smis_CommonLib.msg("30"),field]);
	}	
	
}

function __checkField2InConfig(field, config) {

	
	if (field != null) {
		for (var i in config.EPFields) {		
			if (field == config.EPFields[i].EPFieldName || field == config.EPFields[i].EPAlias) {			
				return null;				
			}	
		}
		
		return lib.smis_CommonLib.msg("18",[lib.smis_CommonLib.msg("36"),field]);
	}	

}

function __checkValueMappingGroup(valueMappingGroup, valueMapping, row) {
	for (var i in valueMapping) {
		if (valueMappingGroup == valueMapping[i].valueMappingGroupID) {
			return null;
		}
	}
	return lib.smis_CommonLib.msg("19",[valueMappingGroup,row]);
}


function checkJSCallbackGrammar(config, params) {
	var patt = /((sm|ep|param|context|vars)\.([\w|\$]+[\w|\.|_]+))/g;
	var pattBracket = /((sm|ep|param|context|vars)\[['|"|\\'|\\"]([\w|\$]+[\w|\.|_]+)['|"|\\'|\\"]\])/g;
	
	var placeholder = /\$\{([^(\$\{)]*)\}/g;
	
    var msg = null;
    var evalFunc = function(match, $1, $2, $3) {
		try {
			var objName = $2;
			var fieldName = $3;
			if (objName == "sm") {
				msg = __checkField1InConfig(fieldName, config);
			} else if (objName == "ep") {
				msg = __checkField2InConfig(fieldName, config);
			}
			return ""+Math.ceil(Math.random()*10000);
		} catch(ex) {
			return "";
		}
	};
	
    var phFunc = function(match, $1) {
		try {
			fieldValue = eval($1);
			if (fieldValue == undefined) return "";
			else return fieldValue;
		} catch(ex) {
			print("ex: " + ex);
			return "";
		}
	};

	for (var i = 0; i &lt; lib.smis_CommonLib.arrayLen(params); i++) {
		funcStr = params[i];
		if (funcStr == null) continue;
		
		funcStr = funcStr.replace(patt, evalFunc); 
		if (msg != null) return msg;
		
		funcStr = funcStr.replace(pattBracket, evalFunc);
		if (msg != null) return msg;
		
		funcStr = funcStr.replace(placeholder, phFunc); 
		
		try {	
			var ret = eval(funcStr);
			return null;
		} catch (e) {
			return lib.smis_CommonLib.msg("20",[params[i]]);
			
		}

	}
}


</script>
    <package type="string">smisplatform</package>
    <sysmodtime type="dateTime">07/16/17 17:01:44</sysmodtime>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodcount type="decimal">0</sysmodcount>
    <prgnsystem NullValue="1" type="boolean"/>
    <sysrestricted NullValue="1" type="boolean"/>
  </record>
</recordset>
