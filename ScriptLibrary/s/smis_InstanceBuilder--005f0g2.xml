<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="ScriptLibrary">
  <record id="name=&quot;smis_InstanceBuilder&quot;" recordid="smis_InstanceBuilder">
    <name type="string">smis_InstanceBuilder</name>
    <script type="string">/******************************************************
* Module Name: SMIS InstanceConfiguration
* Function: The instance of the Configuration
* Author: Tian, ShaoQin
* Version: 1.10
* Creation Date: Dec 25, 2013
*******************************************************/



var Class = lib.smis_Prototype.getClass();

var InstanceBuilderClass = Class.create({
	
	instance: null,
	mapping: null,
	registry: null,
	action: null,
	
	initialize: function(action, intId) {
    	this.instance = new SCFile("SMISConfiguration");
    	this.mapping = new SCFile("SMISFieldMapping");
    	this.registry = new SCFile("SMISRegistry");

    	this.action = action;
    	if (this.action == "edit") {
    		this.instance.doSelect("intId=\"" + intId + "\"");
    		this.mapping.doSelect("intId=\"" + intId + "\"");
    		this.registry.doSelect("name=\"" + this.instance.template + "\"");
    		// sync custom param format
    		this.instance.custom_param_format = this.registry.custom_param_format;
    	} else {
    		this.instance.intId = generateInstanceId();
    		this.mapping.intId = this.instance.intId;
    	}
   	},
  	
  	buildFromTemplate: function(template, importMapping) {

    	var ret = this.registry.doSelect("name=\"" + template + "\"");
    	
    	copyGeneralFromTemplate(this.instance, this.registry);
    	
    	if (importMapping) {
    		
    		copyMappingFromTemplate(this.mapping, this.registry, true);
    	}
    	
    	return this;
  	},

  	buildFromTemplateById: function(templateId, importMapping) {

    	this.registry.doSelect("id=\"" + templateId + "\"");
    	
    	this._copyGeneralFromTemplate();
    	
    	if (importMapping) {
    		
    		copyMappingFromTemplate(this.mapping, this.registry, true);
    	}
    	
    	return this;
  	},
  	
  	buildGeneralInfo: function(detail) {
    	for (var p in detail) {
    		if (p == "description")
    			lib.smis_CommonLib.convertStringToArray(detail[p], this.instance[p], 2048);
    		else
    			this.instance[p] = detail[p];
    	}
    	return this;
  	},
  	
  	
  	buildParameters: function(paramInfo) {
  		this.instance.paramInfo = [];
  		for (var i = 0; i &lt; paramInfo.length; i++) {
  			this.instance.paramInfo[i].paramName = paramInfo[i][0];
  			this.instance.paramInfo[i].paramValue = paramInfo[i][1];
  			this.instance.paramInfo[i].paramType = paramInfo[i][2];
  			this.instance.paramInfo[i].paramCategory = paramInfo[i][3];
  			this.instance.paramInfo[i].paramDesc = paramInfo[i][4];
  			this.instance.paramInfo[i].ispwd = paramInfo[i][5];
  		}
  		return this;
  	},
  	
  	buildSMFields: function(fields) {
  		this.instance.SMFields = [];
  		for (var i = 0; i &lt; fields.length; i++) {
  			this.instance.SMFields[i].SMFieldName = fields[i][0];
  			this.instance.SMFields[i].SMFieldType = fields[i][1];
  			this.instance.SMFields[i].SMFieldDesc = fields[i][2];
  			if (fields[i].length == 4) {
  				this.instance.SMFields[i].SMAlias = fields[i][3];
  			} else {
  				this.instance.SMFields[i].SMAlias = fields[i][0];
  			}
  		}
  		return this;
  	},
  	
  	buildEPFields: function(fields) {
  		this.instance.EPFields = [];
  		for (var i = 0; i &lt; fields.length; i++) {
  			this.instance.EPFields[i].EPFieldName = fields[i][0];
  			this.instance.EPFields[i].EPFieldType = fields[i][1];
  			this.instance.EPFields[i].EPFieldDesc = fields[i][2];
  			if (fields[i].length == 4) {
  				this.instance.EPFields[i].EPAlias = fields[i][3];
  			} else {
  				this.instance.EPFields[i].EPAlias = fields[i][0];
  			}
  		}
  		return this;
  	},
  	
  	buildValueMapping: function(valueMapping) {
  		this.mapping.valueMapping = [];
  		for (var i = 0; i &lt; valueMapping.length; i++) {
  			this.mapping.valueMapping[i].SMValue = valueMapping[i][0];
  			this.mapping.valueMapping[i].EPValue = valueMapping[i][1];
  			this.mapping.valueMapping[i].valueMappingGroupID = valueMapping[i][2];
  			this.mapping.valueMapping[i].VMDescription = valueMapping[i][3];
  			this.mapping.valueMapping[i].condition = null;
  			if (valueMapping[i].length == 5) {
  				this.mapping.valueMapping[i].condition = valueMapping[i][4];
  			}
			if (this.mapping.valueMapping[i].condition == null) {
  				this.mapping.valueMapping[i].condition = "true";
  			}
  		}
  		return this;
  	},
  	
  	buildFieldMapping: function(fieldMapping) {
  		this.mapping.fieldMapping = [];
  		for (var i = 0; i &lt; fieldMapping.length; i++) {
  			this.mapping.fieldMapping[i].SMField = fieldMapping[i][0];
  			this.mapping.fieldMapping[i].EPField = fieldMapping[i][1];
  			this.mapping.fieldMapping[i].direction = fieldMapping[i][2];
  			this.mapping.fieldMapping[i].SMDefValue = fieldMapping[i][3];
  			this.mapping.fieldMapping[i].SMjscallback = fieldMapping[i][4];
  			this.mapping.fieldMapping[i].EPDefValue = fieldMapping[i][5];
  			this.mapping.fieldMapping[i].EPjscallback = fieldMapping[i][6];
  			this.mapping.fieldMapping[i].valueMappingGroup = fieldMapping[i][7];
  			this.mapping.fieldMapping[i].FMDescription = fieldMapping[i][8];
  		}
  		return this;
  	},
  	
  	buildPreScript: function(script) {
  		this.mapping.preScript = script;
  		return this;
  	},

  	buildMappingScript: function(script) {
  		this.mapping.mappingScript = script;
  		return this;
  	},
  	
  	add: function() {
  		var result = true;
  		
  		var ret = this.instance.doInsert();
  		if (ret == RC_SUCCESS) {
  			print("smis instance created successful.");
  			this.mapping.intId = this.instance.intId;
  			var retFM = this.mapping.doInsert();
  			if (retFM == RC_SUCCESS) {
  				print("smis mapping created successful.");
  			} else {
  				result = false;
  				print("failed to create smis mapping: " + RCtoString(retFM));
  			}
  		} else {
  			result = false;
  			print("failed to create smis instance: " + RCtoString(ret));
  		}
  		
  		if (result)
	  		return this.instance.intId;
	  	else
	  		return null;
  	},
  	
  	update: function() {
  		this.instance.doAction("save");
  		this.mapping.doAction("save");
  	},
  	
  	remove: function() {
  		this.instance.doDelete();
  		this.mapping.doDelete();
  		print("instance removed.");
  	},
  	
  	updateGeneral: function(detail) {
  		for (var p in detail) {
    		if (p == "description")
    			lib.smis_CommonLib.convertStringToArray(detail[p], this.instance[p], 2048);
    		else
    			this.instance[p] = detail[p];
    	}
    	this.instance.doSave();
    	return this;
  	},
  	
  	reload: function() {
  		this.instance.doSelect("intId=\"" + this.instance.intId + "\"");
  		this.mapping.doSelect("intId=\"" + this.mapping.intId + "\"");
  		return this;
  	}
  
});

function getClass() {return InstanceBuilderClass;}

// utilities functions
function copyGeneralFromTemplate(instance, registry) {
	instance.name = registry.name;
	instance.version = registry.version;
	instance.ctrlName = registry.ctrlName;
	instance.mgrName = registry.mgrName;
	instance.SMAdapter = registry.SMAdapter;
	instance.EPAdapter = registry.EPAdapter;
	instance.supportRT = registry.supportRT;
	instance.description = registry.description;
	instance.template = registry.name;
	instance.category = registry.category;
	instance.status = lib.smis_Constants.INSTANCE_STATUS_DISABLE();
	instance.loggerLevel = "INFO";
	instance.custom_param_format = registry.custom_param_format;
	instance.sharedScheduler = registry.sharedScheduler;
	
	if (instance.category == "Schedule-based") {
		instance.intervalTime = 300;
		instance.maxRetryTime = 5;
	} else if (instance.category == "UI-based") {
		instance.sharedScheduler = null;
	}
	
	_copyParamFromTemplate(instance, registry);
	_copyFieldsFromTemplate(instance, registry);
}

function _copyParamFromTemplate(instance, registry) {
	for (var i in registry.paramInfo) {
		instance.paramInfo[i].paramName = registry.paramInfo[i].paramName;
		instance.paramInfo[i].paramValue = registry.paramInfo[i].paramValue;
		instance.paramInfo[i].paramDesc = registry.paramInfo[i].paramDesc;
		instance.paramInfo[i].paramCategory = registry.paramInfo[i].paramCategory;
		instance.paramInfo[i].ispwd = registry.paramInfo[i].ispwd;
		instance.paramInfo[i].paramType = registry.paramInfo[i].paramType;
		instance.paramInfo[i].caption = registry.paramInfo[i].caption;
		if (instance.paramInfo[i].paramType == null)
			instance.paramInfo[i].paramType = "Character";
	}
}

function _copyFieldsFromTemplate(instance, registry) {
	var smFields = registry.SMFields;
	for(var i = 0; i &lt; smFields.length(); i++) {
		instance.SMFields[i].SMFieldName = smFields[i].SMFieldName;
		instance.SMFields[i].SMFieldType = smFields[i].SMFieldType;
		instance.SMFields[i].SMFieldDesc = smFields[i].SMFieldDesc;
		instance.SMFields[i].SMAlias = smFields[i].SMAlias;
	}
	
	var epFields = registry.EPFields;
	for(var i = 0; i &lt; epFields.length(); i++) {
		instance.EPFields[i].EPFieldName = epFields[i].EPFieldName;
		instance.EPFields[i].EPFieldType = epFields[i].EPFieldType;
		instance.EPFields[i].EPFieldDesc = epFields[i].EPFieldDesc;
		instance.EPFields[i].EPAlias = epFields[i].EPAlias;
	}  	
}

function copyMappingFromTemplate(mapping, registry, importing) {
	var templateMapping = new SCFile("SMISFieldMapping");
	mapping.fieldMapping = templateMapping.fieldMapping;
	mapping.valueMapping = templateMapping.valueMapping;
	
	if (importing) {
		for (var i in registry.fieldMapping) {
			
			mapping.fieldMapping[i].SMField = registry.fieldMapping[i].SMField;
			mapping.fieldMapping[i].EPField = registry.fieldMapping[i].EPField;
			mapping.fieldMapping[i].SMDefValue = registry.fieldMapping[i].SMDefValue;
			mapping.fieldMapping[i].EPDefValue = registry.fieldMapping[i].EPDefValue;
			mapping.fieldMapping[i].SMjscallback = registry.fieldMapping[i].SMjscallback;
			mapping.fieldMapping[i].EPjscallback = registry.fieldMapping[i].EPjscallback;
			mapping.fieldMapping[i].direction = registry.fieldMapping[i].direction;
			mapping.fieldMapping[i].FMDescription = registry.fieldMapping[i].FMDescription;
			mapping.fieldMapping[i].valueMappingGroup = registry.fieldMapping[i].valueMappingGroup;
		}
		
		for (var j in registry.valueMapping) {
		
			mapping.valueMapping[j].SMValue = registry.valueMapping[j].SMValue;
			mapping.valueMapping[j].EPValue = registry.valueMapping[j].EPValue;
			mapping.valueMapping[j].valueMappingGroupID = registry.valueMapping[j].valueMappingGroupID;
			mapping.valueMapping[j].VMDescription = registry.valueMapping[j].VMDescription;
			mapping.valueMapping[j].condition = registry.valueMapping[j].condition;
			if (mapping.valueMapping[j].condition == null) {
				mapping.valueMapping[j].condition = "true";
			}
		}
		
		mapping.preScript = registry.preScript;
		mapping.mappingScript = registry.mappingScript;
	}
}

lib.smis_ConfigurationManager.checkNumberFile("SMISConfiguration");
lib.smis_ConfigurationManager.checkNumberFile("SMISTaskQueue");
function generateInstanceId() {
	var callRtn = new SCDatum;
	var nextNumber = new SCDatum;
	system.functions.rtecall("getnumber", callRtn, nextNumber, "SMISConfiguration");
	return nextNumber.getText();
}

</script>
    <package type="string">smisplatform</package>
    <sysmodtime type="dateTime">05/15/14 19:31:53</sysmodtime>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodcount type="decimal">1</sysmodcount>
    <prgnsystem NullValue="1" type="boolean"/>
    <sysrestricted NullValue="1" type="boolean"/>
  </record>
</recordset>
