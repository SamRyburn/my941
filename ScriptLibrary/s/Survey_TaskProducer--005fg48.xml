<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="ScriptLibrary">
  <record id="name=&quot;Survey_TaskProducer&quot;" recordid="Survey_TaskProducer">
    <name type="string">Survey_TaskProducer</name>
    <script type="string">/******************************************************
* Module Name: Survey integration Filter
* Function: get survey targets
* Author: Tian, Shao-Qin
* Version: 1.00
* Creation Date: Mar., 2013
*******************************************************/


var Class = lib.smis_Prototype.getClass();

var TaskProducerClass = Class.create({

  	initialize: function(surveyDefinition) {
		this.surveyDefinition = surveyDefinition;
		this.connector = lib.Survey_ConfigurationManager.getConnector(this.surveyDefinition);
  	},
  	
  	checkActiveTime: function() {
  		var now = new Date();
  		return this.surveyDefinition.activeFrom != null &amp;&amp; this.surveyDefinition.activeFrom.getTime() &lt;= now.getTime() &amp;&amp; 
  			this.surveyDefinition.activeTo != null &amp;&amp; this.surveyDefinition.activeTo.getTime() &gt; now.getTime();
  	},
  	
  	// prepare survey tasks and push them to taskQueue
  	produceSurveyTasks: function() {
  		var log = this.surveyDefinition.getLogger();
  		log.info("Survey_TaskProducer", "producing tasks for survey: " + this.surveyDefinition.surveyId);
  		
  		this.updateLastUpdateTime();
  		if (!this.checkActiveTime()) {
  			log.info("Survey_TaskProducer", "This survey is not valid, please check active time.");
  			return;
  		}
		
		try {
	  		var entryMap = this.getSurveyData(this.surveyDefinition);
	  		
	  		log.info("Survey_TaskProducer", entryMap.length + " tasks will be pushed to task queue.");
			
			// subclass will implement this function
			this.processEntryList(entryMap);
		} catch (ex) {
            	log.error("Survey_TaskProducer", "Produce survey task for for survey:" + this.surveyDefinition.surveyId + ", error:" + ex);
		}
  	},
  	
  	/*
  	 @private
  	 @description get survey data: parameters and recipients after filtering
  	 @param {record} surveyDefinition - survey definition record
  	 @returns {array of object} - list of object containing parameters and recipients
  	*/
  	getSurveyData: function(surveyDefinition) {
  		var allEntryMap = [];
  		var allRecipients = [];
  		var log = this.surveyDefinition.getLogger();
  		
  		var key = this._getKeyField(surveyDefinition.tableName);

  		var entry = new SCFile(surveyDefinition.tableName);
  		var query = lib.Survey_Utilities.buildConcatenatedQuery(surveyDefinition);
			
		if (surveyDefinition.predefinedFilterId != null) {
			var inbox = new SCFile("inbox", SCFILE_READONLY);
			var result = inbox.doSelect("inbox.id="+surveyDefinition.predefinedFilterId);
			if (result == RC_SUCCESS) {
				var sorting = lib.Survey_Utilities.getSortFields(inbox.sortBy);
				entry.setOrderBy(sorting[0], sorting[1]);
			}
		}
		
		try {
			log.debug("Survey_TaskProducer", "querying entries using: " + query);
			var ret = entry.doSelect(query);
			while (ret == RC_SUCCESS) {
				var entryMap = this.prepareMapData(entry, surveyDefinition, key);
				allEntryMap.push(entryMap);
				
				for (var i = 0; i &lt; entryMap.recipients.length; i++) {
					allRecipients.push(entryMap.recipients[i].email);
				}
				
				ret = entry.getNext();
			}
		} catch(ex) {
			log.info("Survey_TaskProducer", "Failed to querying the entries: " + ex);
		}
		
		// filter the recipients
		var filterResult = lib.Survey_Filter.filterRecipients(allRecipients, surveyDefinition);
		var entryMap = this.filterEntries(allEntryMap, filterResult);
		
		return entryMap;
  	},
  	
  	_getKeyField: function(tableName) {
  		var key = null;
  		var keyField = lib.Survey_Utilities.getFileUniqueKey(tableName);
		if (keyField != null) {
			var list = keyField[0].split(",");
			key = list[list.length-1];
		}
		return key;
  	},
  	
  	prepareMapData: function(entry, surveyDefinition, key) {
		var paramMap = this.calculateParameters(entry);
		var recipients = this.calculateRecipients(entry);
		
		// generate weburl and essurl
		var url = lib.Survey_Utilities.genURL(entry, surveyDefinition.getLogger());
		paramMap["$WEBURL"] = url.web;
		paramMap["$ESSURL"] = url.ess;
		paramMap["$EXURL"] = surveyDefinition.externalSurveyUrl;
		paramMap["$EXTSID"] = surveyDefinition.externalSurveyId;
		
		var id = null;
		if (!key)
			key = this._getKeyField(surveyDefinition.tableName);
			
		if (key != null) {
			id = entry[key];
		}
		return {"ticketId": id, "surveyId": surveyDefinition.surveyId, "paramMap": paramMap, "recipients": recipients};
  	},
  	
  	calculateParameters: function(entry) {
  		var paramMap = {};
  		var parameterMapping = this.surveyDefinition.connectorDefinition.parameterMapping;
  		for (var i = 0; i &lt; parameterMapping.length; i++) {
  			var parameterFile = parameterMapping[i];
			var paramNameValue = this._calculateParameter(entry, parameterFile);
			paramMap[paramNameValue.name] = paramNameValue.value;
  		}
  		
  		// calculate optional parameters
  		for (var j = 0; j &lt; this.surveyDefinition.optionalParameters.length; j++) {
  			if (this.surveyDefinition.optionalParameters[j].fieldname != null)
  				paramMap[this.surveyDefinition.optionalParameters[j].parameter] = entry[this.surveyDefinition.optionalParameters[j].fieldname];
  		}
  		
  		return paramMap;
  	},
  	
  	/*
  	 @private
  	 @description calcualate parameter's value for a parameter mapping record
  	 @param {record} entry - entry file
  	 @param {record} entry - parameter mapping file
  	 @returns {object} - name/value pair
  	*/
  	_calculateParameter: function(entry, parameterFile) {
  		var value = null;
  		var mappingValue = parameterFile.mappingValue.replace(/^\s+|\s+$/g, '');
  		switch (parameterFile.mappingType) {
	  		case "field":
	  			value = entry[mappingValue];
	  			break;
	  		case "variable":
	  			value = system.vars[mappingValue];
	  			break;
	  		case "query":
	  			var scfile = new SCFile(parameterFile.lookupTable);
	  			
	  			var test = function($1, field){
					return "\""+system.functions.str(entry[field])+"\"";
				}
				var regToReplace=new RegExp("(([\\w|\\.])*) in \\$L\.file","gi");
				var lookupQuery = parameterFile.lookupQuery.replace(regToReplace, test);
				
	  			var ret = scfile.doSelect(lookupQuery);
	  			if (ret == RC_SUCCESS) {
	  				value = scfile[parameterFile.lookupField];
	  			}
	  			break;
  			case "value":
  			case "predefined":
  				value = mappingValue;
  				break;
  			case "javascript":
  				try {
  					//value = eval("lib."+parameterFile.mappingValue+"(entry, this.surveyDefinition)");
  					value = lib.Survey_Utilities.evaluateExpression(mappingValue, entry);
  				} catch (ex) {
  					var log = this.surveyDefinition.getLogger();
  					log.error("Survey_TaskProducer", "Error when evaluating JavaScript: " + parameterFile.mappingValue + "Error: " + ex);
  				}
  				break;
	  	}
  		
  		return {"name": parameterFile.parameter, "value": value};
  	},
  	
  	calculateRecipients: function(entry) {
  		var recipients = [];
  		var recipientMapping = this.surveyDefinition.connectorDefinition.recipientMapping;
  		for (var i = 0; i &lt; recipientMapping.length; i++) {
  			var recipientFile = recipientMapping[i];
  			var emailList = this._calculateRecipient(entry, recipientFile);
  			for (var k = 0; k &lt; emailList.length; k++) {
  				var notFound = true;
  				for (var j = 0; j &lt; recipients.length; j++) {
  					if (emailList[k].email == recipients[j].email) {
  						notFound = false;
  						break;
  					}
  				}
  				if (notFound)
  					recipients.push(emailList[k]);
  			}
  		}
  		
  		return recipients;
  	},
  	
  	/*
  	 @private
  	 @description calcualate recipient for a recipient mapping record
  	 @param {record} entry - entry file
  	 @param {record} entry - recipient mapping file
  	 @returns {array of string} - recipient list
  	*/
  	_calculateRecipient: function(entry, recipientFile) {
  		var list = [];
  		
  		var value = null;
  		switch (recipientFile.mappingType) {
  			case "field":
  				value = entry[recipientFile.recipient];
  				break;
  			case "variable":
  				var variableValue = recipientFile.recipient;
	  			value = vars[variableValue];
  				break;
  			case "value":
  				value = recipientFile.recipient;
   				break;
  			case "javascript":
  				try {
  					value = lib.Survey_Utilities.evaluateExpression(recipientFile.recipient, entry);
  				} catch (ex) {
  					var log = this.surveyDefinition.getLogger();
  					log.error("Survey_TaskProducer", "Error when evaluating JavaScript: " + recipientFile.recipient + ", Error: " + ex);
  				}
  				break;
  		}

		if (value != null) {
			// support multiple values
			var names = [];
			var len = 0;
			if (system.functions.type(value) == 2) {
				names = value.split(";");
				len = names.length;
			}
			else if (system.functions.type(value) == 8) {
				names = value;
				if (typeof names.length == "function")
					len = names.length();
				else
					len = names.length;
			}
				
			for (var i = 0; i &lt; len; i++) {
				this._calculateRecipientInternal(list, names[i].replace(/^\s+|\s+$/g, ''), recipientFile);
			}
  		}
		
  		return list;
  	},
  	
  	_calculateRecipientInternal: function(list, value, recipientFile) {
  		switch (recipientFile.recipientType) {
  			case "person":
               var email = this._getRecipientEmail(value);
                        
               if (email != null) {
                       list.push(email);
               }                       
               else {
                	var res = /^[0-9a-zA-Z_\-\.]+@[0-9a-zA-Z_\-]+(\.[0-9a-zA-Z_\-]+)*$/;
  				 	var re = new RegExp(res);         
              	 	if (value.match(re) != null) { // is email
                		list.push({"email": value, "lan": null, "name": null});
               		}                       
               }
  				break;
  			case "group":
  				switch (recipientFile.group) {
  					case "assignment":
  						this._getGroupEmail(this._getAssignmentGroupMembers(value), list);
  						break;
  					case "cm3groups":
  						this._getGroupEmail(this._getCm3GroupMemebers(value, recipientFile.subgroup), list);
  						break;
  					case "ocmgroups":
  						this._getGroupEmail(this._getOcmGroupMemebers(value, recipientFile.subgroup), list);
  						break;
  					default:
  						break;
  				}
  				break;
  			default:
  				break;
  		}
  	},
  	
  	_getAssignmentGroupMembers: function(groupName) {
  		var list = [];
  		var assignment = new SCFile("assignment", SCFILE_READONLY);
  		assignment.setFields(["operators"]);
  		var ret = assignment.doSelect("name=\"" + groupName + "\"");
  		if (ret == RC_SUCCESS) {
  			this._getMembersFromSMList(assignment.operators, list);
  		}
  		return list;
  	},
  	
  	_getCm3GroupMemebers: function(groupName, subgroup) {
  		var list = [];
  		var cm3groups = new SCFile("cm3groups", SCFILE_READONLY);
  		cm3groups.setFields(["approvers", "members"]);
  		var ret = cm3groups.doSelect("name=\"" + groupName + "\"");
  		if (ret == RC_SUCCESS) {
			switch (subgroup) {
				case "approvers":
					this._getMembersFromSMList(cm3groups.approvers, list);
					break;
				case "members":
					this._getMembersFromSMList(cm3groups.members, list);
					break;
				case "all":
					this._getMembersFromSMList(cm3groups.approvers, list);
					this._getMembersFromSMList(cm3groups.members, list);
					break;
			}
  		}
  		return list;
  	},
  	
  	_getOcmGroupMemebers: function(groupName, subgroup) {
  		var list = [];
  		var ocmgroups = new SCFile("ocmgroups", SCFILE_READONLY);
  		ocmgroups.setFields(["approvers", "members"]);
  		var ret = ocmgroups.doSelect("name=\"" + groupName + "\"");
  		if (ret == RC_SUCCESS) {
			switch (subgroup) {
				case "approvers":
					this._getMembersFromSMList(ocmgroups.approvers, list);
					break;
				case "members":
					this._getMembersFromSMList(ocmgroups.members, list);
					break;
				case "all":
					this._getMembersFromSMList(ocmgroups.approvers, list);
					this._getMembersFromSMList(ocmgroups.members, list);
					break;
			}
  		}
  		return list;
  	},
  	
  	_getMembersFromSMList: function(smList, jsList) {
		var lng = system.functions.lng( system.functions.denull(smList));
		if ( lng == null )
			lng = 0;
		for (var i = 0; i &lt; lng; i++) {
			if (!lib.ArrayUtil.contains(jsList, smList[i]))
				jsList.push(smList[i]);
		}
  	},
  	
  	_getGroupEmail: function(members, list) {
  		for (var i = 0; i &lt; members.length; i++) {
  			var email = this._getRecipientEmail(members[i]);
  			if (email != null)
  				list.push(email);
  		}
  	},
  	
  	_getRecipientEmail: function(name) {
		var email = null;
		email = this._getContactEmail(name);
		if (email == null)
			email = this._getOperatorEmail(name);
			
		return email;
  	},
  	
  	/*
  	 get email from contact by contact.name
  	*/
  	_getContactEmail: function(contactName) {
  		var query = "contact.name=\"" + contactName + "\"";
  		var contact = new SCFile("contacts", SCFILE_READONLY);
  		contact.setFields(["email", "language", "full.name"]);
  		var ret = contact.doSelect(query);
  		if (ret == RC_SUCCESS &amp;&amp; contact["email"]) {
  			return {"email": contact["email"], "lan": contact["language"], "name": contact["full.name"]};
  		}
  		return null;
  	},
	
	/*
	 get email from operator by name
	*/
  	_getOperatorEmail: function(name) {
  		var query = "name=\"" + name + "\"";
  		var operator = new SCFile("operator", SCFILE_READONLY);
  		operator.setFields(["email", "syslanguage", "full.name"]);
  		var ret = operator.doSelect(query);
  		if (ret == RC_SUCCESS &amp;&amp; operator["email"]) {
  			return {"email": operator["email"], "lan": operator["syslanguage"], "name": operator["full.name"]};
  		}
  		return null;
  	},
  	
  	/*
  	 filter entries according to the recipients filtering result
  	 
  	 @param {Array} allEntryMap - list contains all entries
  	 @param {Array} filterResult - list contains filtering recipients
  	 
  	 @return {Array} - result contains all entries contains the filterred recipients
  	*/
  	filterEntries: function(allEntryMap, filterResult) {
  		var entryMap = [];
  		for (var i = 0; i &lt; allEntryMap.length; i++) {
  			var map = allEntryMap[i];
  			var arr = [];
  			for (var j = 0; j &lt; map.recipients.length; j++) {
  				for (var k = 0; k &lt; filterResult.length; k++) {
  					if (filterResult[k] == map.recipients[j].email) {
  						arr.push(map.recipients[j]);
  						filterResult[k] = null;
  						break;
  					}
  				}
  			}
  			if (arr.length &gt; 0) {
  				var map = {"ticketId": map.ticketId, "surveyId": map.surveyId, "paramMap": map.paramMap, "recipients": arr};
  				entryMap.push(map);
  			}
  		}
  		return entryMap;
  	},

  	updateLastUpdateTime: function() {
  		var actionTime = lib.Survey_ScheduleManager.getLastScheduleProcessingTime(this.surveyDefinition);
  		if (actionTime == null) {
  			actionTime = new Date(0);
  		}
  		// update survey Definition record
  		var surveyFile = new SCFile("SurveyDefinition");
		var ret = surveyFile.doSelect("id=\"" + this.surveyDefinition.surveyId + "\"");
		if (ret == RC_SUCCESS) {
			surveyFile.lastProcessingTime = actionTime;
			var result = surveyFile.doAction("save");
			if (result == RC_SUCCESS) {
				lib.Survey_Logger.getLogger().info("Survey_TaskProducer", "Update last processing time successfully.");
			} else {
				lib.Survey_Logger.getLogger().info("Survey_TaskProducer", "Failed to update last processing time.");
			}
		}
  	}
});


function getClass() {return TaskProducerClass;}</script>
    <package type="string">Survey</package>
    <sysmodtime type="dateTime">08/10/14 19:25:46</sysmodtime>
    <sysmoduser type="string">xiongjie</sysmoduser>
    <sysmodcount type="decimal">3</sysmodcount>
    <prgnsystem NullValue="1" type="boolean"/>
    <sysrestricted NullValue="1" type="boolean"/>
  </record>
</recordset>
