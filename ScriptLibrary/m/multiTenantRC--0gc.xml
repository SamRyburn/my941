<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="ScriptLibrary">
  <record id="name=&quot;multiTenantRC&quot;" recordid="multiTenantRC">
    <name type="string">multiTenantRC</name>
    <script type="string">function createTenant(url, username, password, company, ucmdbCustomerId) {
	var postBody = "tenantName="+company+"&amp;ucmdbCustomerId="+ucmdbCustomerId;
	var headers = lib.smis_RestClient.createBasicAuthHttpHeaders("en", username, password);
	
	var response = lib.smis_RestClient.doRESTPostRequest(url, headers, postBody);
	if (response.indexOf("500") != -1)
		throw new Error("RC 500 internal error when creating tenant: " + company + ", " + ucmdbCustomerId);
}

function updateTenant(url, username, password, company, ucmdbCustomerId) {
	var postBody = "ucmdbCustomerId="+ucmdbCustomerId;
	var headers = lib.smis_RestClient.createBasicAuthHttpHeaders("en", username, password);
	
	var response = lib.smis_RestClient.doRESTPostRequest(url+"/"+company, headers, postBody);
	if (response.indexOf("500") != -1)
		throw new Error("RC 500 internal error when updating tenant: " + company + ", " + ucmdbCustomerId);
}

function deleteTenant(url, username, password, company) {
	var headers = lib.smis_RestClient.createBasicAuthHttpHeaders("en", username, password);
	
	var response = lib.smis_RestClient.doRESTDeleteRequest(url+"/"+company, headers);
	if (response.indexOf("500") != -1)
		throw new Error("RC 500 internal error when deleting tenant: " + company);
}

function getTenants(url, username, password) {
	var headers = lib.smis_RestClient.createBasicAuthHttpHeaders("en", username, password);
	
	var response = lib.smis_RestClient.doRESTGetRequest(url, headers);
	var obj = eval("(" + response + ")");
	var tenants = obj.tenants;
	return tenants;
}

function hasTenant(tenants, company) {
	for (p in tenants) {
		if (p.toLowerCase() == company.toLowerCase())
			return true;
	}
	return false;
}

function getRCTenantName(tenants, company) {
	for (p in tenants) {
		if (p.toLowerCase() == company.toLowerCase())
			return p;
	}
	return null;
}

function updateSyncFlag(company, flag)
{
	var fCompany = new SCFile( "company" );
	var sqlStr = "company=\""+ company+"\"";
	var rc = fCompany.doSelect(sqlStr);
	if ( rc == RC_SUCCESS &amp;&amp; fCompany.rc_synced != flag)
	{
    
    	fCompany.rc_synced = flag;
		fCompany.doUpdate();	
	}	 
}

function checkExistSchedule(company, action)
{
	var fSchedule = new SCFile( "schedule" ); 
			
	var sqlStr;
	if(action =="addorupdate")
		sqlStr = "name=\"Synch Company with RC - "+ company+"\"";
	else
		sqlStr = "name=\"Inactivate Company with RC - "+ company+"\"";

   	var rc = fSchedule.doSelect( sqlStr );

    if ( rc == RC_SUCCESS )
   	{
        
		return true;	
	}			
	else return false;
}

function extendSchedule(company, action) {
   	var currentTime = new XMLDate( new Date() );
	var fSchedule = new SCFile( "schedule" ); 
			
	var sqlStr;
	if(action =="addorupdate")
		sqlStr = "name=\"Synch Company with RC - "+ company+"\"";
	else
		sqlStr = "name=\"Inactivate Company with RC - "+ company+"\"";

   	var rc = fSchedule.doSelect( sqlStr );

    if ( rc == RC_SUCCESS ) {
		fSchedule.sched_class ="problem";
		var duration = new XMLDate("P0Y0M0DT0H5M0S");
		fSchedule.repeat = duration.getDatum();

		var expiration = currentTime.addDuration("P0Y0M0DT0H5M0S");
		var expireDate = new XMLDate(expiration);
		fSchedule.expiration = expireDate.getDatum();
		fSchedule._class ="problem";
		fSchedule.status = "rescheduled";

		fSchedule.doUpdate();	
   	}
}

function cleanupScheduler(company, action)
{

	var fSchedule = new SCFile( "schedule" ); 
			
	var sqlStr;
	if(action =="addorupdate")
		sqlStr = "name=\"Synch Company with RC - "+ company+"\"";
	else
		sqlStr = "name=\"Inactivate Company with RC - "+ company+"\"";
   	var rc = fSchedule.doSelect( sqlStr );

    if ( rc == RC_SUCCESS )
   	{
        
		fSchedule.doDelete();	
	}			
}


// This function creates a schedule record for sync or adding a company to RC
function syncCompanyAfterAddOrUpdate(company, ucmdbCustomerId)
{
	cleanupScheduler(company, "addorupdate");
	var fSchedule = new SCFile( "schedule" ); 
	var callRtn = new SCDatum;
	var nextNumber = new SCDatum;
	var currentTime = new XMLDate( new Date() );

	fSchedule.name = "Synch Company with RC - " + company;	
	fSchedule._class ="problem";
	fSchedule.sched_class ="problem";
	fSchedule.expiration = currentTime.getDatum();
	fSchedule.javascript = "system.library.multiTenantRC.synchAfterAddOrUpdate( \""+company+"\",\""+ucmdbCustomerId+"\" );";
	
	fSchedule.doInsert();	
	
	var msg = system.functions.scmsg(1001, "rc")
	print(msg);
}

// This function creates a schedule record for sync or adding a company to RC
function syncCompanyAfterDelete(company)
{
	cleanupScheduler(company, "delete");
	var fSchedule = new SCFile( "schedule" ); 
	var callRtn = new SCDatum;
	var nextNumber = new SCDatum;
	var currentTime = new XMLDate( new Date() );

	fSchedule.name = "Inactivate Company with RC - " + company;	
	fSchedule._class ="problem";
	fSchedule.sched_class ="problem";
	fSchedule.expiration = currentTime.getDatum();
	fSchedule.javascript = "system.library.multiTenantRC.synchAfterDelete( \""+company+"\" );";
	
	fSchedule.doInsert();	
	
	var msg = system.functions.scmsg(1001, "rc")
	print(msg);
}

function synchAfterAddOrUpdate(company, ucmdbCustomerId) {
	var configItem = lib.smis_ConfigurationManager.getEnabledConfigItem("SMtoRC");
	var username = configItem.getConfigParameterValue("rc.username");
	var password = configItem.getConfigParameterValue("rc.password");
	var url = configItem.getConfigParameterValue("rc.server.url") + "/rest/tenants";
	
	var log = configItem.getLogger();
	
	try {
		var tenants = getTenants(url, username, password);
		if (!hasTenant(tenants, company)) { //not synched yet
			createTenant(url, username, password, company, ucmdbCustomerId);
		} else if (ucmdbCustomerId != tenants[company]) {
			updateTenant(url, username, password, getRCTenantName(tenants, company), ucmdbCustomerId);
		}
		updateSyncFlag(company, true);
		cleanupScheduler(company, "addorupdate");
		log.info("multiTenantRC", "RC tenancy synched successfully after add or update for: " + company + ", " + ucmdbCustomerId);
	} catch (ex) {
		var eString = ex.toString();
		if (eString.indexOf("UnknownHostException") != -1) {
			log.error("multiTenantRC", "RC Host name is not correct.");
		} else if (eString.indexOf("ConnectException") != -1) {
			log.error("multiTenantRC", "RC server not available.");
		} else if (eString.indexOf("IOException") != -1) {
			log.error("multiTenantRC", "Wrong username or password.");
		} else
			log.error("multiTenantRC", "unknown error");
			
		log.error(eString);
		extendSchedule(company, "addorupdate");
	}
}

function synchAfterDelete(company) {
	var configItem = lib.smis_ConfigurationManager.getEnabledConfigItem("SMtoRC");
	var username = configItem.getConfigParameterValue("rc.username");
	var password = configItem.getConfigParameterValue("rc.password");
	var url = configItem.getConfigParameterValue("rc.server.url") + "/rest/tenants";

	var log = configItem.getLogger();
	
	try {
		var tenants = getTenants(url, username, password);
		if (hasTenant(tenants, company)) { //not synched yet
			deleteTenant(url, username, password, company);
		}
		updateSyncFlag(company, false);
		cleanupScheduler(company, "delete");
		log.info("multiTenantRC", "RC tenancy synched successfully after delete for: " + company);
	} catch (ex) {
		var eString = ex.toString();
		if (eString.indexOf("UnknownHostException") != -1) {
			log.error("multiTenantRC", "RC Host name is not correct.");
		} else if (eString.indexOf("ConnectException") != -1) {
			log.error("multiTenantRC", "RC server not available.");
		} else if (eString.indexOf("IOException") != -1) {
			log.error("multiTenantRC", "Wrong username or password.");
		} else
			log.error("multiTenantRC", "unknown error");
		
		log.error(eString);
		extendSchedule(company, "delete");
	}
}</script>
    <package type="string">Integration</package>
    <sysmodtime type="dateTime">07/16/17 17:01:42</sysmodtime>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodcount type="decimal">0</sysmodcount>
    <prgnsystem NullValue="1" type="boolean"/>
    <sysrestricted NullValue="1" type="boolean"/>
  </record>
</recordset>
