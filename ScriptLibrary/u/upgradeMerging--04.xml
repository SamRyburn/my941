<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="ScriptLibrary">
  <record id="name=&quot;upgradeMerging&quot;" recordid="upgradeMerging">
    <name type="string">upgradeMerging</name>
    <script type="string">
	var unix = (system.functions.version()[0] == "unix") ? true : false;
	var sep = unix ? "/" : "\\";
	var copy = unix ? "cp" : "copy";
	var diff3 = ".." + sep + "bin" + sep + "diff3 -m --diff-program=.." + sep + "bin" + sep + "diff ";
	var parent = getFolder();
	
	function unzip() {
		showLog("Start unziping the oob xml zip. It will cost 5-10 minutes.", 1, 1);
		var rc = false;
		var baseVersion = getSelectedBaseVersion();
		if (baseVersion==null) {
		    baseVersion=lib.upgradeVersionUtil.getDefaultBaseVersion(true);
		}
		var path = parent + "3waymerge" + sep + "oob" + sep + baseVersion + ".zip";
		try {
			if (parent != null) {	
				rc = uncompressFile(path);
			}
		} catch (er) {
			rc = false;
			// SM server unzip error message
			showLog(er.toString(), 1, 3);
			var failMsg = "Failed to unzip " + path + " Auto merge skipped.";
			// warning message in UI
			showLog(failMsg, 1, 2);
			// upgrade error log
			showLog(failMsg, 2, 3);
		}
		
		if (rc) {
			showLog("Finish unziping.", 1, 1);
		}
		
		return rc;
	}
	
	function mergeRecord(type, query, prefix){
		var tgtQuery = buildRenamedQuery(query, type, prefix);
		var oldObj = getRecord(type, query);
		var newObj = getRecord(type, tgtQuery);

		if(oldObj != null &amp;&amp; newObj != null){
			var sig = getRecord("signaturemake", "table.name=\"" + type + "\"");
			if(sig != null){
				var filename = getFileName(oldObj, sig.key);
				var baseVersion = getSelectedBaseVersion();
				var oob = parent + "3waymerge" + sep + "oob" + sep + baseVersion + sep + type + sep + filename + ".xml";
				
				var baseForder = parent + "3waymerge" + sep + "work" + sep + "base" + sep + type + sep;
				makeDir(baseForder);
				var base = baseForder + filename + ".xml";
				
				var localForder = parent + "3waymerge" + sep + "work" + sep + "customer" + sep + type + sep;
				makeDir(localForder);
				var local = localForder + filename + ".xml";
				
				var upgradeFolder = parent + "3waymerge" + sep + "work" + sep + "upgrade" + sep + type + sep;
				makeDir(upgradeFolder);
				var upgrade = upgradeFolder + filename + ".xml";
				
				var mergeFolder = parent + "3waymerge" + sep + "work" + sep + "merge" + sep + type + sep;
				makeDir(mergeFolder);
				var result = mergeFolder + filename + ".xml";
				
				copyFile(oob, base);
				saveToXML(oldObj, local, false);
				saveToXML(newObj, upgrade, true, getExclusion(sig.table_name, sig.fields, sig.fieldarray_type), prefix);
				//skip the automerge for format record
				if(type != "format"){
					if(compare(local, base, upgrade, result)){
						var xml = readFile(result, false);
						oldObj.setRecord(xml);
						rc = oldObj.doUpdate();
						if(rc === RC_SUCCESS || rc === true){
							return true;
						}
	
					}
				}
			}
		}
	    return false;
	}

	function saveToXML(file, path, tailor, exclusion, prefix){
		var text = file.getXml().toXMLString();
		text = tailoring(text, tailor, exclusion, prefix);
		return writeFile(path, false, text);
	}
	
	function compare(local, oob, upgrade, result){
		var rc = sysExec( diff3 + " " + local + " " + oob + " " + upgrade + " &gt; " + result);
		if(rc[0] == 0 &amp;&amp; rc[1] == 0){
			return true;
		}
		return false;
	}
	
	function tailoring(xml, tailor, exclusion, prefix){
		if(tailor){
			var regex = new RegExp(prefix, "g");
			xml = xml.replace(regex, "");
		}else{
			exclusion = ["sysmodtime", "sysmoduser", "sysmodcount"];
		}
		for(var i = 0; i &lt; exclusion.length; i++){
			var str = "&lt;" + exclusion[i] + "\\stype(.)*?&lt;/" + exclusion[i] + "&gt;";
			var regex = new RegExp(str, "g");
			xml = xml.replace(regex, "");
		}
		xml = unix?xml.replace(/&gt;&lt;/g, "&gt;\r\n&lt;"):xml.replace(/&gt;&lt;/g, "&gt;\n&lt;");
		return xml;
	}
	
	function getExclusion(table, fields, excluded){
		if(excluded == 0){
			return fields.toArray();
		}
		var file = new SCFile("dbdict");
		var rc = file.doSelect("name=\"" + table + "\"");
		var exclusions = [];
		if(rc == RC_SUCCESS){
			for(var i = 0; i &lt; file.field.length(); i++){
				if(file.field[i].level == 1 &amp;&amp; system.functions.index(file.field[i].name, fields) == 0){
					exclusions[exclusions.length] = file.field[i].name;
				}
			}
		}
		return exclusions;
	}
	
	function getFileName(file, key){
		var name = file[key[0]];
		for(var i = 1; i &lt; key.length(); i++){
			name+= "-" + file[key[i]];
		}
		if(typeof(name) == "string" &amp;&amp; name != null){
			return name.replace(/[\s\/\?:&gt;&lt;\"\*]/g, "_");
		}
		return name;
	}
	
	/**
	 * To get the path for upgrade package
	 */
	function getFolder(){
		var file = getRecord("upgradestatus", "true");
		if(file != null){
			return file.path;
		}
		return null;
	}	
	
	/**
	 * To get the base version selected by user for 3 way merge
	 *
	 */
	function getSelectedBaseVersion(){
		var statusFile = getRecord("upgradestatus", "true");	
		if(statusFile != null &amp;&amp; statusFile.automerge_baseversion != null){		
			return statusFile.automerge_baseversion;
		}else{
			return null;
		}
	}
	
	/**
	 * To get whether the automerge is enabled
	 *
	 */
	function getAutomergeEnabled(){
		var statusFile = getRecord("upgradestatus", "true");	
		if(statusFile != null &amp;&amp; statusFile.automerge_enable != null){		
			return statusFile.automerge_enable;
		}else{
			return false;
		}
	}
			
		
	
	/**
	 * Build the new query statement with the specified prefix.
	 * The prefix will be put at the beginning of the string.
	 */
	function buildRenamedQuery(query, table, prefix ){
		var names = lib.upgradeHelper.getFieldNamesForRename(table);
		var target = query;
		for(var i = 0; i &lt; names.length; i++){
			var regex = new RegExp(names[i] + "[\\s]*=[\\s]*\"");
			target = target.replace(regex, names[i] + "=\"" + prefix);
		}
		return target;
	}
	
	/**
	 * To determine whether the specified string is null, empty or not.
	 */
	function isEmpty(s){
		if(s == null || s == ""){
			return true;
		}
		return false;
	}
	
	/**
	 * To trim the whitespace on the head and tail for the specified string
	 */
	function trim(s) {
		try {
			return s.replace(/^\s+|\s+$/g,"");
		} catch(e) {
			return s;
		}
	}
	
	/**
	 * 
	 */
	function merge(result){
		var file = getRecord("upgradeobjects", "object.name = \"" + lib.upgradeCommonLib.replaceSpecialCharacter(result.upgobject_key) + "\"");
		if(file != null){
			if(!isEmpty(file.contents[0].table) &amp;&amp; !isEmpty(file.contents[0].query)){
				if(mergeRecord(file.contents[0].table, file.contents[0].query, result.upgprefix)){
					result.result="Auto Merged";
					var rc = result.doUpdate();
	        		if(rc === RC_SUCCESS || rc === true){
	        			return true;
	        		}
				}
			}
		}
		return false;
	}
	
	/**
	 * Auto merge the result, log shows when finishing
	 */
	function autoMerge(result, logType){
		if ((result.result != "Renamed" &amp;&amp; result.result != "Previously Reconciled") || result.object_type == "Application Cluster"){
			return null;
		}
		if(merge(result)){
			var msg = system.functions.scmsg("SUC_AUTO_MERGED", "upg", [result.object_type, result.object_name]);
			showLog(msg, logType, 1);
			return true;
		}else{
			var msg = system.functions.scmsg("FAIL_AUTO_MERGED", "upg", [result.object_type, result.object_name]);
			showLog(msg, logType, 1);
			return false;
		}
	}

	/**
	 * Auto merge the results(This should be list through getting next.), logType determins what kind of message will be shown: Message view or log file.
	 */
	function massAutoMerge(result, logType){
		if(logType == null){
			logType = 1;
		}
		var succount = 0;
		var failcount = 0;
		var skipcount = 0;
		var rc = result.getFirst();
		while(rc === RC_SUCCESS || rc === true){
			var retValue = autoMerge(result, logType);
			if(retValue === true){
				succount++;
			}else if(retValue === false){
				failcount++;
			}else if(retValue == null){
				skipcount++;
			}
			rc = result.getNext();
		}		
		showLog(system.functions.scmsg("REC_AUTO_MERGED", "upg", [succount]), logType, 1);				
		showLog(system.functions.scmsg("FAIL_MASS_MERGED", "upg", [failcount]), logType, 1);		
		showLog(system.functions.scmsg("MASS_REC_SKIPPED", "upg", [skipcount]), logType, 1);
		//go back to the first record to avoid client navigating to last record
		result.getFirst();			
	}
	
	/**
	 * Use the query to get the record in the table &lt;type&gt;, and get the another record using the query with prefix in the same table.
	 * The old record will be replaced with the new record which is queried by the one with prefix.
	 */
	function cover(type, query, prefix){
		var srcObj = new SCFile(type);
		var tgtObj = new SCFile(type);
		var tgtQuery = buildRenamedQuery(query, type, prefix);
		var srcrc = srcObj.doSelect(query);
		var tgtrc = tgtObj.doSelect(tgtQuery);

		if(srcrc == RC_SUCCESS &amp;&amp; tgtrc == RC_SUCCESS){
			var xml = tgtObj.getXml().toXMLString();
			var regex = new RegExp(prefix, "g");
			xml = xml.replace(regex, "");
			srcObj.setRecord(xml);
			var rc = srcObj.doUpdate();
			return (rc === RC_SUCCESS || rc === true);
		}
	    return false;
	}
	
	/**
	 * Assert result should be "renamed" or "Auto Merged" before calling this function.
	 * result: record of table upgraderesults
	 */
	function revert(result){
		var file = getRecord("upgradeobjects", "object.name = \"" + lib.upgradeCommonLib.replaceSpecialCharacter(result.upgobject_key) + "\"");
		if(file != null){
			if(cover(file.contents[0].table, file.contents[0].query, "PRE" + lib.upgradeHelper.getOldVersion())){
				result.result="Renamed";
				result.version_reconciled = "";
				var rc = result.doUpdate();
	        	if(rc === RC_SUCCESS || rc === true){
	        		var reconciliation = getRecord("upgreconciliation", "object.name=\"" + lib.upgradeCommonLib.replaceSpecialCharacter(result.object_name) + "\"");
	        		if(reconciliation != null){
	        			reconciliation.doDelete();
	        		}
	        		print(system.functions.scmsg("SUC_REVERT", "upg", [result.object_type, result.object_name]));
	        		return true;
	        	}
			}
		}
		system.functions.msg(system.functions.scmsg("FAIL_TO_REVERT", "upg", [result.object_type, result.object_name]), 3);
		return false;
	}
	
	function revertRAD(result) {
	    var argNames = new SCDatum();
	    var argVals = new SCDatum();
	    var argTypes = new SCDatum();
	    var results = new SCDatum();
	    
	    argNames.setType(8); 
	    argVals.setType(8);      
	    argTypes.setType(8);
	    results.setType(8);
	    
	    argNames.push("file");
	    argVals.push(result);
	    argTypes.push(6);
	    
	    lib.RAD.run("apm.upgrade.revert.rad", argNames, argVals, argTypes, results);
	    
	    if (vars.$status=="success") {
	        print(system.functions.scmsg("SUC_REVERT", "upg", [result.object_type, result.object_name]));
	        return true;
	    }
	    
	    system.functions.msg(system.functions.scmsg("FAIL_TO_REVERT", "upg", [result.object_type, result.object_name]), 3);
	    return false;
	}
	
	/**
	 * The specified parameter &lt;result&gt; should be a list which can be next util it gets last.
	 */
	function massRevert(result){
		var succount = 0;
		var failcount = 0;
		var rc = result.getFirst();
		var list = ["Renamed", "Auto Merged", "Previously Reconciled", "Reconciled"];
		var list2 = ["Replaced"];
		while(rc === RC_SUCCESS || rc === true){
			if (result.object_type=="Application Cluster" &amp;&amp; system.functions.index(result.result, list2) &gt; 0) {
			    if(revertRAD(result)){
					succount++;
				}else{
					failcount++;
				}
			} else if(system.functions.index(result.result, list) &gt; 0){
				if(revert(result)){
					succount++;
				}else{
					failcount++;
				}
			}
			rc = result.getNext();
		}					
		print(system.functions.scmsg("REC_REVERTED", "upg", [succount]));
		if(failcount &gt; 0){
			system.functions.msg(system.functions.scmsg("FAIL_MASS_REVERTED", "upg", [failcount]), 3);
		}
		//go back to the first record to avoid client to navigate to last record
		result.getFirst();	
	}
	
	/**
	 * This function will be called in RAD=apm.upgrade.wizard. The logs will be written into log files.
	 */
	function autoMergeAll(){
		if (unzip()) {
			var file = new SCFile("upgraderesults");
			var rc = file.doSelect("result = \"Renamed\" and object.type~=\"Application Cluster\"");
			if(rc == RC_SUCCESS){
				massAutoMerge(file, 2);
			}
		}
	}
	
	/**
	 * To get the record through the query in the specified table. Returns null if no records exists.
	 */
	function getRecord(table, query){
		var file = new SCFile(table);
		var rc = file.doSelect(query);
		if(rc == RC_SUCCESS){
			return file;
		}
		return null;
	}
	
	/**
	 * copy source file to target
	 */
	function copyFile(source, target){
		var rc = sysExec( copy + " " + source + " " + target);
		if(rc[0] == 0 &amp;&amp; rc[1] == 0){
			return true;
		}
		return false;
	}
	
	/**
	 * Show logs on the Message view or log files. This denpends on logType.
	 */
	function showLog(message, logType, logLevel){
		if(logType == 1){ // log will be output to Message View
			system.functions.msg(message, logLevel);
		}else if(logType == 2){ // log will be written to log file
			if(logLevel == 1){
				lib.upgradeLog.detail(message);
			}else if(logLevel == 3){
				lib.upgradeLog.error(message);
			}
		}
		
	}
	
	/**
	 * Get oob file name with same SM version of tailored application
	 */
	function getOOBFileName(type, query){
		var oldObj = getRecord(type, query);

		if(oldObj != null){
			var sig = getRecord("signaturemake", "table.name=\"" + type + "\"");
			if(sig != null){
				var filename = getFileName(oldObj, sig.key);
				var baseVersion = getSelectedBaseVersion();
				var oob = "oob-" + baseVersion + "-" + type + "-" + filename + "";

				return oob;
			}
		}

		return "";
	}
	
	/**
	 * Get oob xml content with same SM version of tailored application
	 */
	function getOOBFileXML(type, query){
		var oldObj = getRecord(type, query);

		if(oldObj != null){
			var sig = getRecord("signaturemake", "table.name=\"" + type + "\"");
			if(sig != null){
				var filename = getFileName(oldObj, sig.key);
				var baseVersion = getSelectedBaseVersion();
				var oob = parent + "3waymerge" + sep + "oob" + sep + baseVersion + sep + type + sep + filename + ".xml";
				var exist = system.functions.isfileexist(oob);
				if (!exist)
				    return "";
				
				var xml = readFile(oob, false);

				return xml;
			}
		}

		return "";
	}
	
	/**
	 * Assert result should be "Renamed" or "Auto Merged" or "Previously Reconciled" or "Reconciled" before calling this function.
	 * result: record of table upgraderesults
	 */
	function chooseUpgrade(result){
		var file = getRecord("upgradeobjects", "object.name = \"" + lib.upgradeCommonLib.replaceSpecialCharacter(result.upgobject_key) + "\"");
		if(file != null){
			if(cover(file.contents[0].table, file.contents[0].query, lib.upgradeConstants.NEW_PREFIX())){
				result.result="Renamed";
				result.version_reconciled = "";
				var rc = result.doUpdate();
	        			if(rc === RC_SUCCESS || rc === true){
	        				var reconciliation = getRecord("upgreconciliation", "object.name=\"" + lib.upgradeCommonLib.replaceSpecialCharacter(result.object_name) + "\"");
	        				if(reconciliation != null){
	        					reconciliation.doDelete();
	        				}
					print(system.functions.scmsg("SUC_CHOOSE_UPGRADE", "upg", [result.object_type, result.object_name]));
	        				return true;
	        			}
			}
		}
		system.functions.msg(system.functions.scmsg("FAIL_CHOOSE_UPGRADE", "upg", [result.object_type, result.object_name]), 3);
		return false;
	}
	
	function chooseUpgradeRAD(result) {
	    var argNames = new SCDatum();
	    var argVals = new SCDatum();
	    var argTypes = new SCDatum();
	    var results = new SCDatum();
	    
	    argNames.setType(8); 
	    argVals.setType(8);      
	    argTypes.setType(8);
	    results.setType(8);
	    
	    argNames.push("file");
	    argVals.push(result);
	    argTypes.push(6);
	    
	    lib.RAD.run("apm.upgrade.chooseupg.rad", argNames, argVals, argTypes, results);
	    
	    if (vars.$status=="success") {
	        print(system.functions.scmsg("SUC_CHOOSE_UPGRADE", "upg", [result.object_type, result.object_name]));
	        return true;
	    }
	    
	    system.functions.msg(system.functions.scmsg("FAIL_CHOOSE_UPGRADE", "upg", [result.object_type, result.object_name]), 3);
	    return false;
	}

	/**
	 * The specified parameter &lt;result&gt; should be a list which can be next util it gets last.
	 */
	function massChooseUpgrade(result){
		var succount = 0;
		var failcount = 0;
		var rc = result.getFirst();
		var list = ["Renamed", "Auto Merged", "Previously Reconciled", "Reconciled"];
		var list2 = ["Kept Customer", "Renamed", "Kept Customer Non-OOB"];
		while(rc === RC_SUCCESS || rc === true){
			if (result.object_type=="Application Cluster" &amp;&amp; system.functions.index(result.result, list2) &gt; 0) {
			    if(chooseUpgradeRAD(result)){
					succount++;
				}else{
					failcount++;
				}
			} else if(system.functions.index(result.result, list) &gt; 0){
				if(chooseUpgrade(result)){
					succount++;
				}else{
					failcount++;
				}
			}
			rc = result.getNext();
		}
		print(system.functions.scmsg("REC_MASS_CHOOSE_UPGRADE", "upg", [succount]));
		if(failcount &gt; 0){
			system.functions.msg(system.functions.scmsg("FAIL_MASS_CHOOSE_UPGRADE", "upg", [failcount]), 3);
		}
		//go back to the first record to avoid client to navigate to last record
		result.getFirst();	
	}	
	
function handleResult4PD() {
    replaceRecord4PD();
    updateResult4PD();
    setRemoveResult4PD();
}

function replaceRecord4PD() {
    var pdpatch = new SCFile("pdpatches");
    var rc = pdpatch.doSelect("filename~=\"datadict\" and action=\"replace\"");
    while (rc==RC_SUCCESS) {
        var query=lib.upgradeHelper.getTagQuery(new SCFile(pdpatch["filename"]), pdpatch["tag"]);
        var obname=lib.upgradeHelper.getObjectNameFromTag(pdpatch["filename"], pdpatch["tag"]);
        var result=lib.upgradeUtility.getRecord("upgraderesults", "object.type=\""+pdpatch["filename"]+"\" and object.name=\""+obname+"\"");
        if (result!=null) {
            if (result["result"]=="Renamed") {
                var ret=cover(pdpatch["filename"], query, lib.upgradeConstants.NEW_PREFIX());
                if (ret) {
                    result["result"]="Replaced";
                }
            }
            result["version.reconciled"]="PD Enable: Replaced";
            result.doUpdate();
        } else {
            print("There is no result of "+pdpatch["tag"]);
        }
        rc=pdpatch.getNext();
    }
}

function updateResult4PD() {
    var pdpatch = new SCFile("pdpatches");
    var rc = pdpatch.doSelect("filename~=\"datadict\" and (action=\"add\" or action=\"update\")");
    while (rc==RC_SUCCESS) {
        var obname=lib.upgradeHelper.getObjectNameFromTag(pdpatch["filename"], pdpatch["tag"]);
        var result=lib.upgradeUtility.getRecord("upgraderesults", "object.type=\""+pdpatch["filename"]+"\" and object.name=\""+obname+"\"");
        if (result!=null) {
            result["version.reconciled"]="PD Enable: Updated";
            result.doUpdate();
        } else {
            print("There is no result of "+pdpatch["tag"]);
        }
        rc=pdpatch.getNext();
    }
}

function setRemoveResult4PD() {
    var pdpatch = new SCFile("pdpatches");
    var rc = pdpatch.doSelect("filename~=\"datadict\" and action=\"remove\"");
    while (rc==RC_SUCCESS) {
        var query=lib.upgradeHelper.getTagQuery(new SCFile(pdpatch["filename"]), pdpatch["tag"]);
        var obname=lib.upgradeHelper.getObjectNameFromTag(pdpatch["filename"], pdpatch["tag"]);
        var result=lib.upgradeUtility.getRecord("upgraderesults", "object.type=\""+pdpatch["filename"]+"\" and object.name=\""+obname+"\"");
        if (result!=null) {
            result["version.reconciled"]="PD Enable: Need to be removed";
            result.doUpdate();
        } else {
            var result = new SCFile("upgraderesults");
            result["object.type"] = pdpatch["filename"];
            result["object.name"] = obname;
            result["result"] = "Already Current"
            result["version.reconciled"]="PD Enable: Need to be removed";
            result["query"] = query;
            result.doInsert();
        }
        rc=pdpatch.getNext();
    }
}
</script>
    <package type="string">Upgrade</package>
    <sysmodtime type="dateTime">07/16/17 17:01:45</sysmodtime>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodcount type="decimal">0</sysmodcount>
    <prgnsystem NullValue="1" type="boolean"/>
    <sysrestricted NullValue="1" type="boolean"/>
  </record>
</recordset>
