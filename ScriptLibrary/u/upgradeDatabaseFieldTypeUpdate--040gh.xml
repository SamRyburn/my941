<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="ScriptLibrary">
  <record id="name=&quot;upgradeDatabaseFieldTypeUpdate&quot;" recordid="upgradeDatabaseFieldTypeUpdate">
    <name type="string">upgradeDatabaseFieldTypeUpdate</name>
    <script type="string">/**
*    							SM Upgrade
*    Scanning field type change, compare dbdict with upgradedbdict,update field type if necessary, 
*
*    Tod
*    2011-02-25
**/

var DB2_SHORT_BLOB_REGEX = /VARCHAR\(\d+\)\sFOR\sBIT\sDATA/;
var FIELD_LENGTH_REGEX = /\((\d+|MAX)\)/i;


/**
*   sql type data from "sqldbinfo" table:
*
*   SM			Oracle		Sqlserver		DB2
*	number		number		float			double
*	character	varchar2	varchar			varchar
*	date/time	date		datetime		timestamp
*	logical		char(1)		char(1)			char(1)
*	label		varchar2	varchar			varchar
*	expression	blob		image			BLOB(1M) NOT LOGGED COMPACT
*	record					image	
*	Long Text 	clob		text			CLOB(1M) NOT LOGGED COMPACT
*	Long Blob 	blob		image			BLOB(1M) NOT LOGGED COMPACT
*	Short Blob	raw(255)	varbinary(255)	varchar(255) FOR BIT DATA
**/
var SQL_TYPE_INDEX =  [
					{ type : "NUMB", index : 0, ntype : false },
				    { type : "FLOA", index : 0, ntype : false },
					{ type : "DOUB", index : 0, ntype : false },
					{ type : "VARC", index : 1, ntype : false },
					{ type : "NVAR", index : 1, ntype : true }, // NVARCHAR
					{ type : "VARG", index : 1, ntype : true }, // vargraphic  NVARCHAR in db2
					{ type : "DATE", index : 2, ntype : false },
					{ type : "TIME", index : 2, ntype : false },
					{ type : "CHAR", index : 3, ntype : false },
					{ type : "NCHA", index : 3, ntype : true }, // NCHAR
					{ type : "GRAP", index : 3, ntype : true }, // graphic  NCHAR in db2
					{ type : "CLOB", index : 4, ntype : false },
					{ type : "TEXT", index : 4, ntype : false },
					{ type : "NCLO", index : 4, ntype : true }, // NCLOB
					{ type : "NTEX", index : 4, ntype : true }, // NTEXT
				    { type : "DBCL", index : 4, ntype : true }, // dbclob   NCLOB in db2
					{ type : "RAW(", index : 5, ntype : false },
					{ type : "VARB", index : 5, ntype : false },
					{ type : "BLOB", index : 6, ntype : false },
					{ type : "IMAG", index : 6, ntype : false }
				];
// SQL Field that can't be find in SQL_TYPE_INDEX
var UNDEFINED_INDEX = 20; 

var SQL_TYPE_FULLNAME = {
						0 : [ ],
						1 : [ "VARCHAR" ,"VARCHAR2","VARCHAR" ],
					   10 : [ "NVARCHAR", "NVARCHAR", "VARGRAPHIC" ],
						2 : [ ],
						3 : [ "CHAR", "CHAR", "CHAR" ],
					   30 : [ "NCHAR", "NCHAR", "GRAPHIC"],
						4 : [ "TEXT", "CLOB", "CLOB(1M) NOT LOGGED COMPACT"],
						5 : [ "VARBINARY", "RAW",  "VARCHAR(255) FOR BIT DATA"  ],
						6 : [ "IMAGE",     "BLOB", "BLOB(1M) NOT LOGGED COMPACT" ] 
					};	

// SQL type index is from SQL_TYPE_INDEX					
var CONVERT_MATRIX = { 
						 0 : [],
						 1 : [1, 3, 6],
						 2 : [], 
						 3 : [1, 3, 5, 6],
						 4 : [],
						 5 : [],
						 6 : []										  				
						};
						
// refer to "DataTypeConst" in ScriptLibrary
var SM_TYPE = {
					1 : "number",
					2 : "character",
					3 : "date/time",
					4 : "logical",
					5 : "label",
					8 : "array",
					9 : "structure",
					11 : "expression"
					
};
			
String.prototype.startsWith = function(str){
    return (this.indexOf(str) === 0);
};
					
/**
*  apply database field type change 
*  called in RAD: apm.upgrade.dbdict  merge.field panel
*  @param  oldfile  old SM dbdict scfile
*  @param  newfile  new SM dbdict scfile
*  @return  change status   true/false
**/
function applyFieldTypeChange(oldfile, newfile) {
	if (oldfile != null &amp;&amp; newfile != null) {
		var dbdictObjArray = createDbdictObjectArray(oldfile);
		var upgradedbdictObjArray = createDbdictObjectArray(newfile);
		return compareDbdictObjArray(dbdictObjArray, upgradedbdictObjArray, oldfile, newfile);
	}
	
	return false;
}

/**
*  create array of dbdict field object 
*
*  @param  dbdict     SM dbdict
*  @return  dbdict object array
**/
function createDbdictObjectArray(dbdict) {
	var dbdictFieldArray = [];
	var i, length;
	for (i = 0, length = dbdict.field.length(); i &lt; length; i++) {
		dbdictFieldArray[i] = createDbdictObject(dbdict.field[i].name, dbdict.field[i].type,
			dbdict.field[i].level, null, 
			dbdict.field[i].sql_field_options?dbdict.field[i].sql_field_options.sql_table_alias:null,
			dbdict.field[i].sql_field_options?dbdict.field[i].sql_field_options.sql_column_name:null, 
			dbdict.field[i].sql_field_options?dbdict.field[i].sql_field_options.sql_data_type:null,
			dbdict.field[i].sql_field_options?dbdict.field[i].sql_field_options.sql_rcformat:null);
	}
	return dbdictFieldArray;
}

/**
*  create dbdict field object 
*
*  @param  name     field name 
*  @param  smType   type in SM
*  @param  level    SM field level
*  @param  index    sql data type index defined in array "SQL_TYPE_INDEX"
*  @param  sqlTableAlias	field table alias in database
*  @param  sqlColumnName   	field name in database
*  @param  sqlDataType   	field type in database
*  @param  sqlRC   			field rc format in database
**/
function createDbdictObject(name, smType, level, index, sqlTableAlias, sqlColumnName, sqlDataType, sqlRC) {
	var obj = {};
	obj.name = name;
	obj.smType = smType;
	obj.level = level;
	obj.index = index;
	obj.sqlTableAlias = sqlTableAlias;
	obj.sqlColumnName = sqlColumnName;
	obj.sqlDataType = sqlDataType;
	obj.sqlRC = sqlRC;
	return obj;
}

/**
*  compare dbdict with upgradedbdict
*
*  @param  array1   old dbdict fields array
*  @param  array2   new dbdict fields array
*  @param  oldfile  old dbdict file
*  @param  newfile  new dbdict file
**/
function compareDbdictObjArray(array1, array2, oldfile, newfile) {
	var changed = false;
	if (array1 != null &amp;&amp; array2 != null) {
		var i, j;
		for (i=0; i&lt;array1.length; i++) {
			for (j=0; j&lt;array2.length; j++) {	
				if (array1[i].name == array2[j].name
					 &amp;&amp; array1[i].level == array2[j].level) {
				    if (compareFields(array1[i], array2[j], oldfile.field[i], oldfile.name)) {
				    	changed = true;
				    }
					break;
				}
			}
		}
	}
	return changed;
}

/**
*  compare and update fields
*  
*  @param  oldObj    		old dbdict field object
*  @param  newObj    		new dbdict field object
*  @param  oldfilefield   	old filed database type (referenced variable)
*  @param  tableName      	SM table name
**/
function compareFields(oldObj, newObj, oldfilefield, tableName) {	

	var currentType = oldObj.sqlDataType;
	var upgradeType = newObj.sqlDataType;
	
	var currentTypeObj;	
	var upgradeTypeObj;	
	var currentTypeIndex;
	var upgradeTypeIndex;
	

	if (currentType == null &amp;&amp; upgradeType == null) 
	{
		return false;
	}
	else if (currentType != null &amp;&amp; upgradeType == null) 
	{

		lib.upgradeLog.scError(1157, [tableName, oldObj.name, currentType, "EMPTY"]);
		return false;
	}
	else if (currentType == null &amp;&amp; upgradeType != null) 
	{
	
		//SQLSERVER and DB2 convert to Oracle
		upgradeTypeObj = getSqlTypeIndex(upgradeType);	
		upgradeTypeIndex = upgradeTypeObj.index;
		
		if (oldObj.smType == newObj.smType) 
		{
			// synchronize sql type for the log
			upgradeType = convertSqlTypeByDb(upgradeTypeIndex, upgradeTypeIndex, upgradeType, upgradeType, upgradeTypeObj.ntype);   
			
			//SQL RC flag change will trigger RTE full table copy, disable it due to performace issue and log to expect log for workaround						
			if (isLargeDataType(upgradeTypeIndex)) 
			{  
				lib.upgradeLog.scError(1157, [tableName, oldObj.name, "EMPTY", upgradeType]);  							
			} 
			else
			{
				// Log: Updating field SQL type table for %S in %S dbdict from %S to %S
				lib.upgradeLog.scDetail(1150, [oldObj.name, tableName, "EMPTY", upgradeType]);					
					
				oldfilefield.sql_field_options.sql_table_alias = newObj.sqlTableAlias;
				oldfilefield.sql_field_options.sql_column_name = newObj.sqlColumnName;
				oldfilefield.sql_field_options.sql_data_type = upgradeType;
				oldfilefield.sql_field_options.sql_rcformat = newObj.sqlRC;
					
				return true;
			}								
		}
		
		return false;
	}
							
	
	//SQLSERVER and DB2 convert to Oracle
	currentTypeObj = getSqlTypeIndex(currentType);	
	currentTypeIndex = currentTypeObj.index;
	upgradeTypeObj = getSqlTypeIndex(upgradeType);
	upgradeTypeIndex = upgradeTypeObj.index;	
	
	if ( oldObj.smType == newObj.smType ) 
	{
		if (currentTypeIndex != upgradeTypeIndex || currentTypeObj.ntype != upgradeTypeObj.ntype ) 
		{
			upgradeType = convertSqlTypeByDb(currentTypeIndex, upgradeTypeIndex, currentType, upgradeType, currentTypeObj.ntype); 
			if (currentType == upgradeType)
			    return false;
			    
			if (getDbType() == 0 &amp;&amp; (currentType == "NVARCHAR(MAX)" || currentType == "NTEXT")) {
			    if (upgradeType == "TEXT")
			        return false;
			}
			
			if (findTypeFromMatrix(currentTypeIndex, upgradeTypeIndex)) 
			{
				// synchronize sql type for the log
				//upgradeType = convertSqlTypeByDb(currentTypeIndex, upgradeTypeIndex, currentType, upgradeType, currentTypeObj.ntype);   
				
				//QCCR67397
				//SQL RC flag change will trigger RTE full table copy, disable it due to performace issue and log to expect log for workaround						
				if (isLargeDataType(upgradeTypeIndex)) 
				{  
					lib.upgradeLog.scError(1157, [tableName, oldObj.name, currentType, upgradeType]);  							
				} 
				else
				{
					// Log: Updating field SQL type table for %S in %S dbdict from %S to %S
					lib.upgradeLog.scDetail(1150, [oldObj.name, tableName, currentType, upgradeType]);					
					oldfilefield.sql_field_options.sql_data_type = upgradeType;
					return true;
				}			
			} 
			else 
			{
				//upgradeType = convertSqlTypeByDb(currentTypeIndex, upgradeTypeIndex, currentType, upgradeType, currentTypeObj.ntype);
				if(!lib.upgradeCompareDbdict.isMoved2AliasAuto(tableName, oldObj.name, oldObj.smType))
				{
					lib.upgradeLog.scError(1157, [tableName, oldObj.name, currentType, upgradeType]);
				}
			}									
		}			
	}
	return false;
}


/**
*    convert field sql type to base on database type, compare sql type field length , 
*    and choose the longer one as new sql field length
*
*    @param  oldTypeIndex    old sql type index (index in array SQL_TYPE_INDEX)
*    @param  newTypeIndex    new sql type index (index in array SQL_TYPE_INDEX)
*    @param  oldType         old sql type
*    @param  newType         new sql type
*    @return converted sql type
*    
*    eg: input 1  3  varchar2(63)	 char(60)	---&gt; VARCHAR2(63)	
**/											
function convertSqlTypeByDb(oldTypeIndex, newTypeIndex, oldType, newType, isNtype) {
	var db = getDbType();
	var length;
	
	switch (newTypeIndex) {
		// VARCHAR  
		case 1:
		// CHAR	
		case 3:
			length = compareSqlTypeLength(oldTypeIndex, oldType, newType);	
			if (isNtype) {
				newTypeIndex *= 10;
			} 		
			return SQL_TYPE_FULLNAME[newTypeIndex][db] + length;
		// CLOB
		case 4:
		    return SQL_TYPE_FULLNAME[4][db];
		// SHORT BLOB
		case 5:
			length = compareSqlTypeLength(oldTypeIndex, oldType, newType);
			if (db == 2) {
				return SQL_TYPE_FULLNAME[5][db].replace("(255)", length);
			} else {
				return SQL_TYPE_FULLNAME[5][db] + length;
			}
		//BLOB	
		case 6:	
			return SQL_TYPE_FULLNAME[6][db];
		default:
			return newType;
	}
}


/**
*   compare sqlType length, update the new sqltype, if its length less than the old one.
*   
*   eg: old dbdict type = VARCHAR(62) new dbdict type = CHAR(60) 
*       the result should be CHAR(62)
**/
function compareSqlTypeLength(oldTypeIndex, oldType, newType) {
	var newLength = newType.match(FIELD_LENGTH_REGEX)[1];
	if (newLength.toUpperCase() == "MAX") {
		return "(MAX)";
	}
	
	if (oldTypeIndex == 1 || oldTypeIndex == 3) {		
		var oldLength = oldType.match(FIELD_LENGTH_REGEX)[1];
		if (oldLength.toUpperCase() == "MAX") {
			return "(MAX)";
		}
		
		// return the longer length for extending the new length		
		return "(" + Math.max(oldLength, newLength) + ")"; 
	}
	
	return "(" + newLength + ")";
}


/**
* QCCR1E120465
* Upgrade Utility is built in Oracle db so the SQL Type of date/time fields are built to DATE in upgrade.str.
* When upgrade in DB2, the SQL Type is set to DATE. But it should be TIMESTAMP.
* This function replaces the SQL Type DATE to TIMESTAMP for DB2. 
* It is invoked in the panel fcreate of apm.upgrade.dbdict before new dbdict is created.  
**/
function updateDateSqlType(dbdict) {
    if (dbdict == null) {
        return;
    }
    
    if (getDbType() != 2) { 
        return;
    }
        
    var i, length;
    for (i = 0, length = dbdict["field"].length(); i &lt; length; i++) {
        if (dbdict["field"][i] == null || dbdict["field"][i]["sql.field.options"] == null) {
            continue;
        }
        var sqltype = dbdict["field"][i]["sql.field.options"]["sql.data.type"];
        if (sqltype != null &amp;&amp; sqltype.toUpperCase() == "DATE") {
            dbdict["field"][i]["sql.field.options"]["sql.data.type"] = "TIMESTAMP";
            lib.upgradeLog.detail("The SQL Type of the field " + dbdict["field"][i]["name"] + " is " + "TIMESTAMP");
        }
    }
}
	
/**
*   query dbdict table sql db type as SM db type
*	
*	Assumption: 1. the SM instance has only one database type (SM allow connect to different database type)
*               2. dbdict record exists in dbdict table
*   
*	@return current database type  0 --&gt; sqlserver / 1 --&gt; oracle / 2 --&gt; db2
**/
function getDbType() {
	if (system.vars.$G_current_db_type == null) {
		var dbdict = new SCFile("dbdict", SCFILE_READONLY);
		var rc = dbdict.doSelect("name=\"dbdict\""); // only one record
		if (rc == RC_SUCCESS) {
			switch (dbdict.sql_tables.sql_db_type.charAt(0)) {
				case "s":
					system.vars.$G_current_db_type = 0;
					break;
				case "o":
					system.vars.$G_current_db_type = 1;
					break;
				case "d":
					system.vars.$G_current_db_type = 2;
					break;
			}
		} 
	} 
	return system.vars.$G_current_db_type;
}


/**
*    find sql type convert support matrix 
*
*	@param    currentTypeIndex
*   @param    upgradeTypeIndex
*   @return   true(support)/false(Not support)
**/			
function findTypeFromMatrix(currentTypeIndex, upgradeTypeIndex) {
	if (currentTypeIndex != UNDEFINED_INDEX) {
		var i;
		for (i=0; i&lt;CONVERT_MATRIX[currentTypeIndex].length; i++) {
			if (CONVERT_MATRIX[currentTypeIndex][i] == upgradeTypeIndex) {
				return true;
			}
		}
	
	}
	// DO NOT SUPPORT CONVERT
	return false;
}

/**
*   get sqlType index (index in array SQL_TYPE_INDEX)
*
*   @param type  sql type
*   @return index number
**/
function getSqlTypeIndex(type) {
	// structure like  "VARCHAR(*) FOR BIT DATA"
	if (type.match(DB2_SHORT_BLOB_REGEX) != null) {
		return { index : 5, ntype : false };
	}
	// cut type string
	type = type.substr(0,4); 
	
	var i;
	for (i=0; i&lt;SQL_TYPE_INDEX.length; i++) {
		if (SQL_TYPE_INDEX[i].type == type) {
			return SQL_TYPE_INDEX[i];
		}
	}
	
	// LOG: SQL type do not defined
	// lib.upgrade.scError()
 	return { index : UNDEFINED_INDEX, ntype : false };
}

	
function isLargeDataType(type) {
	if (type == 4 || type == 5 || type == 6) {
		return true;
	}
	else {
		return false;
	}
}

</script>
    <package type="string">Upgrade</package>
    <sysmodtime type="dateTime">07/16/17 16:56:39</sysmodtime>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodcount type="decimal">95</sysmodcount>
    <prgnsystem NullValue="1" type="boolean"/>
    <sysrestricted NullValue="1" type="boolean"/>
  </record>
</recordset>
