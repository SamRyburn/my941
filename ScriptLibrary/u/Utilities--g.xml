<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="ScriptLibrary">
  <record id="name=&quot;Utilities&quot;" recordid="Utilities">
    <name type="string">Utilities</name>
    <script type="string">/**
* Basic utilities for support other function
*
* Author: Beddy(guo.zou@hp.com)
*/

function getElementFromTag(lTag, lIndex, lEscStr)
{
    var rlt = new String();
    var arr = getElementsFromTag(lTag, lEscStr);
    var arrLen = system.functions.lng(arr);

    if (lIndex &lt; arrLen)
    {
        rlt = arr[lIndex];
    }
    
    return rlt;
}

function getElementsFromTag(lTag, lEscStr)
{
    var elem = new Array();
    if (lTag == null) return elem;
    
    if (!lEscStr)
    {
        lEscStr = ";";
    }
    
    var lastIdx = -1;
    var thisIdx = -1;
    while (true)
    {
        lastIdx = thisIdx;
        do
        {
            thisIdx = lTag.indexOf(lEscStr, thisIdx + 1);
        } while (thisIdx &gt; 0 &amp;&amp; lTag.substr(thisIdx - 1,1) == "\\");
        
        if (thisIdx &gt; 0)
        {
            var tmp = lTag.substring(lastIdx + 1, thisIdx);
            tmp = tmp.replace("\\;", ";", "g");
            elem.push(tmp);
        }
        else
        {
            var tmp = lTag.substr(lastIdx + 1);
            tmp = tmp.replace("\\;", ";", "g");
            elem.push(tmp);
            break;
        }
    }
    
    return elem;
}

function getKeyValueFromTag(lTag, lKeyName, lEscStr)
{
    var rtnValue = null;
    if (!lKeyName) return rtnValue;
    lKeyName = lKeyName.toUpperCase(); // Key name to upper case
    
    var arr = getElementsFromTag(lTag, lEscStr);
    var table = new SCFile("dbdict");
    var rlt = table.doSelect("name=\"" + arr[0] + "\"");
    if (rlt == RC_SUCCESS)
    {
        var keyLen = system.functions.lng(system.functions.denull(table.key));
        for (var i = 0; i &lt; keyLen; i++)
        {
            if (table.key[i].flags == 12) // Unique key
            {
                var uniqueKey = table.key[i].name;
                var uniqueKeyLen = system.functions.lng(system.functions.denull(uniqueKey));
                for (var j = 0; j &lt; uniqueKeyLen; j++)
                {
                    if (uniqueKey[j].toUpperCase() == lKeyName &amp;&amp; arr.length &gt; j + 1)
                    {
                        rtnValue = arr[j + 1];
                        break;
                    }
                }
            }
        }
    }
    if (rtnValue == "NULL") rtnValue = null; // NULL value process
    
    return rtnValue;
}

function trim(str)
{
    if (str != null)
    {
        str = str.replace(/(^\s*)|(\s*$)/g, "");
    }
    
    return str;
}

function escstr(str)
{
	if(str != null)
	{
		str = str.replace( /\\/g, "\\\\" ).replace( /"/g, "\\\"" );
	}
	
	return str;
}

function sprintf(formatString)
{
    var fsAry = formatString.split('%');
    var len = Math.min(fsAry.length, arguments.length);
    var is = 1;
    for (var i = 1; i &lt; len; i++)
    {
       var tmpz = fsAry[i].charAt(0);
       if (tmpz == 's' || tmpz == 'S')
       {
           fsAry[i] = arguments[is] + fsAry[i].substr(1);
           is++;
       }
       else
       {
           var idx = fsAry[i].search(/[sS]/);
           if (idx &gt; 0)
           {
               var tmpfc, tmplen;
               if (idx == 1)
               {
                   tmpfc  = ' ';
                   tmplen = parseInt(tmpz);
               }
               else
               {
                   tmpfc  = tmpz;
                   tmplen = parseInt(fsAry[i].substring(1, idx));
               }
               var tmps = String(arguments[is]);
               is++;
               tmplen -= tmps.length;
               while (tmplen &gt; 0)
               {
                   tmps = tmpfc + tmps;
                   tmplen--;
               }
               fsAry[i] = tmps + fsAry[i].substr(idx + 1);
           }
           else
           {
               fsAry[i] = '%' + fsAry[i];
           }
       }
    }
    
    return fsAry.join('');
}

function strquery(formatString)
{
    var str = formatString;
    var len = arguments.length;
    for (var i = 1; i &lt; len; i++)
    {
        str = str.replace(/\%[sS]/, escstr(String(arguments[i])));
    }
    
    return str;
}

/*
validate globallist edit 
String as {"aaa","bbb",ccc,",d,d,d,","aa,,bb"}
sub "{","}"not supported in the string
@Author: huan.li@hp.com 
*/
function getStrArrayLength(stringValue)
{
	var str0 = stringValue;
	if(str0==null || str0=="")return 0;
	var str = str0.match( /\{\s*(.*)\s*\}/ );
	if(str!=null &amp;&amp; str.length&gt;1)
	{
		str = str[1] + ","
	}
	else return 0;
	var arr = str.match( /((("((\\["'\\])|[^\\"])*")|('((\\["'\\])|[^\\'])*'))|([^",]*))\s*,/g );
	return arr.length;
}</script>
    <package type="string">ScAPI</package>
    <sysmodtime type="dateTime">03/16/11 17:46:45</sysmodtime>
    <sysmoduser type="string">Huan.Li</sysmoduser>
    <sysmodcount type="decimal">22</sysmodcount>
    <prgnsystem NullValue="1" type="boolean"/>
    <sysrestricted NullValue="1" type="boolean"/>
  </record>
</recordset>
