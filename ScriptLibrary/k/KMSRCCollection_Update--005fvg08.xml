<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="ScriptLibrary">
  <record id="name=&quot;KMSRCCollection_Update&quot;" recordid="KMSRCCollection_Update">
    <name type="string">KMSRCCollection_Update</name>
    <script type="string">/*   @author Heron Li
*/
function nosql_reindex(tablename, key)
{
	  var result = 0;
      result = system.library.KMAdmin.kmadminlock();
      if (result != 0)
          return -3;
	  var servername = nosql_getservername();
	  if (servername==null)
	  {
	  	  system.library.KMAdmin.kmadminunlock();
	  	  print(system.functions.scmsg(247, "km"));
	  	  return -1;
	  }
      var getenginename = system.library.KMSearchInterface.getEngineName();
	  if (getenginename != "IDOL")
	  {
	     var strxml = nosql_getSearchEngineConfig(servername, "admin");// index , search
	     result = system.library.KMSearchInterface.initializeEngine(strxml);
	     if (result == -1)
	     {
	     	system.library.KMAdmin.kmadminunlock();
	     	print(system.functions.scmsg(224, "km"));
	     	return -1;
	     }
	  }
	  result = system.library.KMCollection_Delete.deleteCollection(system.library.KMUtils.scToJSName(tablename));
  	  if (result != 0)
  	  {
  	  	system.library.KMAdmin.kmadminunlock();
  	  	return -1;
  	  }
	  // check for slaves here, call configure and create for master and slaves...
	  var strXML;
	  var serverFile = new SCFile("kmsearchservers");
      var serverFind = serverFile.doSelect("servername = \""+servername+"\"");
      if (serverFind == RC_SUCCESS)
	  {
			serverFind = serverFile.getFirst();
			var kbfile = new SCFile("kmknowledgebase");
		   	kbfile.kbname = tablename;
		   	kbfile.kbtype = "sclib";
		   	kbfile.docid = key;
		    kbfile.searchservername = servername;
		    kbfile.sclibtablename = tablename;
		    kbfile.interval = 1;
		    kbfile.locale = "en";
			for (var y = 0; y &lt; serverFile.servers.length(); y++)
			{
				var strCfg = "&lt;SEConfig&gt;";
				strCfg += "&lt;adminhost&gt;"+ serverFile.servers[y].hostname + "&lt;/adminhost&gt;";
				strCfg += "&lt;adminport&gt;" + serverFile.servers[y].port + "&lt;/adminport&gt;";
				strCfg += "&lt;admininstance&gt;" + serverFile.servers[y].searchinstancename + "&lt;/admininstance&gt;";
				strCfg += "&lt;webdav&gt;" + serverFile.webdavname + "&lt;/webdav&gt;";
				strCfg += "&lt;/SEConfig&gt;";
				result = system.library.KMSearchInterface.initializeEngine(strCfg);
				if(serverFile.servers[y].servertype == "master" &amp;&amp; result == 0)
				{
					var xmlstr = system.library.KMUtils.recordToXML(kbfile);
	  				result = system.library.KMCollection_Configure.configureCollection(xmlstr);
	  				if (result != 0)
  	  				{
  	  					system.library.KMAdmin.kmadminunlock();
  	  					return -1;
  	  				}
	  				result = system.library.KMCollection_Create.createCollection(system.library.KMUtils.scToJSName(tablename));		  
	  				if (result != 0)
  	  				{
  	  					system.library.KMAdmin.kmadminunlock();
  	  					return -1;
  	  				}
  	  			}
  	  			if(serverFile.servers[y].servertype == "slave" &amp;&amp; result == 0)
  	  			{
  	  				strXML = "&lt;collectioninfo&gt;";
					strXML += "&lt;indexname&gt;"+tablename+"&lt;/indexname&gt;";
					strXML += "&lt;indextype&gt;master&lt;/indextype&gt;";
					strXML += "&lt;/collectioninfo&gt;"; 
					aStats = system.library.KMSearchInterface.getIndexStatistics(strXML);
					if(aStats.length() &gt; 0 &amp;&amp; aStats[0] != "OK" )
					{
						var xmlstr = system.library.KMUtils.recordToXML(kbfile);
	  					result = system.library.KMCollection_Configure.configureCollection(xmlstr);
	  					if (result != 0)
  	  					{
  	  						system.library.KMAdmin.kmadminunlock();
  	  						return -1;
  	  					}	
						result = system.library.KMCollection_Create.createCollection(system.library.KMUtils.scToJSName(tablename));		  
	  					if (result != 0)
  	  					{
  	  						system.library.KMAdmin.kmadminunlock();
  	  						return -1;
  	  					}
					}
  	  			}
  	  			if(serverFile.servers[y].servertype == "slave" &amp;&amp; result != 0)
  	  			{
  	  				print("Slave server: "+serverFile.servers[y].hostname+" offline, skipping..");
  	  			}
  	  			if(serverFile.servers[y].servertype == "master" &amp;&amp; result != 0)
				{
					print("Master server: "+serverFile.servers[y].hostname+" offline, stopping..");
				}
  	  		}
  	  		result = submitDocs(tablename,key,servername);
			if (result != 0)
			{
				system.library.KMAdmin.kmadminunlock();
				return result;
			}
			else
			{
				var slaveXML = system.library.KMCollection_Update_Utils.getSlaveXML(servername);
		  		if (slaveXML.length &gt; 0)
		  		{
			   		var closeIndexXML = "";
			       	closeIndexXML = "&lt;closeindex&gt;&lt;indexname&gt;"+system.library.KMUtils.scToJSName(tablename)+"&lt;/indexname&gt;";
			       	closeIndexXML += slaveXML;
			       	closeIndexXML += "&lt;/closeindex&gt;";
			       	var close_result = system.library.KMSearchInterface.closeIndex(closeIndexXML);
			    }
			}
  	  	}	
  	  	else
  	  	{
  	  		system.library.KMAdmin.kmadminunlock();
  	  		return -1;  
	  	}
	   	return system.library.KMAdmin.kmadminunlock(); 
}

function submitKMDoctype(key,servername)
{
	var result=0;
	var strCfg = nosql_getSearchEngineConfig(servername, "index");
	if (strCfg.length == 0)
	{
		return -1;
	}
	result = system.library.KMSearchInterface.initializeEngine(strCfg);
	if (result != 0)
	{
		return -1;
	}
	result = system.library.KMSearchInterface.openIndex(system.library.KMUtils.scToJSName("kmdoctype"));
	if (result !=0)
  		return -1;
  	print("Preparing to submit kmdoctype records...");
	var tablefile = new SCFile("kmdoctype");
	var tablefind = tablefile.doSelect("true");
	var errorCount=0;
	var totalCount=0;
	while (tablefind==RC_SUCCESS)
	{
		var lang = new SCFile("language");
		var query ="true";
		var langret = lang.doSelect(query);
		while (langret == RC_SUCCESS)
		{
			var tmpfile = new SCFile("kmdoctype");
			system.functions.fduplicate(tmpfile,tablefile);
			var views = tmpfile.format_view;
			var langcode = lang.unique_id;
			totalCount++;
			var keyValue = tablefile[key];
			var indexDoc = system.library.KMDocument_Index.indexDocOpen("kmdoctype", keyValue, langcode, indexDoc);
	 	 	indexDoc = system.library.KMDocument_Index.setDocumentFieldValue("key", keyValue, indexDoc);
	 	 	for (var i=0;i&lt;system.functions.lng(views);i++)
	 	 	{
		 	 	var strData = views[i].view_data;
	            strData = system.library.KMSRCCollection_Update.replaceSCMSGTokens(strData,langcode);
	            tmpfile.format_view[i].view_data=strData;
	 	 	}
	 	 	var xmlRecField = system.library.KMUtils.recordToXML(tmpfile);
	 	 	indexDoc = system.library.KMDocument_Index.setDocumentFieldValue("xmlRec",xmlRecField,indexDoc);
	 	 	result = system.library.KMDocument_Index.commitDocument("kmdoctype", indexDoc);
	 	 	if (result!=0)
	 	 	{
	 	 		errorCount++;
	 	 		return -2;
	 	 	}
	 	 	langret = lang.getNext();
	 	 }
	 	 tablefind = tablefile.getNext();
	}
	print("Submit Total:" + totalCount+" ;Fail: "+errorCount);
	var closeIndexXML = "";
    closeIndexXML = "&lt;closeindex&gt;&lt;indexname&gt;"+system.library.KMUtils.scToJSName("kmdoctype")+"&lt;/indexname&gt;";
    closeIndexXML += "&lt;/closeindex&gt;";
    result = system.library.KMSearchInterface.closeIndex(closeIndexXML);
    if (result != 0)
	{
		system.library.KMAdmin.kmadminunlock();
		return -1;
	}
	return result;
}


function replaceSCMSGTokens(theView,langcode)
{
	if (theView == null) return "";
	var spec_loc2 = theView.indexOf("*SCMSG");
	var tmpFld3 = "";
	var tmpVal2 = "";
	while (spec_loc2 &gt;= 0)
	{
		tmpFld3 = theView.substring(spec_loc2 + 7, theView.length);
		tmpFld3 = tmpFld3.substring(0, tmpFld3.indexOf("*SCMSG"));
 		tmpVal2 = eval("getLangScmsg(langcode," + tmpFld3 + ", \"km\");");
	 	if (tmpVal2 == null)
	 	{
	 		tmpVal2 = "";
	 	}
		theView = theView.substring(0, spec_loc2) + tmpVal2 + theView.substring((theView.indexOf(tmpFld3 + "*SCMSG")+tmpFld3.length+7), theView.length);
		spec_loc2 = theView.indexOf("*SCMSG");   
	}
	return theView;
}

function getLangScmsg(langcode,msgID,className)
{
	var lang = new SCFile("scmessage");
	var query = "syslanguage=\""+ langcode +"\" and class=\""+className+"\" and message.id=\""+ msgID +"\"";
	var ret = lang.doSelect(query);
	if (ret == RC_SUCCESS)
	{
		return lang.message;
	}
	else return null;
}

function submitDocs(tablename,key,servername)
{
	if (tablename=="kmdoctype")
	{
		return submitKMDoctype(key,servername);
	}
	else 
	{
		return submitTableDocs(tablename,key,servername);
	}
}

function submitTableDocs(tablename,key,servername)
{
	var result=0;
	var strCfg = nosql_getSearchEngineConfig(servername, "index");
	if (strCfg.length == 0)
	{
		return -1;
	}
	result = system.library.KMSearchInterface.initializeEngine(strCfg);
	if (result != 0)
	{
		return -1;
	}
	result = system.library.KMSearchInterface.openIndex(system.library.KMUtils.scToJSName(tablename));
	if (result !=0)
  		return -1;
  	print("Preparing to submit "+tablename+ " records...");
	var tablefile = new SCFile(tablename);
	var tablefind = tablefile.doSelect("true");
	var errorCount=0;
	var totalCount=0;
	while (tablefind==RC_SUCCESS)
	{
		totalCount++;
		var keyValue = tablefile[key];
		var indexDoc = system.library.KMDocument_Index.indexDocOpen(tablename, keyValue, 0, indexDoc);
		var xmlRecField = system.library.KMUtils.recordToXML(tablefile);
 	 	indexDoc = system.library.KMDocument_Index.setDocumentFieldValue("key", keyValue, indexDoc);
 	 	indexDoc = system.library.KMDocument_Index.setDocumentFieldValue("xmlRec",xmlRecField , indexDoc);
 	 	result = system.library.KMDocument_Index.commitDocument(tablename, indexDoc);
 	 	if (result!=0)
 	 	{
 	 		errorCount++;
 	 		return -2;
 	 	}
 	 	tablefind = tablefile.getNext();
	}
	print("Submit Total:" + totalCount+" ;Fail: "+errorCount);
	var closeIndexXML = "";
    closeIndexXML = "&lt;closeindex&gt;&lt;indexname&gt;"+system.library.KMUtils.scToJSName(tablename)+"&lt;/indexname&gt;";
    closeIndexXML += "&lt;/closeindex&gt;";
    result = system.library.KMSearchInterface.closeIndex(closeIndexXML);
    if (result != 0)
	{
		system.library.KMAdmin.kmadminunlock();
		return -1;
	}
	return result;
}

function nosql_getservername()
{
	var environment = new SCFile("environment");
	var query = "name=\"knowledge management\" and src=true";
	var rc= environment.doSelect(query);
	if (rc==RC_SUCCESS)
	{
		return environment.searchservername;
	}
	else return null;
}

function nosql_getSearchEngineConfig(searchservername, type)
{
	var searchserversFile = new SCFile("kmsearchservers");
	if (type == "admin" || type == "index")
		var searchserverFind = searchserversFile.doSelect("servername = \""+searchservername+"\"");
	else
		var searchserverFind = searchserversFile.doSelect("true");
	if (searchserverFind == RC_SUCCESS)
	{
		searchserverFind = searchserversFile.getFirst();
		while (searchserverFind == RC_SUCCESS)
		{
			var indexinstancename = searchserversFile.searchinstancename;
			var webdav = searchserversFile.webdavname;
			var searchinstancename = searchserversFile.searchinstancename;			
		    
		    for (var y =0; y &lt;searchserversFile.servers.length(); y++)
		    {
		    	if(searchserversFile.servers[y].servertype == "master")
		    	{
					var indexhostname = searchserversFile.servers[y].hostname;
					var indexport = searchserversFile.servers[y].port;
				}
				
				if(searchserversFile.servers[y].primarysearcher)
				{
					var args = new Datum();
					args.setType(8);
    				args.push(searchserversFile.servers[y].hostname);
					args.push(searchserversFile.servers[y].port);
					args.push(searchserversFile.searchinstancename);
					var pingResponse =system.library.KMSearchInterface.pingEngine(args)
					if(pingResponse == RC_SUCCESS)
					{
						searchServerFound = true;
						var searchhostname = searchserversFile.servers[y].hostname;
						var searchport = searchserversFile.servers[y].port;
					}
				}
			}
			if (!searchserverFind)
				searchserverFind = searchserversFile.getNext();
			else
				break;
		}
	}
	
	var strCfg = "&lt;SEConfig&gt;"
	
	if (type == "index")
	{
		strCfg += "&lt;indexhost&gt;"+ indexhostname + "&lt;/indexhost&gt;";
		strCfg += "&lt;indexport&gt;" + indexport + "&lt;/indexport&gt;";
		strCfg += "&lt;indexinstance&gt;" + indexinstancename + "&lt;/indexinstance&gt;";
	}
	else
	if (type == "admin")
	{
		strCfg += "&lt;adminhost&gt;"+ indexhostname + "&lt;/adminhost&gt;";
		strCfg += "&lt;adminport&gt;" + indexport + "&lt;/adminport&gt;";
		strCfg += "&lt;admininstance&gt;" + indexinstancename + "&lt;/admininstance&gt;";
		strCfg += "&lt;webdav&gt;" + webdav + "&lt;/webdav&gt;";
	}
	else
	if (type == "search")
	{
		strCfg += "&lt;searchhost&gt;"+ searchhostname + "&lt;/searchhost&gt;";
		strCfg += "&lt;searchport&gt;" + searchport + "&lt;/searchport&gt;";
		strCfg += "&lt;searchinstance&gt;" + searchinstancename + "&lt;/searchinstance&gt;";
	}
	strCfg += "&lt;/SEConfig&gt;";
	return strCfg;
}

function SRCReindex()
{
  	var result = nosql_reindex("kmdoctype", "name");
  	if (result!=0)
  	{
  		return result;
  	}
  	else result = nosql_reindex("kmstopword", "langcode");
  	if (result!=0)
  	{
  		return result;
  	}
  	//submit docs for kmlib
	reindexKMLib();
  	print("Full reindex finished.");
  	return result;
}
/**
 * fix for QCCR1E120089, call re-index function with $L.file='Knowledge_Library' context
 */
function reindexKMLib(){
	//save current $L.file to temp variale
	var tmp = new SCFile('kmknowledgebase'); 
	system.functions.fduplicate(tmp,vars.$L_file);
	var kb = new SCFile('kmknowledgebase');
	kb.doSelect('kbname="Knowledge_Library"');
	vars.$L_file=kb;
	
	//call re-index function with Knowledge_Library as $L.file
	lib.KMCollection_Update.reindex();
	vars.$L_file = null;
	vars.$L_file = new SCFile('environment');
	//restore current $L.file
	system.functions.fduplicate(vars.$L_file,tmp);
}</script>
    <package type="string">KMAdmin</package>
    <sysmodtime type="dateTime">07/16/17 17:01:41</sysmodtime>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodcount type="decimal">0</sysmodcount>
    <prgnsystem NullValue="1" type="boolean"/>
    <sysrestricted NullValue="1" type="boolean"/>
  </record>
</recordset>
