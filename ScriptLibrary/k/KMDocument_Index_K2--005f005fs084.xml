<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="ScriptLibrary">
  <record id="name=&quot;KMDocument_Index_K2&quot;" recordid="KMDocument_Index_K2">
    <name type="string">KMDocument_Index_K2</name>
    <script type="string">/*************************************************************************
 *
 * K2 specific document indexing functions
 *
 ************************************************************************/
 
function KMDocument_Index_K2()
{

}

function indexDocOpen(strKbName, strDocId, catIndex)
{		
	var params = new Array(3);
	// docs are opened with the kbname+the doc_id to keep them unique
	params[0]="indexDocOpen";
	params[1]=system.library.KMUtils.scToJSName(strKbName)+"_"+strDocId+"_"+catIndex;
	params[2]=null;
	result = system.functions.plugin("KMPLUGIN",params);
	if (result != 0)
	{
		result = system.library.KMCollection_Update_Utils_K2.closeIndex(vars.$G_km_globalenv.km_host);
	  	print("closeIndex = "+result);
	  	result = system.library.KMAdmin.kmjvmdisconnect();
	  	return -1;
	}
	return 0; 
}

/*************************************************************************
*
* Delete K2 document from index by id and collection name
*
*************************************************************************/

function indexDeleteDocument( strKbName, strDocId )
{	     
	var params = new Array(2);
  	// locate the docid and delete it from the index here
  	params[0] = "indexDocDeleteDoc"; 
   	params[1] = strDocId;
   	result = system.functions.plugin("KMPLUGIN",params); 
	if (result != 0)
	{
		result = system.library.KMCollection_Update_Utils_K2.closeIndex(vars.$G_km_globalenv.km_host);
	  	print("closeIndex = "+result);
	  	result = system.library.KMAdmin.kmjvmdisconnect();
	  	return -1;
	}
	return 0; 
}

/****************************************************************************
 * Tells the Indexer to commit the document data for a document to the index
 ***************************************************************************/
 
function commitDocument()
{
    
    var getenginename = "k2";

  	  		
	var params = new Array(1);
	params[0]="indexDocInsertDoc";
	result = system.functions.plugin("KMPLUGIN",params);
	
	if (result != 0)
	{
		result = system.library.KMCollection_Update_Utils_K2.closeIndex(vars.$G_km_globalenv.km_host);
		print("closeIndex = "+result);
		result = system.library.KMAdmin.kmjvmdisconnect();
		return -1;
	}  
	
}

/**
*	sets the value of a field in the index for the current document.
*	param strField - string containing the name of the field
*	param varFieldValue - variable containing the value of the field
**/
function setDocumentFieldValue(strField, varFieldValue)
{
	var params = new Array(3);
	params[0]="indexDocSetFieldValue";
	params[1]=strField;
	params[2]=varFieldValue;
	result = system.functions.plugin("KMPLUGIN",params);
	if (result != 0)
	{
	  result = system.library.KMCollection_Update_Utils_K2.closeIndex(vars.$G_km_globalenv.km_host);
	  print("closeIndex = "+result);
	  result = system.library.KMAdmin.kmjvmdisconnect();
	  return -1;
	}
	return 0; 
}


/**
*	tells K2 to index an attachment to the current document.
*	strAttachmentFile - a string specifying the fully qualified path and filename of the attachment
**/
function indexAttachment(strAttachmentFile)
{
	var params = new Array(2);
  	params[0]="indexAttachment";
  	params[1]=strAttachmentFile;
  	result = system.functions.plugin("KMPLUGIN",params);
  	if (result != 0)
    {
	    result = system.library.KMCollection_Update_Utils_K2.closeIndex(vars.$G_km_globalenv.km_host);
        print("closeIndex = "+result);
        result = system.library.KMAdmin.kmjvmdisconnect();
        return -1;
    }		
	return 0;
}

/*****************************************************************
* create indexable document from sclibFile with user settings
* defined in fKmKnowledgebase
*
* K2 Version
******************************************************************/
function indexDocument( fKmKnowledgebase, sclibFile )
{

	var attfname = "";
	var result = 0;
	var kbname = fKmKnowledgebase.kbname;
	var doc_id = sclibFile[fKmKnowledgebase.docid];
	var doc_id_fs = system.library.KMUtils.cleanDocID(doc_id);
	
	
	var doc_type = sclibFile.doctype;			
	var indexFields = new Array(fKmKnowledgebase.kbfields.length());
	var indexfType = new Array(fKmKnowledgebase.kbfields.length());
	
	var def_vlang = "";
	def_vlang = fKmKnowledgebase.locale;
	if (def_vlang == null)
		def_vlang = "en";
    
	// get list of fields to index from current record

	system.library.KMCollection_Update_Utils.getIndexFieldList(fKmKnowledgebase, indexFields, indexfType);
	
    
    
    var categoryStr = "";
    categoryStr = lib[fKmKnowledgebase.categoryindexscript].getCategoryStr(sclibFile);
    // check categoryStr for semicolons, indicating multiple categories

    if(system.functions._null(categoryStr))
		categoryStr = "";
    var catarray = categoryStr.split(";");
    var numcats = catarray.length;
	for (var cats =0; cats &lt; numcats; cats++)
	{
		print(vars.$L_currRec+": doc_id: "+doc_id);		
		if( indexDocOpen(fKmKnowledgebase.kbname, doc_id_fs, cats) == -1)
			return -1;		
 		
		var doc_link = "scactivelink://"+fKmKnowledgebase.sclibtablename+":"+fKmKnowledgebase.docid+"=&amp;quot;"+doc_id+"&amp;quot;&amp;nbsp;and&amp;nbsp;kbname=&amp;quot;"+kbname+"&amp;quot;";
		// ad a url to pull up our documents here
		if( system.library.KMDocument_Index_K2.setDocumentFieldValue("View_URL", doc_link) == -1 )
		  return -1;
  	
  		//set category
		if (categoryStr.length &gt;0)
		{
			if( system.library.KMDocument_Index_K2.setDocumentFieldValue("kmsearchcategory", catarray[cats]) == -1 )
		  		return -1; 
		}
		
		//set knowledgebase name
		if( system.library.KMDocument_Index_K2.setDocumentFieldValue("knowledgebase_name", kbname) == -1 )
		  		return -1; 
		  		
		//set vlang field
	    
		if( system.library.KMDocument_Index_K2.setDocumentFieldValue("VLang", def_vlang) == -1 )
	  		return -1;		
		
		
   		var docbodyfile = '';        
   		var stripped = "";
   		var theXMLDate = null;
   		var statsString = new Datum();
   		var numfields = fKmKnowledgebase.kbfields.length();
   		
		// loop through the fields and values and set them
      	for (var i = 0; i&lt; numfields; i++)
      	{
      		fieldvalue = "";
         	
         	var fieldValue = sclibFile[indexFields[i]];
         	if (fieldValue != null) 
          	{
				if (indexFields[i] == "locale")
				{
					var vlang = ""
				  	vlang = fieldValue;
				  	if (vlang != "")
				   	{
						if( system.library.KMDocument_Index_K2.setDocumentFieldValue("VLang", vlang) == -1 )
					  		return -1; 					
					}

		        }
            	if (indexfType[i] == "Date")
		    	{
		    		theXMLDate = new XMLDate( fieldValue );
            		fieldValue = theXMLDate.getSCDateTimeString();
            		system.functions.cleanup(theXMLDate);
		    	}
		    
            	if (system.library.KMUtils.isSCArray(fieldValue))
 		            fieldValue = system.library.KMUtils.scArrayToString(fieldValue);

            	fieldValue += ''; //convert numbers to strings
            	fieldValue = fieldValue.toString();
            	
            	if (indexfType[i] == "Rich_Text")
		     	{
		     		fieldValue = system.library.KMCollection_Update_Utils.processRichText(fieldValue);	
		     		
		    	}
		     	
		     	//if this field flagged as a doc body field append the field's data to our docbodyfile variable
	            if (fKmKnowledgebase.kbfields[i].docbody)
			      docbodyfile += fieldValue + " ";
				
				//here we will truncate any field data beyond the 32K field limit imposed by K2
			    if( fieldValue != null &amp;&amp; fieldValue.length &gt; 8000)
	              fieldValue = fieldValue.substr(0,7999);
	              
				//now set the field value
				if( system.library.KMDocument_Index_K2.setDocumentFieldValue(indexFields[i], fieldValue) == -1 )
					return -1; 
			   
		  	}
		} //end for loop
		
		attfname += "./km/styles/"+doc_id+".txt;";
		
		//write out the docbody file and call indexAttachment to have K2 index it
		if( system.library.KMCollection_Update_Utils.utfWriteFile("./km/styles/"+doc_id_fs+".txt", docbodyfile) == -1 )
			return -1;			  
		
		if( system.library.KMDocument_Index_K2.indexAttachment("./km/styles/"+doc_id_fs+".txt") == -1 )
			return -1;
		

		// You must create a doc for the adaptivelearning since the Verity style files expect one. So, if 
		// adaptivelearning is turned off, use a blank doc, otherwise, write usage if it exists.  
		ALText = "";
		if (vars.$G_km_globalenv.use_kmadaptivelearning==true)
        	ALText = system.library.KMCollection_Update_Utils.getALtext(kbname, doc_id);
          
		attfname += "./km/styles/"+doc_id+"al.txt;";
		if (ALText.length&lt;=0)
			ALText = "   ";
			
		if( system.library.KMCollection_Update_Utils.utfWriteFile("./km/styles/"+doc_id_fs+"al.txt", ALText) == -1 )
			return -1;			  	

		if( system.library.KMDocument_Index_K2.indexAttachment("./km/styles/"+doc_id_fs+"al.txt") == -1 )
			return -1;
		

		// add attachments here...  
		// if no attachments send a null.  If a regular doc with attachments,
		// send null first then the filename (docid_filename)
		// if table is kmdocument and doctype is "external", don't send a null
		// send the filename instead to make it the primary document.
		var indexattach = fKmKnowledgebase.indexattachments;
		var attinfo = null;
		
		if (indexattach == true || doc_type =="external")
			attinfo = system.library.KMUtils.getAttachmentInfo(fKmKnowledgebase.sclibtablename, doc_id);
		

        //check length of attinfo for number of attachments   	
        //if length &gt; 0 then we have attachments
        if ((attinfo != null) &amp;&amp; (attinfo.length() &gt; 0))
        {
			// check for tablename "kmdocument" and doctype "external"
			// add the attachments 
			var numattachments = attinfo.length();            
		 	for (var i=0; i&lt;numattachments; i++)
		 	{
				// get the UID of the attachment
				var strUID = attinfo[i].split(":")[0];
					
				// get the filename of the attachment   
					var fname = attinfo[i].split(":")[1];
				// check to see if the attachment is indexable
		     	// ie. Don't download image files, executables, unloads, etc.
		        	var fnameExtArray = fname.split(".");
		        	var fnameExt = fnameExtArray[fnameExtArray.length-1];
		        	fnameExt=fnameExt.toLowerCase();// I force lowercase on skipexts!
		        	var skipExts = fKmKnowledgebase.skipexts;
		        	if (skipExts.indexOf(fnameExt) == -1)
		        	{
		    			// get the files content
		     			// write it out
		     			attfname += "./km/styles/"+doc_id+"_attach_"+i+"."+fnameExt+";";
		       			var rc;
						rc = writeAttachmentToFile( "./km/styles/"+doc_id_fs+"_attach_"+i+"."+fnameExt, fKmKnowledgebase.sclibtablename, doc_id, strUID );
						if (rc != RC_SUCCESS)
						 print("Unable to extract attachment");
						else
						{
						  attfname += "./km/styles/"+doc_id_fs+"_attach_"+i+"."+fnameExt+";";
		    			 // now stream it to the indexer
						 if( system.library.KMDocument_Index_K2.indexAttachment("./km/styles/"+doc_id_fs+"_attach_"+i+"."+fnameExt) == -1)
							return -1;		            
						}
					}
			
			}//end for loop
		}
		
		//commit the document to the index
		if( system.library.KMDocument_Index_K2.commitDocument() == -1)
			return -1;
		
	}//end for(cats)
	
    // Remove attachments now as they should have been stremed to the indexer already
	var attfnamearray = attfname.split(";");
	var attcount = attfnamearray.length;
	for (var att = 0; att &lt; attcount; att++)
	{
		
		system.functions.plugin("KMPLUGIN","removefile",attfnamearray[att]);
	}
	attfname = "";
	return 0;
}
</script>
    <package type="string">KMAdmin</package>
    <sysmodtime type="dateTime">07/16/17 17:01:41</sysmodtime>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodcount type="decimal">0</sysmodcount>
    <prgnsystem NullValue="1" type="boolean"/>
    <sysrestricted NullValue="1" type="boolean"/>
  </record>
</recordset>
