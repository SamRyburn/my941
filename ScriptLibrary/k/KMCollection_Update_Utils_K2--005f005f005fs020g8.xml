<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="ScriptLibrary">
  <record id="name=&quot;KMCollection_Update_Utils_K2&quot;" recordid="KMCollection_Update_Utils_K2">
    <name type="string">KMCollection_Update_Utils_K2</name>
    <script type="string">/*   @author Tony Bray
 *
 *   Package: KMAdmin
 * 
 *   Description: This library contains K2 specific code!
 *
*/
/**********************************************************************
 *
 * These functions handle update scheduling
 * 
 *********************************************************************/

function KMCollection_Update_Utils_K2()
{

}

/**
*   connects to the admin server.  Admin connection required to create or delete 
*   connections.
*   param strServerAlias - string containing the admin server alias
*/

function adminConnect(strServerAlias, strAdminPort)
{
	var result = 0;
 	var params = new Array(3);
   	params[0]= "adminConnect";
   	params[1]= strServerAlias;
   	params[2]= strAdminPort;
   	result = system.functions.plugin("KMPLUGIN",params);
   	params = null;
 	return result;
}

/**
* disconnects from the admin server. 
*/
function adminDisconnect()
{
	var result = 0;
 	var params = new Array(1);
   	params[0]= "adminDisconnect";
   	result = system.functions.plugin("KMPLUGIN",params);
   	params = null;
 	return result;
}

function getStatsString(strHost, strCollectionAlias ) 
{
	var params = new Array(3);
   	var statsString = new Datum();
   	statsString.setType(1); //Make it a string
   	params[0]= "getStatistics";
   	params[1]= strHost;
   	params[2]= strCollectionAlias;	
   	result = system.functions.plugin("KMPLUGIN",params,statsString);
   	return statsString;
}

/**
*   creates a new collection.
*   param strServerAlias - string containing the admin server alias
*   param strCollectionAlias - string containing the collection name (alias)
*   param strStyleAlias - string containing the styleAlias for the collection
*/
function createCollection(strServerAlias, strCollectionAlias, strStyleAlias, strGateway)
{
 var result = 0;
 var params = new Array(5);
   params[0]= "createCollection";
   params[1]= strServerAlias;
   params[2]= strCollectionAlias;
   params[3]= strStyleAlias;
   params[4]= strGateway;
   result = system.functions.plugin("KMPLUGIN",params);
   params = null;
 return result;
}

/**
*   deletes an existing collection
*   param strServerAlias - string containing the admin server alias
*   param strCollectionAlias - string containing the name of the collection to delete
*/
function deleteCollection(strServerAlias, strCollectionAlias)
{
	var result = 0;
	var params = new Array(3);
   	params[0]= "deleteCollection";
   	params[1]= strServerAlias;
   	params[2]= strCollectionAlias;
   	result = system.functions.plugin("KMPLUGIN",params);
   	params = null;
 	return result;
}

/**
*   initializes an index for inserting or updating
*   param strServerAlias - string containing the admin server alias
*   param strCollectionAlias - string containing the name of the collection to delete
*/
function initializeIndex(strServerAlias, strIndexPort, strCollectionAlias, strMode)
{
    
   
	var result = 0;
 	var params = new Array(7);
   	params[0]= "initializeIndex";
   	params[1]= strServerAlias;
   	params[2]= strIndexPort;
   	params[3]= strCollectionAlias;
   	params[4]= strMode;
   	
   	//index must exist before initialization!
   	result = system.library.KMCollection_Update_Utils_K2.checkIndexStatus(strCollectionAlias);
   	
   	if (result == -1)
   	{
			system.library.KMCollection_Update_Utils.logUnexpectedError("initializeIndex 1");			
   			return -1;		
	} 
   	// QC8787 - if the host name or port is not defined, pass nulls to the kmadmin.java file in the kmpugin
   	if (system.functions._null(vars.$G_km_globalenv.km_smhost) || system.functions._null(vars.$G_km_globalenv.km_smport))
   	{
		// Re-read the danged thang.
		if ( system.library.KMAdmin_VerifyServer_K2.verifyEnvironment() == -1 )
		{
		    print("VerifyEnvironment failed");
			system.library.KMCollection_Update_Utils.logUnexpectedError("initializeIndex 1");			
   			return -1;		
		}
   	}
   	else
   	{
   		params[5]= vars.$G_km_globalenv.km_smhost+":"+vars.$G_km_globalenv.km_smport;
   		params[6]= vars.$G_km_globalenv.km_smlogin;
   	}
   	if (system.functions._null(vars.$G_km_globalenv.km_smpassword))
   		params[7]= "";
   	else
   		params[7]= vars.$G_km_globalenv.km_smpassword;
   		
   	
   	result = system.functions.plugin("KMPLUGIN",params);
    if (result !=0)
    {
      result = system.library.KMCollection_Update_Utils_K2.closeIndex(vars.$G_km_globalenv.km_host);
	  print("closeIndex = "+result);
	  result = system.library.KMAdmin.kmjvmdisconnect();
	  system.library.KMCollection_Update_Utils.logUnexpectedError("initializeIndex 2");			
	  return -1;
	}
   	params = null;
 	return result;
}


function writeStyleFiles()
{
	var skipFields = "title;author;date";
	// Write the style.ufl file first.
 	var strFileContents = "";
	strFileContents += "data-table:    jg1\n{\n dispatch: DOC2\n varwidth: DOC2_FN jga\n}\n";
	strFileContents += "data-table:    jg2\n{\n dispatch: DOC3\n varwidth: DOC3_FN jgb\n}\n";
	strFileContents += "data-table:    jg3\n{\n dispatch: DOC4\n varwidth: DOC4_FN jgb\n}\n";
	strFileContents += "data-table:    jg4\n{\n dispatch: DOC5\n varwidth: DOC5_FN jgb\n}\n";
	strFileContents += "data-table:    jg5\n{\n dispatch: DOC6\n varwidth: DOC6_FN jgb\n}\n";   
	strFileContents += "data-table:    jg6\n{\n dispatch: DOC7\n varwidth: DOC7_FN jgb\n}\n";   
	strFileContents += "data-table:    jg7\n{\n dispatch: DOC8\n varwidth: DOC8_FN jgb\n}\n";   
	strFileContents += "data-table:    jg8\n{\n dispatch: DOC9\n varwidth: DOC9_FN jgb\n}\n";   
	strFileContents += "data-table:    jg9\n{\n dispatch: DOC10\n varwidth: DOC10_FN jgb\n}\n";   
	strFileContents += "data-table:	  dai\n{\n";
   	strFileContents += "\tvarwidth:View_URL\t\tddw\n";
   	strFileContents += "\tvarwidth:kmsearchcategory\t\tddw\n";
   	strFileContents += "\tvarwidth:kbname\t\tddw\n";
   	strFileContents += "\tvarwidth:kbtitle\t\tddw\n";
   	strFileContents += "\tvarwidth:knowledgebase_name\t\tddw\n";
   	
   	var numfields = vars.$L_file.kbfields.length();
    for( var i = 0; i &lt; numfields; i++)
	{
	  	
	  	if (skipFields.indexOf(vars.$L_file.kbfields[i].kbfieldname) == -1)
	 	{  
	   		
		   	if (vars.$L_file.kbfields[i].kbfieldtype == "Date")
		   		strFileContents += "\tfixwidth:"+system.library.KMUtils.scToJSName(vars.$L_file.kbfields[i].kbfieldname)+"\t4 date\t\t\n";
		   	else 
	       		strFileContents += "\tvarwidth:"+system.library.KMUtils.scToJSName(vars.$L_file.kbfields[i].kbfieldname)+"\t\tddw\n";
	       	if (vars.$L_file.kbfields[i].kbfieldvalue != null)
	       	{
	       		// check for multivalues
	         	if (vars.$L_file.kbfields[i].kbfieldvalue.indexOf(";") &gt; -1)
	         	{
	           		
	            	var aliasarray = vars.$L_file.kbfields[i].kbfieldvalue.split(";");
	            	var numalias = aliasarray.length;
	            	for (var alias =0; alias &lt; numalias; alias++)
	            	{
	               		strFileContents += "\t\t/alias = "+system.library.KMUtils.scToJSName(aliasarray[alias])+"\n";
	            	}
	         	}
	       		else
	        		
	       			strFileContents += "\t\t/alias = "+system.library.KMUtils.scToJSName(vars.$L_file.kbfields[i].kbfieldvalue)+"\n";
	       	}
		}
	}
    strFileContents += "\n}\n";
    
    var stylefiledir = vars.$G_km_globalenv.km_stylefilesdrive;
    
    writeFile(stylefiledir+"/Def_FileSystem_PushAPI/style.ufl", false, strFileContents);   

	// Write the style.dft file now.
   	strRTFFieldsView = "$ifdef VDKSTREAMMODE_VIEW\n\n";
   	strRTFFields = "$else\n\n";
   	strFileContents = "#\n# Document Format\n#\n$control: 1\ndft:\n{\n zone-begin: NOEXTRACT\n";
   	var RTFfound = false;
   	var numkbs = vars.$L_file.kbfields.length()-1;
   	for( var i = 0; i &lt; numkbs; i++)
   	{
   		if (vars.$L_file.kbfields[i].docbody)
   		{
    		if (vars.$L_file.kbfields[i].kbfieldtype == "Rich Text")
    		{
      			RTFfound = true;
		      	strRTFFieldsView += "  field: "+system.library.KMUtils.scToJSName(vars.$L_file.kbfields[i].kbfieldname)+"\n";
		      	strRTFFieldsView += "     /zone=PrimaryDoc\n";
		      	strRTFFields += "  field: "+system.library.KMUtils.scToJSName(vars.$L_file.kbfields[i].kbfieldname)+"\n";
		      	strRTFFields += "     /filter=\"zone -html\"\n";
		      	strRTFFields += "  constant: \" \"\n";
		    }
    		else
    		{
		   	  	strFileContents += "  field: "+system.library.KMUtils.scToJSName(vars.$L_file.kbfields[i].kbfieldname)+"\n";
		   	  	strFileContents += "     /zone=PrimaryDoc\n";
		   		strFileContents += "  constant: \" \"\n";
   			}
		}	
   } 
   
   
   if (RTFfound)
   {
     strFileContents += strRTFFieldsView + strRTFFields + "$endif\n";
   }
   strFileContents += "\nzone-end: NOEXTRACT\n";
   strFileContents += 
   readFile("./km/styles/style_tpl.dft","t");
   
   
	writeFile(stylefiledir+"/Def_FileSystem_PushAPI/style.dft", false, strFileContents);	
	
	return 0;
}



function getStatistics(arrayStats)
{
	var strServerAlias = "";
	strServerAlias = vars.$G_km_globalenv.km_host;
    if (system.functions._null(strServerAlias)
            || system.functions._null(vars.$G_km_globalenv.km_smhost)
            || system.functions._null(vars.$G_km_globalenv.km_smport)
            || system.functions._null(vars.$G_km_globalenv.km_smlogin) )
    {
    	// show the error message box in kmknowledgebase.refreshstats instead of 
    	//   here, because a background processor also calls this getStatistics function 
	    system.library.KMCollection_Update_Utils.logUnexpectedError("getStatistics 1");			
  		return -1;
   	}
	var result = system.library.KMAdmin.kmadminlock();
          if (result != 0)
              return -1;
  	if ((strServerAlias != null) &amp;&amp; ( strServerAlias.length &gt; 0 ))
	{
	  	var strCollectionAlias = system.library.KMUtils.scToJSName(vars.$L_file.kbname);
	  	var strPort = vars.$G_km_globalenv.km_adminport;
		var result = 0;
  		result = system.library.KMAdmin.kmjvmconnect();
		if (result != 0)
	    {
	    	system.library.KMCollection_Update_Utils.logUnexpectedError("getStatistics 2");			
	  		return -1;
	   	}
		
		result = system.library.KMCollection_Update_Utils_K2.adminConnect(strServerAlias, strPort);


	   	var sb = String(system.library.KMCollection_Update_Utils_K2.getStatsString(strServerAlias, strCollectionAlias));
	   	if (sb.indexOf("Service Alias not found") &gt; 0)
	   	{
	    	system.library.KMCollection_Update_Utils.logUnexpectedError("getStatistics 3");			
	  		return -1;
	   	}
	   	var sbArray = new Array();
	   	sbArray = sb.split('|');
	   	for( var i = 1; i &lt; 7; i++)
	    	arrayStats[i]=sbArray[i];
	    	
	    if (arrayStats[6] == "online")
	    	arrayStats[6] = "online";
	    else if (arrayStats[6] == "offline")
	    	arrayStats[6] = system.functions.scmsg(209, "km"); // offline
	    else if (arrayStats[6] == "created")
	    	arrayStats[6] = system.functions.scmsg(211, "km"); // created
	    	
		result = system.library.KMCollection_Update_Utils_K2.adminDisconnect();
	   	result = system.library.KMAdmin.kmjvmdisconnect();
   	}
  	params = null;
  	statsString = null;
  	sbArray = null;
  	system.library.KMAdmin.kmadminunlock();
 	return result;
}


function closeIndex(strServerAlias)
{
 	var result = 0;
 	var params = new Array(2);
   	params[0]= "closeIndex";
   	params[1]= strServerAlias;
   	result = system.functions.plugin("KMPLUGIN",params);
   	params = null;
 	return result;
}


function checkIndexStatus(strCollectionAlias)
{
  
 
	var kmglobfile = new SCFile("environment");
  	var kmfind = kmglobfile.doSelect("name = \"knowledge management\"");
  	var kmhost ="";
  	var kmindexport = "";
  	if (kmfind != RC_SUCCESS)
  	{
	    system.library.KMCollection_Update_Utils.logUnexpectedError("checkIndexStatus 1");			
  		return -1;
  	}
   	kmhost = kmglobfile.km_host;
   	kmindexport = kmglobfile.km_adminport; 
  	if (system.functions._null(kmhost))
  	{
	    system.library.KMCollection_Update_Utils.logUnexpectedError("checkIndexStatus 2");			
  		return -1;
  	}

   	result = system.library.KMCollection_Update_Utils_K2.adminConnect(kmhost,kmindexport);
 
 

   	var sb = String(system.library.KMCollection_Update_Utils_K2.getStatsString(kmhost, strCollectionAlias));

   	result = system.library.KMCollection_Update_Utils_K2.adminDisconnect();
   
   	if (sb.indexOf("|") &gt; 0)
   		return 0;
   	else
  	{
	    system.library.KMCollection_Update_Utils.logUnexpectedError("checkIndexStatus 4");			
  		return -1;
  	}
}

</script>
    <package type="string">KMAdmin</package>
    <sysmodtime type="dateTime">07/16/17 17:01:41</sysmodtime>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodcount type="decimal">0</sysmodcount>
    <prgnsystem NullValue="1" type="boolean"/>
    <sysrestricted NullValue="1" type="boolean"/>
  </record>
</recordset>
