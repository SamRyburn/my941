<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="ScriptLibrary">
  <record id="name=&quot;KMUtils&quot;" recordid="KMUtils">
    <name type="string">KMUtils</name>
    <script type="string">/**  This function returns a SC JavaScript compliant field name by replacing
 *	"." (dot) characters in the field name with "_" (underscore) character
 *	@param {String} strFieldName - a string containing the name of a SC field
 *	@return The name of SC field in valid Javascript format
 *   @type String
 */
function scToJSName(strFieldName)
{
    var reg = /(\.|\s)/g;

    if ( system.functions._null(strFieldName) )
        strFieldName = " ";
    return strFieldName.replace(reg, "_");
}

/**
 *	This function provides a utility to strip the SC Array style markup
 *	from a string representation of the array.  For example SC will return
 *	{"Hello"} and when passed to this function you will receive Hello
 *	@param {String} strString ServiceCenter String representation of an array
 *	@return String representation of the SC array
 *   @type String
 *	@deprecated
 *   @see #scArrayToString
 */
function cleanArrayMarkup( strString )
{
    var reg = /(\{\")|(\"\})|(\{*,\s\")/g;
    
    return strString.replace(reg, "");
}

/**
 *	Determines if the field passes as an argument is an array field
 *	@param  {Datum} fField - a field variable
 *	@return true or false
 *   @type Boolean
 */
function isSCArray( fField )
{
    return ((fField != null) &amp;&amp; (fField.length) &amp;&amp; (typeof(fField) == "object")) ? true : false;
}

/**
 *	Concatenates the elements of an array field into a single string
 *	@param {Datum}  fField - array field variable
 *	@return String representation of ServiceCenter array field
 *   @type String
 */
function scArrayToString( fField )
{
    var strResult = "";
    if( system.library.KMUtils.isSCArray( fField ) )
    {
        strResult = system.functions.strraw(fField);
        strResult = strResult.replace(/\"/g, "\\\"") + " ";
    }
    return strResult;
}


/**
 *	Concatenates the elements of an array field into a single HTML string
 *	@param {Datum}  fField - array field variable
 *	@return String representation of ServiceCenter array field
 *   @type String
 */
function scArrayToHTMLString( fField )
{
    var strResult = "";
    if( system.library.KMUtils.isSCArray( fField ) )
    {
        var strFieldData;
        for(var idx in fField )
        {
            if(fField[idx] != null)
            {
                strFieldData = fField[idx];
                strFieldData = strFieldData.replace(/\"/g, "&amp;quot;");
                strFieldData = strFieldData.replace(/&lt;/g, "&amp;lt;") ;
                strFieldData = strFieldData.replace(/&gt;/g, "&amp;gt;") ;
                strFieldData = strFieldData.replace(/\\/g, "\\\\") ;
                strResult += strFieldData + " &lt;br /&gt;";
            }
        }
    }


    return strResult;
}


/**
 *	This function returns an array of strings containing the UID and filename of all attachments for a SCFile
 *   record.
 *	@param strSCFile String containing the SCFile name of record owning the attachment
 *   @param strId String containing the unique id of the SCFile record that owns the attachment
 *	@return {String} array of strings containing UID and filename of the attachments in the format "UID:filename"
 *   @type {String}
 */
function getAttachmentInfo(strSCFile, strId)
{
    var fAttachments = new SCFile("SYSATTACHMENTS");
    var rc = fAttachments.doSelect("application=\""+strSCFile+"\" and topic=\""+ strId  +"\" and segment=0");
    var returnArray = new Datum();
    returnArray.setType(8); //make it an array
    if( rc == RC_SUCCESS )
    {
        rc = fAttachments.getFirst();
        var strOutputFile = fAttachments.filename;
        var strLastUID = "";
        while( rc == RC_SUCCESS)
        {
            if( strLastUID != fAttachments.uid )
                returnArray.push(fAttachments.uid + ":" + fAttachments.filename);
            strLastUID = fAttachments.uid;
            rc = fAttachments.getNext();
        }
    }

    return returnArray;
}


/**
 *	This function returns a string stripped of any HTML markup
 *	@param strHTML String containing the HTML marked up text
 *	@return String containing contents of strHTML minus the HTML markup
 *   @type String
 */
function HTMLtoText( strHTML )
{
    var retText = new Datum();
    system.functions.plugin("KMPLUGIN", "HTMLTOTEXT", strHTML, retText );
    return retText.getText();
}
/*
 **  Remove all occurrences of a token in a string
 **    s  string to be processed
 **    t  token to be removed
 **  returns new string
 */

function removetoken(s, t)
{
    var i = s.indexOf(t);
    var r = "";
    if (i == -1) return s;
    r += s.substring(0,i) + removetoken(s.substring(i + t.length), t);
    return r;
}




/**
 This function converts the DateTime string from the UI widget to a SCDateTime String
 **/
function getSCDateTimeString( strDT )
{
    var theXMLDate = new XMLDate( strDT );
    var  returnValue = theXMLDate.getSCDateTimeString();
    return returnValue;
}

function getUTCDateTimeString( strDT)
{
    var theXMLDate = new XMLDate( strDT );
    var returnValue = theXMLDate.getISODate()+"T"+theXMLDate.getISOTime()+"Z";
    return returnValue;

}

function domessageBox(message)
{
    //if we are in a background process...just print the message
    //QCCR1E75763 Search knowledgebase in ess.do will logout directly, if delete search server
    //we are in the ESS client...just also print the message
    //add by Neilyu since 06/13/2012
    if(vars.$G_bg || vars.$L_bg || system.functions.nullsub(vars.$G_ess, false))
    {
        print(message);
        return;
    }

    var rteReturnValue = new SCDatum();
    var argNames = new SCDatum();
    var argVals = new SCDatum();
    argVals.setType(8);     //type array
    argNames.setType(8);    //type array
    var argVal;

    argVal=new SCDatum();
    argVal.setType(2); //string
    argVal="text";
    argNames.push(argVal);

    argVal=new SCDatum();
    argVal.setType(2); //string
    argVal=message;
    argVals.push(argVal);





    system.functions.rtecall("callrad",
        rteReturnValue,
        "mb.ok", //RAD app name
        argNames,
        argVals,
        true); //false to run in same thread, true to run in new thread
}


/**** Character string manipulation functions ****/
function stripLeading(string,chr) {
    var finished = false;
    for (var i = 0; i &lt; string.length &amp;&amp; !finished; i++)
        if (string.substring(i,i+1) != chr) finished = true;
    if (finished) return string.substring(i-1); else return string;
}

function stripTrailing(string,chr) {
    var finished = false;
    for (var i = string.length - 1; i &gt; -1 &amp;&amp; !finished; i--)
        if (string.substring(i,i+1) != chr) finished = true;
    if (finished) return string.substring(0,i+2); else return string;
}

function stripLeadingTrailing(string,chr) {
    return stripTrailing(stripLeading(string,chr),chr)
}

/************************************************/
// Remove non filename safe characters from SC id fields.
function cleanDocID(strFieldName)
{
    var reg = /[\W]/g;;

    strFieldName = strFieldName + ''.replace(reg, "_");
    return strFieldName;
}

/************************************************/
// Make an SC array from a list separated by a token.
function parseListToSCArray(strFieldName,token)
{
    var phraseArray = new SCDatum();
    phraseArray.setType(8);  //type array

    // break strFieldName up into separate words
    if (strFieldName != null)
    {
        var tmpFld = strFieldName;
        var spec_loc = tmpFld.indexOf(token);
        var word = "";

        while (spec_loc &gt;= 0)
        {
            word = tmpFld.substring(0, spec_loc);
            tmpFld = tmpFld.substring(spec_loc + 1, tmpFld.length);
            phraseArray.push(word);
            spec_loc = tmpFld.indexOf(token);
        }
        if ( tmpFld.length &gt; 0 )  // if $anywords does not end in a blank character
            phraseArray.push(tmpFld);  // then push the last word
    }
    
    return phraseArray;
}


/************************************************/

// Change multiple sequential occurences of a token to a single token in a character string.
function removeRedundentTokens(charString,token)
{
    if (charString != null &amp;&amp; token != null &amp;&amp; token != "")
    {
        var doubleToken = token + token;
        var spec_loc = charString.indexOf(doubleToken);

        while (spec_loc &gt;= 0)
        {
            charString = charString.substring(0, spec_loc) + charString.substring(spec_loc + 1);
            spec_loc = charString.indexOf(doubleToken);
        }
    }
    return charString;
}

/************************************************/


function lockrecord(record)
{
    var success;
    var rteReturnValue = new SCDatum();

    var lockName = new SCDatum();
    lockName.setType(2);

    system.functions.rtecall("tag", rteReturnValue, lockName, record );

    success = Lock( lockName.getText());

    if( success == RC_SUCCESS )
        return true;
    else
        return false;

}


function unlockrecord(record)
{

    var success;
    var rteReturnValue = new SCDatum();

    var lockName = new SCDatum();
    lockName.setType(2);

    system.functions.rtecall("tag", rteReturnValue, lockName, record );

    success = Unlock( lockName.getText());

    if( success == RC_SUCCESS )
        return true;
    else
        return false;

}

/**
 *	Truncate a string and add ellipsis "..." if the length exceeds the maxLength passed in
 *	@param  str - the string variable to truncate if it exceeds maxLength
 *	@param  maxLength - the maximum length the returned string can be
 *	@return the string, truncated if necessary with ellipsis characters
 *
 *   Used by KMChangeManagement
 */
function truncateStringWithEllipsis(str, maxLength)
{
    if ( str.length &lt;= maxLength )
        return str;
    else if (maxLength &lt; 4)
        return str.substring( 0, maxLength );

    return str.substring( 0, maxLength - 3 ) + "...";
}

function getKMlangcode(smcode)
{
    var sclangFile = new SCFile("language");
    var scFind = sclangFile.doSelect("unique.id = \""+smcode+"\"");
    if( scFind == RC_SUCCESS )
    {
        scFind = sclangFile.getFirst();

        // If the km.id column is null or blank, then Verity does not search in that language
        if (system.functions._null(	sclangFile.km_id) || sclangFile.km_id=="")
            sclangFile.km_id = "en";  // Default to English if no value in km.id

        return sclangFile.km_id;
    }
    return "en";	// Default to English if a read error occurs
}

function getShardInfo(searchserver)
{
    var shardInfo = "";
    var searchserversFile = new SCFile("kmsearchservers");
    var searchserverFind = searchserversFile.doSelect("servername = \""+searchserver+"\"");
    if (searchserverFind == RC_SUCCESS)
    {
        searchserverFind = searchserversFile.getFirst();
        if (searchserverFind == RC_SUCCESS)
        {
            for (var y = 0; y &lt; searchserversFile.servers.length(); y ++)
            {
                if (searchserversFile.servers[y].primarysearcher)
                    shardInfo = searchserversFile.servers[y].hostname+":"+searchserversFile.servers[y].port+"/"+searchserversFile.searchinstancename;
            }
        }
    }

    return shardInfo;
}

function getSearchEngineConfig(collection, type)
{
    if (type == "admin" || type == "index")
    {
        var searchservername = "";
        var collectionFile = new SCFile("kmknowledgebase");
        var collFind = collectionFile.doSelect("kbname = \""+collection+"\"");
        if (collFind == RC_SUCCESS)
        {
            
            collFind = collectionFile.getFirst();
            if (collFind == RC_SUCCESS)
            {
                
                searchservername = collectionFile.searchservername;
            }
        }
    }

    var searchServerFound = false;
    var searchserversFile = new SCFile("kmsearchservers");
    if (type == "admin" || type == "index")
        var searchserverFind = searchserversFile.doSelect("servername = \""+searchservername+"\"");
    else
        var searchserverFind = searchserversFile.doSelect("true");
    if (searchserverFind == RC_SUCCESS)
    {
        
        searchserverFind = searchserversFile.getFirst();
        while (searchserverFind == RC_SUCCESS)
        {
            
            var indexinstancename = searchserversFile.searchinstancename;
            var webdav = searchserversFile.webdavname;
            var searchinstancename = searchserversFile.searchinstancename;

            for (var y =0; y &lt;searchserversFile.servers.length(); y++)
            {
                if(searchserversFile.servers[y].servertype == "master")
                {
                    var indexhostname = searchserversFile.servers[y].hostname;
                    var indexport = searchserversFile.servers[y].port;
                }

                if(searchserversFile.servers[y].primarysearcher)
                {
                    
                    var args = new Datum();
                    args.setType(8);
                    args.push(searchserversFile.servers[y].hostname);
                    args.push(searchserversFile.servers[y].port);
                    args.push(searchserversFile.searchinstancename);
                    var pingResponse =system.library.KMSearchInterface.pingEngine(args)
                    if(pingResponse == RC_SUCCESS)
                    {
                        searchServerFound = true;
                        var searchhostname = searchserversFile.servers[y].hostname;
                        var searchport = searchserversFile.servers[y].port;
                    }
                }
            }
            
            if (!searchServerFound)
                searchserverFind = searchserversFile.getNext();
            else
                break;
        }
    }

    var strCfg = "&lt;SEConfig&gt;"

    if (type == "index")
    {
        strCfg += "&lt;indexhost&gt;"+ indexhostname + "&lt;/indexhost&gt;";
        strCfg += "&lt;indexport&gt;" + indexport + "&lt;/indexport&gt;";
        strCfg += "&lt;indexinstance&gt;" + indexinstancename + "&lt;/indexinstance&gt;";
    }
    else
    if (type == "admin")
    {
        strCfg += "&lt;adminhost&gt;"+ indexhostname + "&lt;/adminhost&gt;";
        strCfg += "&lt;adminport&gt;" + indexport + "&lt;/adminport&gt;";
        strCfg += "&lt;admininstance&gt;" + indexinstancename + "&lt;/admininstance&gt;";
        strCfg += "&lt;webdav&gt;" + webdav + "&lt;/webdav&gt;";

    }
    else
    if (type == "search")
    {
        strCfg += "&lt;searchhost&gt;"+ searchhostname + "&lt;/searchhost&gt;";
        strCfg += "&lt;searchport&gt;" + searchport + "&lt;/searchport&gt;";
        strCfg += "&lt;searchinstance&gt;" + searchinstancename + "&lt;/searchinstance&gt;";
    }

    strCfg += "&lt;/SEConfig&gt;";
    return strCfg;
}

function getIndexerSearchConfig(collection)
{

    var searchservername = "";
    var collectionFile = new SCFile("kmknowledgebase");
    var collFind = collectionFile.doSelect("kbname = \""+collection+"\"");
    if (collFind == RC_SUCCESS)
    {
        
        collFind = collectionFile.getFirst();
        if (collFind == RC_SUCCESS)
        {
            
            searchservername = collectionFile.searchservername;
        }
    }


    var searchserversFile = new SCFile("kmsearchservers");
    var searchserverFind = searchserversFile.doSelect("servername = \""+searchservername+"\"");

    if (searchserverFind == RC_SUCCESS)
    {
        
        searchserverFind = searchserversFile.getFirst();
        if (searchserverFind == RC_SUCCESS)
        {
            
            var indexinstancename = searchserversFile.searchinstancename;
            for (var y =0; y &lt;searchserversFile.servers.length(); y++)
            {
                if(searchserversFile.servers[y].servertype == "master")
                {
                    var indexhostname = searchserversFile.servers[y].hostname;
                    var indexport = searchserversFile.servers[y].port;
                }

            }

        }
    }

    var strCfg = "&lt;SEConfig&gt;"


    strCfg += "&lt;searchhost&gt;"+ indexhostname + "&lt;/searchhost&gt;";
    strCfg += "&lt;searchport&gt;" + indexport + "&lt;/searchport&gt;";
    strCfg += "&lt;searchinstance&gt;" + indexinstancename + "&lt;/searchinstance&gt;";


    strCfg += "&lt;/SEConfig&gt;";

    return strCfg;
}
/**
 *	reads the current KMEnvironment record and compares it to the vars.$G_km_globalenv
 *   Used by KMSearchInterface
 */
function kmConfigChanged()
{
    var kmEnv = new SCFile("environment");
    var rc = kmEnv.doSelect("name = \"knowledge management\"");
    if( kmEnv.km_host != vars.$G_km_globalenv.km_host ){
        vars.$G_km_globalenv.km_host = kmEnv.km_host;
        return true;
    }
    if(kmEnv.km_indexport != vars.$G_km_globalenv.km_indexport ){
        vars.$G_km_globalenv.km_indexport = kmEnv.km_indexport;
        return true;
    }
    if(kmEnv.km_adminport != vars.$G_km_globalenv.km_adminport ){
        vars.$G_km_globalenv.km_adminport = kmEnv.km_adminport;
        return true;
    }
    if(kmEnv.km_searchport != vars.$G_km_globalenv.km_searchport ){
        vars.$G_km_globalenv.km_searchport = kmEnv.km_searchport;
        return true;
    }
    return false;

}
/**
 *@QCNo:QCCR1E63625
 *@Desc:KMUpdate background process error: Field contains an invalid date/time value (scheduler.process,process.javascript)
 *Since K2 default date format is "mm/dd/yy",So when current date format is inconsistent with k2, there are some errors occur
 *during index process. Hence SM must be switch current date format to that is consistent with K2  before index process.
 *so that index process doesn't fail
 *@author:yuli
 *@since:2011/7/21
 **/
function recordToXML(record)
{
    var xmlRec, xmlStr;
    if (lib.tzFunctions.getLocalDateOrder()!=1){
        var tzFile = new SCFile("tzfile");
        var tzFind = tzFile.doSelect("name = \""+lib.tzFunctions.getLocalTimeZone()+"\"");
        if (tzFind == RC_SUCCESS){
            tzFile.date_order=1;
            system.functions.set_timezone(tzFile);
            xmlRec = record.getXML();
            xmlStr = xmlRec.toXMLString();
            tzFile.date_order=lib.tzFunctions.getLocalDateOrder();
            system.functions.set_timezone(tzFile);
        }
    }else
    {
        xmlRec = record.getXML();
        xmlStr = xmlRec.toXMLString();
    }
    return xmlStr;
}


/**
 *	Get security fields defined in scmandanten, scaccess, append query
 *	@param  tablename - table name configured in kmknowledgebase
 *	@param  kbfields - kbfields in kmknowledgebase
 *	@return fields array
 **/
function getSecurityFields(tablename, kbfields) {
    var result = [];
    var mandantFields = lib.IDOLSecurity.require().collectSecurityFields(tablename);
    if (mandantFields.length === 0) {
        return [];
    }

    /*var definedFields = {};
     for (var i = 0; i &lt; kbfields.length(); i++) {
     definedFields[kbfields[i]['kbfieldname']] = true;
     }*/

    //loop the mandantFields and check if the fields already in the obj above
    for (var i = 0; i &lt; mandantFields.length; i++) {
        result.push(mandantFields[i]);
    }

    return result;
}

function getEntityByLink(){
    var linktable=funcs.get_link_table();
    var linkquery=funcs.get_link_query();

// Remove the kbname from the link. The kbname is used for adaptive 
//  learning. The select statement should have only the id in the query.
    var kbnameIndex = linkquery.indexOf("&amp;nbsp;and&amp;nbsp;kbname=");
    if ( kbnameIndex &gt;= 0 )
    {
        var kbname = linkquery.substring(kbnameIndex, linkquery.length-1);
        var qindex = kbname.indexOf("\"");
        kbname = kbname.substring(qindex+1, kbname.length);
        linkquery = linkquery.substring(0,kbnameIndex);
    }
    else // we can determine the kbname if it is not sent in the query
    {
        var kbObject = system.library.KMknowledgebase.getKBObjectForFilename(linktable);
        var kbname = kbObject.kbname;

    }

    vars.$linktable = linktable;
    vars.$linkquery = linkquery;
}

function kmIDOLDateFormat( date )
{
    var out = "";
    if (date &amp;&amp; (date instanceof Date) ) {
        out += date.getFullYear() + '/';
        if (date.getMonth() &lt; 9) {
            out += "0";
        }
        out += (date.getMonth() + 1) + '/';
        if (date.getDate() &lt; 10) {
            out += "0";
        }
        out += date.getDate();
        out += " ";

        if(date.getHours() &lt; 10)
        {
            out +="0";
        }
        out+=date.getHours()+":";

        if(date.getMinutes() &lt; 10)
        {
            out +="0";
        }
        out+=date.getMinutes()+":";

        if(date.getSeconds() &lt; 10)
        {
            out +="0";
        }
        out+=date.getSeconds()
    }
    return out;
}

function getIndexedSCFileArray()
{
    vars.$G_indexedSCFileArray = [];

    var kmlibFile = new SCFile("kmknowledgebase",SCFILE_READONLY);
    var fields = [];
    fields.push('sclibtablename');
    fields.push('kbname');
    kmlibFile.setFields(fields);
    var rc = kmlibFile.doSelect(true);

    var libArray;
    if(vars.$G_kmsearchengine == "IDOL"){
      try{
          libArray = lib.KMQuery_IDOL.require().getOnLineLibs();
         }
         catch(ex){}
    }

    while(rc == RC_SUCCESS)
    {
        if (vars.$G_kmsearchengine != "IDOL")
        {
          try{
                if (system.library.KMCollection_Statistics.checkIndexStatus(kmlibFile.kbname) == 0)
                {
                  
                  vars.$G_indexedSCFileArray.push(kmlibFile.sclibtablename);
                }
            }
            catch(ex){}
        }
        else
        {
            if(lib.ArrayUtil.contains(libArray,kmlibFile.kbname))
            {
                vars.$G_indexedSCFileArray.push(kmlibFile.sclibtablename);
            }
        }

        rc = kmlibFile.getNext();
    }
}


</script>
    <package type="string">KnowledgeManagement</package>
    <sysmodtime type="dateTime">07/16/17 17:01:41</sysmodtime>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodcount type="decimal">0</sysmodcount>
    <prgnsystem NullValue="1" type="boolean"/>
    <sysrestricted NullValue="1" type="boolean"/>
  </record>
</recordset>
