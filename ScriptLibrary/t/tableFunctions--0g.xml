<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="ScriptLibrary">
  <record id="name=&quot;tableFunctions&quot;" recordid="tableFunctions">
    <name type="string">tableFunctions</name>
    <script type="string">/** @fileoverview tableFunctions - contains functions relating to table definitions
*   @author Pete Budic
*/

/**  This function is called to find the type of a field.  It returns a number that is
*	the ServiceCenter type of the field, the same as using the type() function.  This
*	function is meant to be used when you do not have a populated file variable and 
*	therefore the type() function is unavailable.
*
*	@param {String} tableName	-  The name of table this field is in
*	@param {String}	fieldName	-	The name of the field
*	@param {Logical}	arrayFlag	-	If 'true' then the script returns type 8 if the field is an array
*										If 'false' then the script returns the actual field type of the array
*	@return The numerical type of the field
*	@type Integer
*/
function getFieldType(fieldName, tableName, arrayFlag)
{
  	if (fieldName==null || ( tableName==null &amp;&amp; fieldName.indexOf(";") == -1 ))
  		return -1;
  	var roField;
  	var roTable;
  	
  	arrayFlag = system.functions.nullsub(arrayFlag, false);
  	
  	if (fieldName.indexOf(";") != -1)
  	{
  		roField = lib.relatedObjectFunctions.getLastROFieldName(fieldName) ;
  		roTable  = lib.relatedObjectFunctions.getLastROTableName(fieldName); 
  		
  		fieldName = roField;
  		tableName = roTable;
  	}		
  
  	var table = new SCFile("dbdict");
  	var sql = "name=\"" + tableName + "\"";
 
	if ( table.doSelect( sql ) == RC_SUCCESS )
  	{ 
  		var max = table.field.length();
  		for (var x=0; x &lt; max; x++ )
  		{
  			
  			if ( table.field[x].name == fieldName)
  			{
  				if ( table.field[x].type == 8 &amp;&amp; arrayFlag == false)
  					return table.field[x+1].type;
  				else
 	 				return table.field[x].type;
  			}
  		}
  	}
  	else
  	{
  		var join = new SCFile("joindefs");
  		sql = "join.name=\"" + tableName + "\"";
  		var jType = -1;
  		if ( join.doSelect( sql ) == RC_SUCCESS )
  		{
  			for ( var i = 0, iLoopTimes = join.join_tables.length()  ; i &lt; iLoopTimes; i++ )
  			{
  				jType = getFieldType( fieldName, join.join_tables[i].table_name, arrayFlag );
  				if ( jType &gt; 0 )
  				{
  					return jType;
  				}
  			}
  		}
  	}
  	
  	return -1;
}




/**  This function is called to find the index of a field .  It returns a number that is
*	the ServiceCenter type of the field, the same as using the type() function.  This
*	function is meant to be used when you do not have a populated file variable and 
*	therefore the type() function is unavailable.
*
*	@param {String} tableName	-  The name of table this field is in
*	@param {String}	fieldName	-	The name of the field
*	@param {Logical}	arrayFlag	-	If 'true' then the script returns type 8 if the field is an array
*										If 'false' then the script returns the actual field type of the array
*	@return The numerical type of the field
*	@type Integer
*/
function getFieldIndex(fieldName, tableName, arrayFlag)
{
  	if (fieldName==null || ( tableName==null &amp;&amp; fieldName.indexOf(";") == -1 ))
  		return -1;
  	var roField;
  	var roTable;
  	
  	arrayFlag = system.functions.nullsub(arrayFlag, false);
  	
  	if (fieldName.indexOf(";") != -1)
  	{
  		roField = lib.relatedObjectFunctions.getLastROFieldName(fieldName) ;
  		roTable  = lib.relatedObjectFunctions.getLastROTableName(fieldName); 
  		
  		fieldName = roField;
  		tableName = roTable;
  	}		
  
  	var table = new SCFile("dbdict");
  	var sql = "name=\"" + tableName + "\"";
 
	if ( table.doSelect( sql ) == RC_SUCCESS )
  	{ 
  		var max = table.field.length();
  		for (var x=0; x &lt; max; x++ )
  		{
  			
  			if ( table.field[x].name == fieldName)
  			{
  				if ( table.field[x].type == 8 &amp;&amp; arrayFlag == false)
  					return table.field[x+1].index;
  				else
 	 				return table.field[x].index;
  			}
  		}
  	}
  	else
  	{
  		var join = new SCFile("joindefs");
  		sql = "join.name=\"" + tableName + "\"";
  		var jType = -1;
  		if ( join.doSelect( sql ) == RC_SUCCESS )
  		{
  			for ( var i = 0, iLoopTimes = join.join_tables.length()  ; i &lt; iLoopTimes; i++ )
  			{
  				jIndex = getFieldIndex( fieldName, join.join_tables[i].table_name, arrayFlag );
  				if ( jIndex &gt; 0 )
  				{
  					return jIndex;
  				}
  			}
  		}
  	}
  	
  	return -1;
}




/**  This function is called to find the absolute type of a field.  It returns a number that is
*	the ServiceCenter type of the field, the same as using the type() function.  This
*	function is meant to be used when you do not have a populated file variable and 
*	therefore the type() function is unavailable.
*
*	@param {String} tableName	-  The name of table this field is in
*	@param {String}	fieldName	-	The name of the field
*	@return The numerical type of the field
*	@type Integer
*/
function getAbsFieldType(fieldName, tableName)
{
  	if (fieldName==null || tableName==null)
  		return -1;
  
  	var table = new SCFile("dbdict");
  	var sql = "name=\"" + tableName + "\"";
 
	if ( table.doSelect( sql ) == RC_SUCCESS )
  	{ 
  		var max = table.field.length();
  		for (var x=0; x &lt; max; x++ )
  		{
  			
  			if ( table.field[x].name == fieldName )
  			{
  				return table.field[x].type;
  			}
  		}
  	}
  	else
  	{
  		var join = new SCFile("joindefs");
  		sql = "join.name=\"" + tableName + "\"";
  		var jType = -1;
  		if ( join.doSelect( sql ) == RC_SUCCESS )
  		{
  			for ( var i = 0, iLoopTimes = join.join_tables.length()  ; i &lt; iLoopTimes; i++ )
  			{
  				jType = getAbsFieldType( fieldName, join.join_tables[i].table_name );
  				if ( jType &gt; 0 )
  				{
  					return jType;
  				}
  			}
  		}
  	}
  	
  	return -1;
}


/**  This function is called to find the caption for a field.  It returns the caption
*	 defined in the data policy record for any given field
*
*	@param {String} tableName	-  The name of table this field is in
*	@param {String}	fieldName	-	The name of the field
*	@return The caption related to the field
*	@type String
*/
var table = new SCFile("datadict")
var joindefs = new SCFile("joindefs");
function getFieldCaption( fieldName, tableName )
{
	var sql = "name=\"" + tableName + "\"";

	if ( table.name != null &amp;&amp; table.name == tableName)
	{
		var index = system.functions.index(fieldName, table.fields)
		if ( index &gt; 0 ) 
		{
			return table.captions[index-1]
		}
	}
	else if ( table.doSelect( sql ) == RC_SUCCESS )
	{
		var index = system.functions.index(fieldName, table.fields)
		if ( index &gt; 0 ) 
		{
			return table.captions[index-1]
		}
	}
	
	var joinsql = "join.name=\""+tableName+"\"";
	if ( joindefs.join_name !=null &amp;&amp; joindefs.join_name == tableName )
	{
		for (var i = 0, iLoopTimes = joindefs.join_tables.length(); i &lt; iLoopTimes; i++ )
		{
			var caption = system.functions.get_field_caption( fieldName, joindefs.join_tables[i].table_name );
			if ( caption != null &amp;&amp; caption != fieldName )
				return caption;
		}
	}
	else if ( joindefs.doSelect(joinsql) == RC_SUCCESS )
	{
		for (var i = 0, iLoopTimes = joindefs.join_tables.length(); i &lt; iLoopTimes; i++ )
		{
			var caption = system.functions.get_field_caption( fieldName, joindefs.join_tables[i].table_name );
			if ( caption != null &amp;&amp; caption != fieldName )
				return caption;
		}
	}
	
	return fieldName;
}



/**  This function is used to return the display value of a corresponding list
*	 value in a globallist
*
*	@param {String} globalList	-  The name of the globallist to reference
*	@param {String}	listValue	-	The list value to use
*	@return the display value related to the list value
*	@type String
*/

function getGlDisplayValue( globalList, listValue )
{
	var glRecord = new SCFile("globallists")
	var sql = "name=\"" + globalList + "\"";

	if ( glRecord.doSelect( sql ) == RC_SUCCESS )
	{
		listArray = vars[glRecord.list_variable];
		var displayArray = null;
		if (glRecord.display_variable != null)
		{
			displayArray = vars[glRecord.display_variable];
		}else{
			return listValue
		}	

		var index = system.functions.index(listValue, listArray)
		
		if (index &gt; 0 &amp;&amp; displayArray)
		{
			return displayArray[index-1]
		}	
		else
		{
			return listValue
		}
	}
	return listValue;
}

/**  This function is used to take any field captions that are simply the field name and
*	add a small level of formatting.
*
*	@param {File} datadict	-  The name of the globallist to reference
*	@return success or failure (boolean)
*/

function setDefaultCaptions( datadict )
{
	  	var max = datadict.fields.length();
	  	var temp;
  		for (var i=0; i &lt; max; i++ )
  		{
  			if ( datadict.fields[i] == datadict.captions[i] )
  			{
  				temp = datadict.fields[i].replace(/[\(\)\.\_\s,]/g, " ");
  				temp = cnvrtCamelCase( temp );
       			temp = cnvrt2title( temp );
       			datadict.captions[i] = temp;
  			}
  		}
}
//
/**  This function converts a string to title case (i.e. the first letter of each word is capitalized 
*    except if the word is an articles or prepositions unless it is the first word, which is always capitalized). 
*
*	@param {String} str -  The string to be converted
*	@return The new string
*/


// the previous verson will cause sig11 issue
function cnvrt2title(str) 
{
        var temp = new Array();
        temp = str.split(' ');
         
        //for ( var i in temp )
        for ( var i=0; i&lt;temp.length; i++ )
        {
           if (/^(a|about|after|an|and|at|by|for|from|in|into|nor|of|on|onto|over|the|to|up|with|within)$/.test(temp[i]) )
              continue;

           temp[i] = temp[i].toUpperCase().substring(0,1) + temp[i].substring(1,temp[i].length);
         }
        
        return temp.join(' ');
}


function cnvrtCamelCase(input) {
	token = input.split(/(?=[A-Z])/) ;
	var output = "";
	for (var i=0; i &lt; token.length; i++)
	{
		if ( i == 0 )
		{
			output = token[i];	
		}
		else
		{
			output = output + " " + token[i];
		}
	}
	return output;
}

function getUniqueKey(tableName) {
	var object = new SCFile("datadict");
	var sql = "name=\"" + tableName + "\"";
	
	if ( object.doSelect( sql ) == RC_SUCCESS )
	{
		if ( object.unique_key != null )
			return object.unique_key;
	}  
	else
	{
		var join = new SCFile("joindefs");
		sql = "join.name=\"" + tableName + "\"";
		
		if ( join.doSelect( sql ) == RC_SUCCESS )
		{
			return getUniqueKey( join.join_tables[0].table_name );
		}
	}

	return null;
}	

function getFieldList( tableName )
{
	if ( tableName == null || tableName == "" )
	{
		return null;
	}
	var lists = new SCDatum();
	var captions = new SCDatum();
	var fields = new SCDatum();
	
	lists.setType(8);
	captions.setType(8);
	fields.setType(8);
	
	var datadict = new SCFile("datadict");
	var sql = "name=\"" + tableName + "\"";
	
	if ( datadict.doSelect( sql ) == RC_SUCCESS )
	{
		captions = datadict.captions;
		fields = datadict.fields;
	}
	else
	{
		var join = new SCFile("joindefs");
		sql = "join.name=\"" + tableName + "\"";
		var i = 0;
		if ( join.doSelect( sql ) == RC_SUCCESS )
		{	
			for ( i in join.join_tables )
			{
				var dsql = "name=\"" + join.join_tables[i].table_name + "\"";
				if ( datadict.doSelect( dsql ) == RC_SUCCESS )
				{
					for ( j in datadict.fields )
					{
						if ( system.functions.index( datadict.fields[j], fields ) == 0 )
						{
							fields = system.functions.insert( fields, 0, 1, "file." + join.join_tables[i].table_name +"," + datadict.fields[j] );
							captions = system.functions.insert( captions, 0, 1, datadict.captions[j] );
						}
					}
				}
			}
		}
	}
	
	lists = system.functions.insert( lists, 0, 1, fields );
	lists = system.functions.insert( lists, 0, 1, captions );

	return lists;
}

/**	This function is used to return the list of IR fields for a given table
*
*	@param {String} tableName - the name of the table
*	@return {Array} results - the list of IR fields for the table
*/

function getIRFields( tableName )
{	
	var results = new Datum();
	results.setType(8);
	var table = new SCFile("dbdict");
	var sql = "name=\"" + tableName + "\"";
	
	if ( table.doSelect( sql ) == RC_SUCCESS )
	{
		var keyArray = table.key;
		for ( var i in keyArray )
		{
			var key = keyArray[i];
			if ( key[0] == 64 )
			{
				for ( var j in key[1] )
					results.push( removeStructName( key[1][j] ));
			}
		}
	}
	return results;
}

/**	This function is used to remove the structure name from a given field
*
*	@param {String} field - the field name
*	@return {String} field - the field name with its structure name (which precedes a comma) removed
*/

function removeStructName( field )
{
	var index = field.indexOf(",");
	if ( index &gt; -1 )
		return field.substr( index + 1 );
	else return field;
}

/**	This function is used to determine whether a given field is an alias field
*
*	@param {String} field - the field name
*	@param {String} tableName - the name of the table
*	@return {Boolean} - 'true' if the field is an alias; 'false' otherwise
*/

function checkAlias( field, tableName )
{
	var table = new SCFile("dbdict");
	var sql = "name=\"" + tableName + "\"";
	
	if ( table.doSelect( sql ) == RC_SUCCESS )
	{
		var fieldArray = table.field;
		if ( fieldArray[1][0] == field )
			return false;
		else
		{
			var max = fieldArray.length();
			for ( var i=2; i &lt; max; i++ )
			{
				var j = i - 1;
				if ( fieldArray[i][0] == field )
				{
					if ( fieldArray[i][1] == fieldArray[j][1] &amp;&amp; fieldArray[i][2] == fieldArray[j][2] )
						return true;
					else return false;
				}
			}
			return false;				
		}		
	}
}


function getCommonFieldsfromTables()
{
   var tablename = system.vars.$L_file.tablename;
   var tables = tablename.toArray();
   var datadict = new SCFile("datadict");
   var i = 1;
   var final_Array = new SCDatum();
   var result = new Array();	
   final_Array.setType(8);

   var sql = "name=\""+tables[0]+"\"";
   
  //If the first table in the tablelist is Blank 
   if (tables[0] == null || tables[0] =="")
    { print( system.functions.scmsg( 170, "ScriptLibrary" ) );
      
      return result;}
      
   var fields = new Array();
  if ( datadict.doSelect( sql ) == RC_SUCCESS )
   {
	fields = datadict.fields;
   }
   
   if (tables.length == 1)
   {
   //I am just one table so no need to go into intersect
   }
   else
   {
    //Multiple table - intersect required
    do 
    {
     sql = "name=\""+tables[i]+"\"";
	 datadict = new SCFile("datadict");
	 i++;
	 if ( datadict.doSelect( sql ) == RC_SUCCESS )
	  {
		var err;
		var rc=system.functions.rtecall("intersect", err, final_Array, fields, datadict.fields );	
	  }
	
	 fields = final_Array;

     } while ( i &lt; tables.length )
    }
       result = fields;
      
    if( result.length() == 0)
     print( system.functions.scmsg( 171, "ScriptLibrary" ) ); 
      
      return result;

}
</script>
    <package type="string">BaseUtilities</package>
    <sysmodtime type="dateTime">07/16/17 17:01:44</sysmodtime>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodcount type="decimal">0</sysmodcount>
    <prgnsystem NullValue="1" type="boolean"/>
    <sysrestricted type="boolean">false</sysrestricted>
  </record>
</recordset>
