<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="ScriptLibrary">
  <record id="name=&quot;tzFunctions&quot;" recordid="tzFunctions">
    <name type="string">tzFunctions</name>
    <script type="string">function getTZforCompany()
// Get the time zone from the company record
// Query the info table using type="company" and return
// the value for time.zone. If there is no company record
// or time.zone is null, then "-1" is returned.
{
  var f = new SCFile();
  var q = new QueryCond("type", EQ, "company");
  
  if (f.doSelect("info", q) == RC_SUCCESS )
    if (f.time_zone)
      return f.time_zone;
  
	print( system.functions.scmsg( 143, "ScriptLibrary" ) );
  
  return "-1";
}

 
function getTZforOperator(operatorName)
// Get the time zone of the operator
// Query the operator table using name=operatorName and return
// the value for time.zone. If time.zone is null, then lookup
// the value from the company record. If there is no operator record
// found then "-1" is returned.
{
  var f = new SCFile();
  var q = new QueryCond("name", EQ, operatorName);
  
  if (f.doSelect("operator",q) == RC_SUCCESS)
    if (f.time_zone)
    {
      return f.time_zone;
    }
    else
    {
      return getTZforCompany();
    }
        
  print( system.functions.scmsg( 144, "ScriptLibrary", [operatorName] ) );
  
  return "-1";
}

function getTZforContact(contactName)
// Get the time zone of the contact.
// Query the contacts table using name=contactName and return
// the value for time.zone. If time.zone is null, then lookup
// the value from the company record. If there is no contacts record
// found then "-1" is returned.
{
  var f = new SCFile();
  var q = new QueryCond("contact_name", EQ, contactName);
  
  if (f.doSelect("contacts",q) == RC_SUCCESS)
    if (f.time_zone)
    {
      return f.time_zone;
    }
    else
    {
      return getTZforCompany();
    }
        
  print( system.functions.scmsg( 145, "ScriptLibrary", [contactName] ) );
  
  return "-1";
}

function getTZforLocation(locationName)
// Get the time zone of the location.
// Query the location table using location=locationName and return
// the value for time.zone. If time.zone is null, then lookup
// the value from the company record. If there is no location record
// found then "-1" is returned.
{
  var f = new SCFile();
  var q = new QueryCond("location", EQ, locationName);

  if (f.doSelect("location",q) == RC_SUCCESS )
    if (f.time_zone)
    {
      return f.time_zone;
    }
    else
    {
      return getTZforCompany();
    }
        
  print( system.functions.scmsg( 146, "ScriptLibrary", [locationName] ) );
  
  return "-1";
}


function getTZforDevice(deviceName)
// Get the time zone of the device.
// Query the device table using logical.name=deviceName and return
// the value for time.zone. If time.zone is null, then lookup
// the value from the company record. If there is no device record
// found then "-1" is returned.
{
  var f = new SCFile();
  var q = new QueryCond("logical_name", EQ, deviceName);

  if (f.doSelect("device",q) == RC_SUCCESS )
    if (f.time_zone)
    {
      return f.time_zone;
    }
    else
    {
      return getTZforCompany();
    }    
    
  print( system.functions.scmsg( 147, "ScriptLibrary", [deviceName] ) );
  
  return -1;
}


/**
*QCCR1E59316
*@Description: get time zone offset of current operate system, because all date variable in javascript base on  time zone of OS . 
*@Author: added by yuli 
*@Date: since 9/25/10 
**/
function getOSOffset()
{
  return new Date().getTimezoneOffset();
}
/**
*QCCR1E59316
*@Description: convert date from string to datetime . 
*@Author: added by yuli 
*@Date: since 9/25/10 
**/
function convertStringtoDate(strdate)
{
  
  
  

  var dtdate=new Date(strdate);
  
  
  return dtdate;
}

/**
*QCCR1E59316
*@Description: convert date from datetime to string according to the dateorder. 
*@Author: added by yuli 
*@Date: since 10/28/10 
**/
function convertDatetoString(date,dateOrder)
{


	if ( date == null )
		return null;
	var  strMonth = system.functions.str( system.functions.month(date) );
	var  strDay   = system.functions.str( system.functions.day(date) );
	var  strYear  = system.functions.str( system.functions.year( date) );
	var  strTime  = system.functions.str( system.functions.time( date ) );
    var  strDate;

	if (system.functions.lng(strMonth) == 1)
	{
        strMonth = "0" + strMonth;
	}
	if (system.functions.lng(strDay) == 1)
	{
        strDay = "0" + strDay;
	}
	
	if (dateOrder == system.library.DateOrderConstant.mmddyy() )
	{
		strDate = strMonth + "/" + strDay + "/" + strYear.substr(2) +" " + strTime;
	}
	else if (dateOrder == system.library.DateOrderConstant.ddmmyy() )
	{
		strDate = strDay + "/" + strMonth + "/" + strYear.substr(2) +" " + strTime;	
	}
	else if (dateOrder == system.library.DateOrderConstant.yymmdd() )
	{
		strDate = strYear.substr(2) + "/" + strMonth + "/" + strDay +" " + strTime;
	}
	else if (dateOrder == system.library.DateOrderConstant.mmddyyyy() )
	{
		strDate = strMonth + "/" + strDay + "/" + strYear +" " + strTime;
	}
	else if (dateOrder == system.library.DateOrderConstant.ddmmyyyy() )
	{
		strDate = strDay + "/" + strMonth + "/" + strYear +" " + strTime;
	}
	else if (dateOrder == system.library.DateOrderConstant.yyyymmdd() )
	{
		strDate = strYear + "/" + strMonth + "/" + strDay +" " + strTime;	
	}
	return strDate;
	
}

/**
*
*@Description: Get timezone file by time zone name. 
*@Author: added by Kenny 
*@Date: since 11/10/10 
**/
function getTZFileByTZName(tzName)
{
  
  var f = new SCFile();
  var q = new QueryCond("name", EQ, tzName);

  if (f.doSelect("tzfile",q) == RC_SUCCESS ){  
        return f;
  }else{        
        return "-1";
  }  
}

/**
* QCCR1E57676-Have the time references in mail notifications be sent with receiver's TimeZone adjustment
*
* Get the time zone of the notifyName.
* 1.Query the operator table using name=notifyName and return the value for time.zone. 
* 2.If time.zone is null, then lookup the value from the contacts record. 
* 3.If time.zone is null, then lookup the value from the company record. 
* 4.If 3 tables can't found then "-1" is returned, no need print message.
* 
*@Description: Get timezone file by notify Name. 
*@Author: added by Kenny 
*@Date: since 2011/03/10 
**/
function getTZforNotify(notifyName)
{
	var operatorFile = new SCFile("operator", SCFILE_READONLY);
	operatorFile.setFields(["time.zone"]);
  	var operatorQ = new QueryCond("name", EQ, notifyName);
  	if (operatorFile.doSelect(operatorQ) == RC_SUCCESS)
  	{
	  	if (operatorFile.time_zone)
	    {
	    	return operatorFile.time_zone;
	    }	         
  	}  	
  	
  	var contactsFile = new SCFile("contacts", SCFILE_READONLY);
  	contactsFile.setFields(["time.zone"]);
	var contactsQ = new QueryCond("contact_name", EQ, notifyName);
	if (contactsFile.doSelect(contactsQ) == RC_SUCCESS)
	{
		if (contactsFile.time_zone)
		{
	  		return contactsFile.time_zone;
		}
	}
	
	var companyFile = new SCFile("info", SCFILE_READONLY);
	companyFile.setFields(["time.zone"]);
	var companyQ = new QueryCond("type", EQ, "company");
	if (companyFile.doSelect(companyQ) == RC_SUCCESS )
	{		
		if (companyFile.time_zone)
		{
			return companyFile.time_zone;
		}
	}
  	return "-1";
}

/**
* Retrieve value to $lo.time.zone and $lo.date.order.
* The priority of $lo.time.zone is: time.zone in the current operator, time.zone in info company, Greenwich/Universal
* The priority of $lo.date.order is: date.order in the current operator, date.order in info.company, the default date.order in the time zone of $lo.time.zone, 1
**/
function retrieveLocalTimeZone() {
    var operator=lib.operatorUtil.getOperatorByName(system.functions.operator());
    var company=lib.operatorUtil.getCompany();
    
    if (operator!=null) {
        vars.$lo_time_zone=system.functions.nullsub(system.functions.nullsub(operator.time_zone, company.time_zone), "Greenwich/Universal");
    } else {
        vars.$lo_time_zone=system.functions.nullsub(company.time_zone, "Greenwich/Universal");
    }
    var tzfile=getTZFileByTZName(vars.$lo_time_zone);
    
    if (operator!=null) {
        vars.$lo_date_order=system.functions.nullsub(system.functions.nullsub(system.functions.nullsub(operator.date_order, company.date_order), tzfile.date_order), 1);
    } else {
        vars.$lo_date_order=system.functions.nullsub(system.functions.nullsub(company.date_order, tzfile.date_order), 1);
    }
}

/**
* If $lo.time.zone is not null, return it directly
* Otherwise, invoke retrieveLocalTimeZone to assign value to $lo.time.zone and return it.
**/
function getLocalTimeZone() {
    if (system.functions._null(vars.$lo_time_zone))
        retrieveLocalTimeZone();
        
    return vars.$lo_time_zone;
}

/**
* If $lo.date.order is not null, return it directly
* Otherwise, invoke retrieveLocalTimeZone to assign value to $lo.date.order and return it.
**/
function getLocalDateOrder() {
    if (system.functions._null(vars.$lo_date_order))
        retrieveLocalTimeZone();
    
    return vars.$lo_date_order;
}


/**
*QCCR1E84115
*@Description: convert date from datetime to string against dateorder and time zone. 
*@Author: added by yuli 
*@Date: since 10/09/12 
**/
function convertDatetoStringonTZ(date,dateorder,timezone)
{
	var strDate =convertDatetoString(date,dateorder);
	var tzSFile = new SCFile("tzfile");
	var tzSFind = tzSFile.doSelect("name = \""+vars.$lo_time_zone+"\"");
	var tzDFile = new SCFile("tzfile");
	var tzDFind = tzDFile.doSelect("name = \""+timezone+"\"");
	if (tzDFind == RC_SUCCESS &amp;&amp; tzSFind == RC_SUCCESS){
	    tzDFile.date_order=dateorder;
        system.functions.set_timezone(tzDFile);
        strDate=system.functions.str(date); 
        system.functions.set_timezone(tzSFile);
    } 
    return strDate;

}







/**
* QCCR1E87767
* This function converts date string based on time zone and date order
* @param {string} strDate - The date string input to convert
* @param {string} tzname1 - The time zone name for the input date string
* @param {number} dateorder1 - The date order for the input date string
* @param {string} tzname2 - The time zone name to convert
* @param {number} dateorder2 - The date order to convert
* @return the converted date string and when the input date string cannot be recoginzed, just return the input one
*/
function convertDateStringOnTZ(strDate, tzname1, dateorder1, tzname2, dateorder2)
{
    if (strDate == null || strDate == "")
        return strDate;
    
    if (dateorder1 == null || dateorder1 == "" || tzname1 == null || tzname1 == "")
        return strDate;
    
    if (dateorder2 == null || dateorder2 == "" || tzname2 == null || tzname2 == "")
        return strDate;
        
    var tzfile1 = getTZFileByTZName(tzname1);
    tzfile1.date_order = dateorder1;
    system.functions.set_timezone(tzfile1);
    var date = system.functions.val(strDate, 3);
    
    if (date != null)
    {
        var tzfile2 = getTZFileByTZName(tzname2);
        tzfile2.date_order = dateorder2;
        system.functions.set_timezone(tzfile2);
        strDate = system.functions.str(date);
    }
    
    var localtz = getTZFileByTZName(getLocalTimeZone());
    localtz.date_order = getLocalDateOrder();
    system.functions.set_timezone(localtz);
    
    return strDate;
}

/**
* Convert date string based on local time zone and date order to GMT
* @param {string} strDate - The date string input to convert
* @param {number} gmt_dateorder - The date order to convert. If it is not set, it will be set to 1
* @return the converted date string
*
**/
function convertDateStringToGMT(strDate, gmt_dateorder)
{
    if (gmt_dateorder == null || gmt_dateorder == "")
        gmt_dateorder = 1;
        
    return convertDateStringOnTZ(strDate, getLocalTimeZone(), getLocalDateOrder(), "Greenwich/Universal", gmt_dateorder);
}


/**
* Convert date string based on GMT time zone and date order to local time zone and date order
* @param {string} strDate - The date string input to convert
* @param {number} gmt_dateorder - The date order to convert. If it is not set, it will be set to 1
* @return the converted date string
*
**/
function convertDateStringToLocal(strDate, gmt_dateorder)
{
    if (gmt_dateorder == null || gmt_dateorder == "")
        gmt_dateorder = 1;
    
    return convertDateStringOnTZ(strDate, "Greenwich/Universal", gmt_dateorder, getLocalTimeZone(), getLocalDateOrder());
}


/**
* Search all date type part of string and convert to the correct time zone and data order
* @param {string} string - The input string
* @param {boolean} reverse - true to convert local to GMT, false to convert GMT to local. Default is false.
* @param {boolean} hasQuotation - true to has single quotation for date part and false not. Default is true.
* @return the converted string
**/
function convertDateInString(string, reverse, hasQuotation)
{
    if (string == null)
        return string;
    
    if (reverse == null)
    {
        reverse = false;
    }
    
    if (hasQuotation == null)
    {
        hasQuotation = true;
    }
        
    var newstr = "";
    
    var index = [];
    var lastindex = [];
    lastindex.push(0);
    var orig = [];
    var dest = [];
        
    var pattern;
    var offset=0;
    var dateseparator="\/";
    if (reverse) 
    {
        var localtz=lib.tzFunctions.getTZFileByTZName(getLocalTimeZone());
        dateseparator=system.functions.nullsub(localtz.date_separator, "\/");
    }
    if (hasQuotation)
    {
        pattern=new RegExp("\'([0-9]+"+dateseparator+"[0-9]+"+dateseparator+"[0-9]+\s*( [0-9]+:[0-9]+(:[0-9]+)?)?)\'", "g");
        offset=1;
    }
    else 
    {
        pattern=new RegExp("([0-9]+"+dateseparator+"[0-9]+"+dateseparator+"[0-9]+\s*( [0-9]+:[0-9]+(:[0-9]+)?)?)", "g");
    }
    var matches = pattern.exec(string);
    while (matches != null)
    {
        index.push(matches.index+offset);
        lastindex.push(matches.index+matches[0].length-offset);
        var origstr=matches[0].substr(offset, matches[0].length - 2*offset);
        orig.push(origstr);
        if (reverse) 
        {
            dest.push(lib.tzFunctions.convertDateStringToGMT(origstr));
        }
        else
        {
            dest.push(lib.tzFunctions.convertDateStringToLocal(origstr));
        }
        matches=pattern.exec(string);
    }

    
    for (var i=0; i&lt;index.length; i++)
    {
        newstr+=string.substring(lastindex[i], index[i]);
        var str=dest[i];
        if (hasQuotation)
        {
            if (index[i]&gt;1)
            {
                var ch=string.charAt(index[i]-offset-1);
                if (ch == "'")
                {
                    str=orig[i];
                }
            }
            if (lastindex[i+1]&lt;string.length - 1)
            {
                var ch=string.charAt(lastindex[i+1]+1);
                if (ch == "'")
                {
                    str=orig[i];
                }
            }
        }
        newstr=newstr+str;
    }

    newstr+=string.substring(lastindex[index.length]);
    
    return newstr;
}

/**
* Search all date type part of string and convert to the correct time zone and data order
* @param {string} string - The input string
* @param {boolean} hasQuotation - true to has single quotation for date part and false not. Default is true.
* @return the converted string
**/
function convertDateInStringToGMT(string, hasQuotation) {
    return convertDateInString(string, true, hasQuotation);
}


/**
* Search all date type part of string and convert to the correct time zone and data order
* @param {string} string - The input string
* @param {boolean} hasQuotation - true to has single quotation for date part and false not. Default is true.
* @return the converted string
**/
function convertDateInStringToLocal(string, hasQuotation) {
    return convertDateInString(string, false, hasQuotation);
}
</script>
    <package type="string">BaseUtilities</package>
    <sysmodtime type="dateTime">07/16/17 17:01:45</sysmodtime>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodcount type="decimal">0</sysmodcount>
    <prgnsystem type="boolean">true</prgnsystem>
    <sysrestricted NullValue="1" type="boolean"/>
  </record>
</recordset>
